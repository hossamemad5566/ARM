
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a518  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800a6b8  0800a6b8  0000b6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a804  0800a804  0000c014  2**0
                  CONTENTS
  4 .ARM          00000000  0800a804  0800a804  0000c014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a804  0800a804  0000c014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a804  0800a804  0000b804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a808  0800a808  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a80c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c014  2**0
                  CONTENTS
 10 .bss          00001d8c  20000014  20000014  0000c014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001da0  20001da0  0000c014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d33c  00000000  00000000  0000c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004324  00000000  00000000  00029380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0002d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001173  00000000  00000000  0002ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e1c  00000000  00000000  0002fe9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f6ab  00000000  00000000  00053cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcea4  00000000  00000000  00073362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150206  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d28  00000000  00000000  0015024c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00155f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6a0 	.word	0x0800a6a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800a6a0 	.word	0x0800a6a0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <IRSensor_Read>:
 * @param  Select which IR you need to get it's state
 * @retval return the value of IR sensor
 */

uint8_t IRSensor_Read(uint8_t IRSensor)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_IRSensorReturnValue = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
	switch(IRSensor)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <IRSensor_Read+0x1a>
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d008      	beq.n	80009e6 <IRSensor_Read+0x2a>
		break;
	case RIGHT_IR:
		Local_IRSensorReturnValue = HAL_GPIO_ReadPin(IR_RIGHT_GPIO_Port, IR_RIGHT_Pin);
		break;
	default:
		break;
 80009d4:	e00f      	b.n	80009f6 <IRSensor_Read+0x3a>
		Local_IRSensorReturnValue = HAL_GPIO_ReadPin(IR_LEFT_GPIO_Port, IR_LEFT_Pin);
 80009d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009da:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <IRSensor_Read+0x44>)
 80009dc:	f002 fed8 	bl	8003790 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
		break;
 80009e4:	e007      	b.n	80009f6 <IRSensor_Read+0x3a>
		Local_IRSensorReturnValue = HAL_GPIO_ReadPin(IR_RIGHT_GPIO_Port, IR_RIGHT_Pin);
 80009e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <IRSensor_Read+0x44>)
 80009ec:	f002 fed0 	bl	8003790 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	73fb      	strb	r3, [r7, #15]
		break;
 80009f4:	bf00      	nop
	}
	return Local_IRSensorReturnValue;
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	48000400 	.word	0x48000400

08000a04 <LDR_u8GetValue>:
  * @brief  Get the Value measured by LDR sensor.
  * @param  None
  * @retval The LDR value
  */
uint8_t LDR_u8GetValue(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

	uint32_t lux = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
	uint8_t LDR_value = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	70fb      	strb	r3, [r7, #3]
	HAL_ADC_Start(&hadc1);
 8000a12:	4814      	ldr	r0, [pc, #80]	@ (8000a64 <LDR_u8GetValue+0x60>)
 8000a14:	f001 fd84 	bl	8002520 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8000a18:	2114      	movs	r1, #20
 8000a1a:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <LDR_u8GetValue+0x60>)
 8000a1c:	f001 fe96 	bl	800274c <HAL_ADC_PollForConversion>
	lux = HAL_ADC_GetValue(&hadc1);
 8000a20:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <LDR_u8GetValue+0x60>)
 8000a22:	f001 ff95 	bl	8002950 <HAL_ADC_GetValue>
 8000a26:	6078      	str	r0, [r7, #4]
	LDR_value = (lux/4096.0)*100.0;
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fd1b 	bl	8000464 <__aeabi_ui2d>
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <LDR_u8GetValue+0x64>)
 8000a34:	f7ff feba 	bl	80007ac <__aeabi_ddiv>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <LDR_u8GetValue+0x68>)
 8000a46:	f7ff fd87 	bl	8000558 <__aeabi_dmul>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	f7ff ff93 	bl	800097c <__aeabi_d2uiz>
 8000a56:	4603      	mov	r3, r0
 8000a58:	70fb      	strb	r3, [r7, #3]
	return LDR_value;
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000040 	.word	0x20000040
 8000a68:	40b00000 	.word	0x40b00000
 8000a6c:	40590000 	.word	0x40590000

08000a70 <delay>:
#include "main.h"
/*edit timer*/
extern TIM_HandleTypeDef htim4;
/*edit timer*/
void delay (uint16_t time)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	/*edit timer*/
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <delay+0x30>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 8000a82:	bf00      	nop
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <delay+0x30>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3f9      	bcc.n	8000a84 <delay+0x14>
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2000014c 	.word	0x2000014c
 8000aa4:	00000000 	.word	0x00000000

08000aa8 <HAL_TIM_IC_CaptureCallback>:

static Ultrasonic_t HCSR04_sensor;

//The callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	/*		edit tim 									edit channel	*/
	if (   (htim == &htim4)  && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4b      	ldr	r2, [pc, #300]	@ (8000be0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	f040 8088 	bne.w	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7f1b      	ldrb	r3, [r3, #28]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	f040 8083 	bne.w	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
	{
		if (HCSR04_sensor.Is_First_Captured==0) // if the first value is not captured
 8000ac4:	4b47      	ldr	r3, [pc, #284]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ac6:	7b1b      	ldrb	r3, [r3, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11a      	bne.n	8000b02 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			/*														edit channel	*/
			HCSR04_sensor.IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000acc:	2108      	movs	r1, #8
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f005 fafe 	bl	80060d0 <HAL_TIM_ReadCapturedValue>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a43      	ldr	r2, [pc, #268]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ad8:	6013      	str	r3, [r2, #0]
			HCSR04_sensor.Is_First_Captured = 1;  // set the first captured as true
 8000ada:	4b42      	ldr	r3, [pc, #264]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			/*									edit channel	*/
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6a1a      	ldr	r2, [r3, #32]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000aee:	621a      	str	r2, [r3, #32]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6a1a      	ldr	r2, [r3, #32]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000afe:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			/*		    	edit  timer    channel	*/
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
		}
	}
}
 8000b00:	e063      	b.n	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
		else if (HCSR04_sensor.Is_First_Captured==1)   // if the first is already captured
 8000b02:	4b38      	ldr	r3, [pc, #224]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b04:	7b1b      	ldrb	r3, [r3, #12]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d15f      	bne.n	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
			HCSR04_sensor.IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f005 fadf 	bl	80060d0 <HAL_TIM_ReadCapturedValue>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a33      	ldr	r2, [pc, #204]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b16:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	@ 0x24
			if (HCSR04_sensor.IC_Val2 > HCSR04_sensor.IC_Val1)
 8000b20:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4b2f      	ldr	r3, [pc, #188]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d907      	bls.n	8000b3c <HAL_TIM_IC_CaptureCallback+0x94>
				HCSR04_sensor.Difference = HCSR04_sensor.IC_Val2-HCSR04_sensor.IC_Val1;
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b38:	6093      	str	r3, [r2, #8]
 8000b3a:	e00f      	b.n	8000b5c <HAL_TIM_IC_CaptureCallback+0xb4>
			else if (HCSR04_sensor.IC_Val1 > HCSR04_sensor.IC_Val2)
 8000b3c:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d909      	bls.n	8000b5c <HAL_TIM_IC_CaptureCallback+0xb4>
				HCSR04_sensor.Difference = (0xffff - HCSR04_sensor.IC_Val1) + HCSR04_sensor.IC_Val2;
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000b56:	33ff      	adds	r3, #255	@ 0xff
 8000b58:	4a22      	ldr	r2, [pc, #136]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b5a:	6093      	str	r3, [r2, #8]
			HCSR04_sensor.Distance = HCSR04_sensor.Difference * .034/2;
 8000b5c:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fc7f 	bl	8000464 <__aeabi_ui2d>
 8000b66:	a31c      	add	r3, pc, #112	@ (adr r3, 8000bd8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6c:	f7ff fcf4 	bl	8000558 <__aeabi_dmul>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	4610      	mov	r0, r2
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b80:	f7ff fe14 	bl	80007ac <__aeabi_ddiv>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff fef6 	bl	800097c <__aeabi_d2uiz>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b96:	735a      	strb	r2, [r3, #13]
			HCSR04_sensor.Is_First_Captured = 0; // set it back to false
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a1a      	ldr	r2, [r3, #32]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000bac:	621a      	str	r2, [r3, #32]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6a12      	ldr	r2, [r2, #32]
 8000bb8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0208 	bic.w	r2, r2, #8
 8000bc8:	60da      	str	r2, [r3, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	b020c49c 	.word	0xb020c49c
 8000bdc:	3fa16872 	.word	0x3fa16872
 8000be0:	2000014c 	.word	0x2000014c
 8000be4:	20000030 	.word	0x20000030

08000be8 <HCSR04_Init>:

/*This function to start the timer*/
void HCSR04_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	/*				edit  timer		channel  */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000bec:	2108      	movs	r1, #8
 8000bee:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <HCSR04_Init+0x10>)
 8000bf0:	f004 fd8a 	bl	8005708 <HAL_TIM_IC_Start_IT>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000014c 	.word	0x2000014c

08000bfc <HCSR04_Read1>:

void HCSR04_Read1 (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c06:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <HCSR04_Read1+0x38>)
 8000c08:	f002 fdda 	bl	80037c0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f7ff ff2f 	bl	8000a70 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c18:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <HCSR04_Read1+0x38>)
 8000c1a:	f002 fdd1 	bl	80037c0 <HAL_GPIO_WritePin>
	/*edit 				timer    channel */
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HCSR04_Read1+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <HCSR04_Read1+0x3c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f042 0208 	orr.w	r2, r2, #8
 8000c2c:	60da      	str	r2, [r3, #12]
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	48000400 	.word	0x48000400
 8000c38:	2000014c 	.word	0x2000014c

08000c3c <Get_Distance>:

uint8_t Get_Distance(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HCSR04_Read1();
 8000c40:	f7ff ffdc 	bl	8000bfc <HCSR04_Read1>
	osDelay(100);
 8000c44:	2064      	movs	r0, #100	@ 0x64
 8000c46:	f006 feeb 	bl	8007a20 <osDelay>
	return (HCSR04_sensor.Distance);
 8000c4a:	4b02      	ldr	r3, [pc, #8]	@ (8000c54 <Get_Distance+0x18>)
 8000c4c:	7b5b      	ldrb	r3, [r3, #13]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000030 	.word	0x20000030

08000c58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000c7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cd6:	f001 fa29 	bl	800212c <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f000 fd8e 	bl	8001800 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000cf0:	f002 f926 	bl	8002f40 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cfa:	f000 fd81 	bl	8001800 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <MX_ADC1_Init+0xdc>)
 8000d1c:	f001 fe26 	bl	800296c <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d26:	f000 fd6b 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	@ 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000040 	.word	0x20000040

08000d38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d58:	d124      	bne.n	8000da4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d5a:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <HAL_ADC_MspInit+0x74>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <HAL_ADC_MspInit+0x74>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <HAL_ADC_MspInit+0x74>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <HAL_ADC_MspInit+0x74>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <HAL_ADC_MspInit+0x74>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HAL_ADC_MspInit+0x74>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da0:	f002 fb6c 	bl	800347c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	@ 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000

08000db0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of LKS_semaphore */
	LKS_semaphoreHandle = osSemaphoreNew(1, 0, &LKS_semaphore_attributes);
 8000db4:	4a18      	ldr	r2, [pc, #96]	@ (8000e18 <MX_FREERTOS_Init+0x68>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	2001      	movs	r0, #1
 8000dba:	f006 fe5f 	bl	8007a7c <osSemaphoreNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <MX_FREERTOS_Init+0x6c>)
 8000dc2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of LKS_ */
	LKS_Handle = osThreadNew(LKS_TASK, NULL, &LKS__attributes);
 8000dc4:	4a16      	ldr	r2, [pc, #88]	@ (8000e20 <MX_FREERTOS_Init+0x70>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4816      	ldr	r0, [pc, #88]	@ (8000e24 <MX_FREERTOS_Init+0x74>)
 8000dca:	f006 fd7f 	bl	80078cc <osThreadNew>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <MX_FREERTOS_Init+0x78>)
 8000dd2:	6013      	str	r3, [r2, #0]

	/* creation of ACC_ */
	ACC_Handle = osThreadNew(ACC_TASK, NULL, &ACC__attributes);
 8000dd4:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <MX_FREERTOS_Init+0x7c>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4815      	ldr	r0, [pc, #84]	@ (8000e30 <MX_FREERTOS_Init+0x80>)
 8000dda:	f006 fd77 	bl	80078cc <osThreadNew>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <MX_FREERTOS_Init+0x84>)
 8000de2:	6013      	str	r3, [r2, #0]

	/* creation of AB_ */
	AB_Handle = osThreadNew(AB_TASK, NULL, &AB__attributes);
 8000de4:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <MX_FREERTOS_Init+0x88>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4814      	ldr	r0, [pc, #80]	@ (8000e3c <MX_FREERTOS_Init+0x8c>)
 8000dea:	f006 fd6f 	bl	80078cc <osThreadNew>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a13      	ldr	r2, [pc, #76]	@ (8000e40 <MX_FREERTOS_Init+0x90>)
 8000df2:	6013      	str	r3, [r2, #0]

	/* creation of BLUETOOTH_ */
	BLUETOOTH_Handle = osThreadNew(BLUETOOTH_TASK, NULL, &BLUETOOTH__attributes);
 8000df4:	4a13      	ldr	r2, [pc, #76]	@ (8000e44 <MX_FREERTOS_Init+0x94>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4813      	ldr	r0, [pc, #76]	@ (8000e48 <MX_FREERTOS_Init+0x98>)
 8000dfa:	f006 fd67 	bl	80078cc <osThreadNew>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <MX_FREERTOS_Init+0x9c>)
 8000e02:	6013      	str	r3, [r2, #0]

	/* creation of ALC_ */
	ALC_Handle = osThreadNew(ALC_TASK, NULL, &ALC__attributes);
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <MX_FREERTOS_Init+0xa0>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4812      	ldr	r0, [pc, #72]	@ (8000e54 <MX_FREERTOS_Init+0xa4>)
 8000e0a:	f006 fd5f 	bl	80078cc <osThreadNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a11      	ldr	r2, [pc, #68]	@ (8000e58 <MX_FREERTOS_Init+0xa8>)
 8000e12:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	0800a7bc 	.word	0x0800a7bc
 8000e1c:	200000b0 	.word	0x200000b0
 8000e20:	0800a708 	.word	0x0800a708
 8000e24:	08000e5d 	.word	0x08000e5d
 8000e28:	2000009c 	.word	0x2000009c
 8000e2c:	0800a72c 	.word	0x0800a72c
 8000e30:	08001065 	.word	0x08001065
 8000e34:	200000a0 	.word	0x200000a0
 8000e38:	0800a750 	.word	0x0800a750
 8000e3c:	080011b5 	.word	0x080011b5
 8000e40:	200000a4 	.word	0x200000a4
 8000e44:	0800a774 	.word	0x0800a774
 8000e48:	08001221 	.word	0x08001221
 8000e4c:	200000a8 	.word	0x200000a8
 8000e50:	0800a798 	.word	0x0800a798
 8000e54:	08001541 	.word	0x08001541
 8000e58:	200000ac 	.word	0x200000ac

08000e5c <LKS_TASK>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LKS_TASK */
void LKS_TASK(void *argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)

	{

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); /*for debugging*/
 8000e64:	2120      	movs	r1, #32
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6a:	f002 fcc1 	bl	80037f0 <HAL_GPIO_TogglePin>
		if (LKS_State == LKS_ON)
 8000e6e:	4b72      	ldr	r3, [pc, #456]	@ (8001038 <LKS_TASK+0x1dc>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	f040 80db 	bne.w	800102e <LKS_TASK+0x1d2>
		{
			switch (LKS_mode)
 8000e78:	4b70      	ldr	r3, [pc, #448]	@ (800103c <LKS_TASK+0x1e0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	f000 8083 	beq.w	8000f88 <LKS_TASK+0x12c>
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	f040 80ce 	bne.w	8001024 <LKS_TASK+0x1c8>
			{
			/*adaptive*/
			case LKS_ADAPTIVE:
				/* if the driver do not turn on the turn signsl */
				if (Turn_Flag == T_OFF && speed > 20 && (!AB_Flag))
 8000e88:	4b6d      	ldr	r3, [pc, #436]	@ (8001040 <LKS_TASK+0x1e4>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 80cb 	bne.w	8001028 <LKS_TASK+0x1cc>
 8000e92:	4b6c      	ldr	r3, [pc, #432]	@ (8001044 <LKS_TASK+0x1e8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b14      	cmp	r3, #20
 8000e98:	f240 80c6 	bls.w	8001028 <LKS_TASK+0x1cc>
 8000e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001048 <LKS_TASK+0x1ec>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 80c1 	bne.w	8001028 <LKS_TASK+0x1cc>
				{
					HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4868      	ldr	r0, [pc, #416]	@ (800104c <LKS_TASK+0x1f0>)
 8000eac:	f002 fc88 	bl	80037c0 <HAL_GPIO_WritePin>
					Left_IR = IRSensor_Read(LEFT_IR);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fd83 	bl	80009bc <IRSensor_Read>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b65      	ldr	r3, [pc, #404]	@ (8001050 <LKS_TASK+0x1f4>)
 8000ebc:	701a      	strb	r2, [r3, #0]
					Right_IR = IRSensor_Read(RIGHT_IR);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fd7c 	bl	80009bc <IRSensor_Read>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b62      	ldr	r3, [pc, #392]	@ (8001054 <LKS_TASK+0x1f8>)
 8000eca:	701a      	strb	r2, [r3, #0]
					/* If the car is inside the lane / No lane markings are detected on both sides */
					if ((Left_IR == BLACK) && (Right_IR == BLACK))
 8000ecc:	4b60      	ldr	r3, [pc, #384]	@ (8001050 <LKS_TASK+0x1f4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d126      	bne.n	8000f22 <LKS_TASK+0xc6>
 8000ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8001054 <LKS_TASK+0x1f8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d122      	bne.n	8000f22 <LKS_TASK+0xc6>
					{
						if (Return_flag == 1)
 8000edc:	4b5e      	ldr	r3, [pc, #376]	@ (8001058 <LKS_TASK+0x1fc>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d10d      	bne.n	8000f00 <LKS_TASK+0xa4>
						{
							Motor_voidMoveForward(speed);
 8000ee4:	4b57      	ldr	r3, [pc, #348]	@ (8001044 <LKS_TASK+0x1e8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fcb5 	bl	8001858 <Motor_voidMoveForward>
							Motor_enumDirection = M_M;
 8000eee:	4b5b      	ldr	r3, [pc, #364]	@ (800105c <LKS_TASK+0x200>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
							Motor_voidDirection(Motor_enumDirection);
 8000ef4:	4b59      	ldr	r3, [pc, #356]	@ (800105c <LKS_TASK+0x200>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd37 	bl	800196c <Motor_voidDirection>
 8000efe:	e00c      	b.n	8000f1a <LKS_TASK+0xbe>
						}
						else
						{
							Motor_voidMoveBackward(speed);
 8000f00:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <LKS_TASK+0x1e8>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fcc1 	bl	800188c <Motor_voidMoveBackward>
							Motor_enumDirection = M_M;
 8000f0a:	4b54      	ldr	r3, [pc, #336]	@ (800105c <LKS_TASK+0x200>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
							Motor_voidDirection(Motor_enumDirection);
 8000f10:	4b52      	ldr	r3, [pc, #328]	@ (800105c <LKS_TASK+0x200>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fd29 	bl	800196c <Motor_voidDirection>
						}
						/* Reset (Lane Keeping Status) Flag */
						LKS_Flag = 0; /*TODO : need to be handled */
 8000f1a:	4b51      	ldr	r3, [pc, #324]	@ (8001060 <LKS_TASK+0x204>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e031      	b.n	8000f86 <LKS_TASK+0x12a>
					}
					/* If the car drifts to the right / Lane markings are detected on the right side */
					else if (Left_IR == BLACK && Right_IR == WHITE)
 8000f22:	4b4b      	ldr	r3, [pc, #300]	@ (8001050 <LKS_TASK+0x1f4>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d114      	bne.n	8000f54 <LKS_TASK+0xf8>
 8000f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001054 <LKS_TASK+0x1f8>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d110      	bne.n	8000f54 <LKS_TASK+0xf8>
					{
						/* Set (Lane Keeping Status) Flag */
						LKS_Flag = 1;
 8000f32:	4b4b      	ldr	r3, [pc, #300]	@ (8001060 <LKS_TASK+0x204>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
						// Steer the car to the left
						Motor_voidMoveLeft(speed);
 8000f38:	4b42      	ldr	r3, [pc, #264]	@ (8001044 <LKS_TASK+0x1e8>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fcd5 	bl	80018ec <Motor_voidMoveLeft>
						Motor_enumDirection = M_L;
 8000f42:	4b46      	ldr	r3, [pc, #280]	@ (800105c <LKS_TASK+0x200>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
						Motor_voidDirection(Motor_enumDirection);
 8000f48:	4b44      	ldr	r3, [pc, #272]	@ (800105c <LKS_TASK+0x200>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fd0d 	bl	800196c <Motor_voidDirection>
 8000f52:	e018      	b.n	8000f86 <LKS_TASK+0x12a>
					}
					/* If the car drifts to the left / Lane markings are detected on the left side */
					else if (Left_IR == WHITE && Right_IR == BLACK)
 8000f54:	4b3e      	ldr	r3, [pc, #248]	@ (8001050 <LKS_TASK+0x1f4>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d165      	bne.n	8001028 <LKS_TASK+0x1cc>
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <LKS_TASK+0x1f8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d161      	bne.n	8001028 <LKS_TASK+0x1cc>
					{
						/* Set (Lane Keeping Status) Flag */
						LKS_Flag = 1;
 8000f64:	4b3e      	ldr	r3, [pc, #248]	@ (8001060 <LKS_TASK+0x204>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
						// Steer the car to the right
						Motor_voidMoveRight(speed);
 8000f6a:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <LKS_TASK+0x1e8>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fca6 	bl	80018c0 <Motor_voidMoveRight>
						Motor_enumDirection = M_R;
 8000f74:	4b39      	ldr	r3, [pc, #228]	@ (800105c <LKS_TASK+0x200>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	701a      	strb	r2, [r3, #0]
						Motor_voidDirection(Motor_enumDirection);
 8000f7a:	4b38      	ldr	r3, [pc, #224]	@ (800105c <LKS_TASK+0x200>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fcf4 	bl	800196c <Motor_voidDirection>
					}
					else
					{ /* Nothing */
					}
				}
				break;
 8000f84:	e050      	b.n	8001028 <LKS_TASK+0x1cc>
 8000f86:	e04f      	b.n	8001028 <LKS_TASK+0x1cc>
				/*standard*/
			case LKS_STANDARD:
				if (Turn_Flag == T_OFF && speed > 20 && (!AB_Flag))
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <LKS_TASK+0x1e4>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d14d      	bne.n	800102c <LKS_TASK+0x1d0>
 8000f90:	4b2c      	ldr	r3, [pc, #176]	@ (8001044 <LKS_TASK+0x1e8>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b14      	cmp	r3, #20
 8000f96:	d949      	bls.n	800102c <LKS_TASK+0x1d0>
 8000f98:	4b2b      	ldr	r3, [pc, #172]	@ (8001048 <LKS_TASK+0x1ec>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d145      	bne.n	800102c <LKS_TASK+0x1d0>
				{

					Left_IR = IRSensor_Read(LEFT_IR);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fd0b 	bl	80009bc <IRSensor_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <LKS_TASK+0x1f4>)
 8000fac:	701a      	strb	r2, [r3, #0]
					Right_IR = IRSensor_Read(RIGHT_IR);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fd04 	bl	80009bc <IRSensor_Read>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <LKS_TASK+0x1f8>)
 8000fba:	701a      	strb	r2, [r3, #0]
					/* If the car is inside the lane / No lane markings are detected on both sides */
					if ((Left_IR == BLACK) && (Right_IR == BLACK))
 8000fbc:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <LKS_TASK+0x1f4>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10c      	bne.n	8000fde <LKS_TASK+0x182>
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <LKS_TASK+0x1f8>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d108      	bne.n	8000fde <LKS_TASK+0x182>
					{
						HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2120      	movs	r1, #32
 8000fd0:	481e      	ldr	r0, [pc, #120]	@ (800104c <LKS_TASK+0x1f0>)
 8000fd2:	f002 fbf5 	bl	80037c0 <HAL_GPIO_WritePin>

						LKS_Flag = 0;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <LKS_TASK+0x204>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e021      	b.n	8001022 <LKS_TASK+0x1c6>
					}
					/* If the car drifts to the right / Lane markings are detected on the right side */
					else if (Left_IR == BLACK && Right_IR == WHITE)
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <LKS_TASK+0x1f4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <LKS_TASK+0x1a4>
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <LKS_TASK+0x1f8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <LKS_TASK+0x1a4>
					{
						/* Set (Lane Keeping Status) Flag */
						LKS_Flag = 1;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <LKS_TASK+0x204>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]

						// Indication led
						HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4814      	ldr	r0, [pc, #80]	@ (800104c <LKS_TASK+0x1f0>)
 8000ffa:	f002 fbe1 	bl	80037c0 <HAL_GPIO_WritePin>
 8000ffe:	e010      	b.n	8001022 <LKS_TASK+0x1c6>
					}
					/* If the car drifts to the left / Lane markings are detected on the left side */
					else if (Left_IR == WHITE && Right_IR == BLACK)
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <LKS_TASK+0x1f4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d111      	bne.n	800102c <LKS_TASK+0x1d0>
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <LKS_TASK+0x1f8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10d      	bne.n	800102c <LKS_TASK+0x1d0>
					{
						/* Set (Lane Keeping Status) Flag */
						LKS_Flag = 1;
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <LKS_TASK+0x204>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]

						// Indication led
						HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2120      	movs	r1, #32
 800101a:	480c      	ldr	r0, [pc, #48]	@ (800104c <LKS_TASK+0x1f0>)
 800101c:	f002 fbd0 	bl	80037c0 <HAL_GPIO_WritePin>
					}
					else
					{ /* Nothing */
					}
				}
				break;
 8001020:	e004      	b.n	800102c <LKS_TASK+0x1d0>
 8001022:	e003      	b.n	800102c <LKS_TASK+0x1d0>

			default:
				break;
 8001024:	bf00      	nop
 8001026:	e002      	b.n	800102e <LKS_TASK+0x1d2>
				break;
 8001028:	bf00      	nop
 800102a:	e000      	b.n	800102e <LKS_TASK+0x1d2>
				break;
 800102c:	bf00      	nop
		}
		else
		{
			/*do nothing*/
		}
		osDelay(100);
 800102e:	2064      	movs	r0, #100	@ 0x64
 8001030:	f006 fcf6 	bl	8007a20 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); /*for debugging*/
 8001034:	e716      	b.n	8000e64 <LKS_TASK+0x8>
 8001036:	bf00      	nop
 8001038:	20000095 	.word	0x20000095
 800103c:	20000001 	.word	0x20000001
 8001040:	20000094 	.word	0x20000094
 8001044:	20000096 	.word	0x20000096
 8001048:	20000098 	.word	0x20000098
 800104c:	48000400 	.word	0x48000400
 8001050:	20000092 	.word	0x20000092
 8001054:	20000093 	.word	0x20000093
 8001058:	20000099 	.word	0x20000099
 800105c:	20000000 	.word	0x20000000
 8001060:	20000091 	.word	0x20000091

08001064 <ACC_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ACC_TASK */
void ACC_TASK(void *argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ACC_TASK */

	uint8_t distance = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;)
	{

		distance = Get_Distance();
 8001070:	f7ff fde4 	bl	8000c3c <Get_Distance>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
		if ((!LKS_Flag) && (ACC_Flag) && speed > 20 && (!AB_Flag))
 8001078:	4b48      	ldr	r3, [pc, #288]	@ (800119c <ACC_TASK+0x138>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	f040 8088 	bne.w	8001192 <ACC_TASK+0x12e>
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <ACC_TASK+0x13c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8083 	beq.w	8001192 <ACC_TASK+0x12e>
 800108c:	4b45      	ldr	r3, [pc, #276]	@ (80011a4 <ACC_TASK+0x140>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b14      	cmp	r3, #20
 8001092:	d97e      	bls.n	8001192 <ACC_TASK+0x12e>
 8001094:	4b44      	ldr	r3, [pc, #272]	@ (80011a8 <ACC_TASK+0x144>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d17a      	bne.n	8001192 <ACC_TASK+0x12e>
		{
			if (rxData == speed_0 || rxData == speed_1 || rxData == speed_2 || rxData == speed_3 || rxData == speed_4 || rxData == speed_5 || rxData == speed_6 || rxData == speed_7 || rxData == speed_8 || rxData == speed_9 || rxData == speed_10)
 800109c:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <ACC_TASK+0x148>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b30      	cmp	r3, #48	@ 0x30
 80010a2:	d027      	beq.n	80010f4 <ACC_TASK+0x90>
 80010a4:	4b41      	ldr	r3, [pc, #260]	@ (80011ac <ACC_TASK+0x148>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b31      	cmp	r3, #49	@ 0x31
 80010aa:	d023      	beq.n	80010f4 <ACC_TASK+0x90>
 80010ac:	4b3f      	ldr	r3, [pc, #252]	@ (80011ac <ACC_TASK+0x148>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b32      	cmp	r3, #50	@ 0x32
 80010b2:	d01f      	beq.n	80010f4 <ACC_TASK+0x90>
 80010b4:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <ACC_TASK+0x148>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b33      	cmp	r3, #51	@ 0x33
 80010ba:	d01b      	beq.n	80010f4 <ACC_TASK+0x90>
 80010bc:	4b3b      	ldr	r3, [pc, #236]	@ (80011ac <ACC_TASK+0x148>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b34      	cmp	r3, #52	@ 0x34
 80010c2:	d017      	beq.n	80010f4 <ACC_TASK+0x90>
 80010c4:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <ACC_TASK+0x148>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b35      	cmp	r3, #53	@ 0x35
 80010ca:	d013      	beq.n	80010f4 <ACC_TASK+0x90>
 80010cc:	4b37      	ldr	r3, [pc, #220]	@ (80011ac <ACC_TASK+0x148>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b36      	cmp	r3, #54	@ 0x36
 80010d2:	d00f      	beq.n	80010f4 <ACC_TASK+0x90>
 80010d4:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <ACC_TASK+0x148>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b37      	cmp	r3, #55	@ 0x37
 80010da:	d00b      	beq.n	80010f4 <ACC_TASK+0x90>
 80010dc:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <ACC_TASK+0x148>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b38      	cmp	r3, #56	@ 0x38
 80010e2:	d007      	beq.n	80010f4 <ACC_TASK+0x90>
 80010e4:	4b31      	ldr	r3, [pc, #196]	@ (80011ac <ACC_TASK+0x148>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b39      	cmp	r3, #57	@ 0x39
 80010ea:	d003      	beq.n	80010f4 <ACC_TASK+0x90>
 80010ec:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <ACC_TASK+0x148>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b71      	cmp	r3, #113	@ 0x71
 80010f2:	d103      	bne.n	80010fc <ACC_TASK+0x98>
			{
				ACC_Flag = 0;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <ACC_TASK+0x13c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e04a      	b.n	8001192 <ACC_TASK+0x12e>
			}
			else
			{
				if ((distance < DEFAULT_DISTANCE) && (distance > MIN_DISTANCE))
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b13      	cmp	r3, #19
 8001100:	d81d      	bhi.n	800113e <ACC_TASK+0xda>
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d91a      	bls.n	800113e <ACC_TASK+0xda>
				{
					/* Calculate Adaptive Speed */
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2120      	movs	r1, #32
 800110c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001110:	f002 fb56 	bl	80037c0 <HAL_GPIO_WritePin>
					speed = MAX_SPEED - 2 * (DEFAULT_DISTANCE - distance);
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3314      	adds	r3, #20
 8001118:	b2db      	uxtb	r3, r3
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <ACC_TASK+0x140>)
 8001120:	701a      	strb	r2, [r3, #0]
					Motor_voidMoveForward(speed);
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <ACC_TASK+0x140>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fb96 	bl	8001858 <Motor_voidMoveForward>
					Motor_enumDirection = M_M;
 800112c:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <ACC_TASK+0x14c>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
					Motor_voidDirection(Motor_enumDirection);
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <ACC_TASK+0x14c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fc18 	bl	800196c <Motor_voidDirection>
 800113c:	e029      	b.n	8001192 <ACC_TASK+0x12e>
				}
				else if (distance <= MIN_DISTANCE)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d80d      	bhi.n	8001160 <ACC_TASK+0xfc>
				{
					/* very low distance < 20 --> car stop */
					Motor_voidStop();
 8001144:	f000 fbe8 	bl	8001918 <Motor_voidStop>
					Motor_enumDirection = M_M;
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <ACC_TASK+0x14c>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
					Motor_voidDirection(Motor_enumDirection);
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <ACC_TASK+0x14c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fc0a 	bl	800196c <Motor_voidDirection>
					speed = 0;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <ACC_TASK+0x140>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e018      	b.n	8001192 <ACC_TASK+0x12e>
				}
				else if (distance >= DEFAULT_DISTANCE)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b13      	cmp	r3, #19
 8001164:	d915      	bls.n	8001192 <ACC_TASK+0x12e>
				{
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2120      	movs	r1, #32
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f002 fb27 	bl	80037c0 <HAL_GPIO_WritePin>
					speed = MAX_SPEED;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <ACC_TASK+0x140>)
 8001174:	2250      	movs	r2, #80	@ 0x50
 8001176:	701a      	strb	r2, [r3, #0]
					Motor_voidMoveForward(speed);
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <ACC_TASK+0x140>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fb6b 	bl	8001858 <Motor_voidMoveForward>
					Motor_enumDirection = M_M;
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <ACC_TASK+0x14c>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
					Motor_voidDirection(Motor_enumDirection);
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <ACC_TASK+0x14c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fbed 	bl	800196c <Motor_voidDirection>
			}
		}
		else
		{ /* Nothing */
		}
		osDelay(100);
 8001192:	2064      	movs	r0, #100	@ 0x64
 8001194:	f006 fc44 	bl	8007a20 <osDelay>
		distance = Get_Distance();
 8001198:	e76a      	b.n	8001070 <ACC_TASK+0xc>
 800119a:	bf00      	nop
 800119c:	20000091 	.word	0x20000091
 80011a0:	20000090 	.word	0x20000090
 80011a4:	20000096 	.word	0x20000096
 80011a8:	20000098 	.word	0x20000098
 80011ac:	20000097 	.word	0x20000097
 80011b0:	20000000 	.word	0x20000000

080011b4 <AB_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AB_TASK */
void AB_TASK(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AB_TASK */

	uint8_t distance = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */

	for (;;)
	{
		distance = Get_Distance();
 80011c0:	f7ff fd3c 	bl	8000c3c <Get_Distance>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 80011c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011cc:	4811      	ldr	r0, [pc, #68]	@ (8001214 <AB_TASK+0x60>)
 80011ce:	f002 fb0f 	bl	80037f0 <HAL_GPIO_TogglePin>
		if (distance > 10)
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2b0a      	cmp	r3, #10
 80011d6:	d909      	bls.n	80011ec <AB_TASK+0x38>
		{
			AB_Flag = 0;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <AB_TASK+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(AB_ALARM_GPIO_Port, AB_ALARM_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <AB_TASK+0x60>)
 80011e6:	f002 faeb 	bl	80037c0 <HAL_GPIO_WritePin>
 80011ea:	e7e9      	b.n	80011c0 <AB_TASK+0xc>
		}
		else
		{
			AB_Flag = 1;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <AB_TASK+0x64>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(AB_ALARM_GPIO_Port, AB_ALARM_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f8:	4806      	ldr	r0, [pc, #24]	@ (8001214 <AB_TASK+0x60>)
 80011fa:	f002 fae1 	bl	80037c0 <HAL_GPIO_WritePin>
			Motor_voidStop();
 80011fe:	f000 fb8b 	bl	8001918 <Motor_voidStop>
			Motor_enumDirection = M_M;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <AB_TASK+0x68>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
			Motor_voidDirection(Motor_enumDirection);
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <AB_TASK+0x68>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fbad 	bl	800196c <Motor_voidDirection>
		distance = Get_Distance();
 8001212:	e7d5      	b.n	80011c0 <AB_TASK+0xc>
 8001214:	48000400 	.word	0x48000400
 8001218:	20000098 	.word	0x20000098
 800121c:	20000000 	.word	0x20000000

08001220 <BLUETOOTH_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BLUETOOTH_TASK */
void BLUETOOTH_TASK(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN BLUETOOTH_TASK */
	/* Infinite loop */
	for (;;)
	{
		HAL_UART_Receive(&huart1, &rxData, 1, 50);
 8001228:	2332      	movs	r3, #50	@ 0x32
 800122a:	2201      	movs	r2, #1
 800122c:	49b9      	ldr	r1, [pc, #740]	@ (8001514 <BLUETOOTH_TASK+0x2f4>)
 800122e:	48ba      	ldr	r0, [pc, #744]	@ (8001518 <BLUETOOTH_TASK+0x2f8>)
 8001230:	f005 fe30 	bl	8006e94 <HAL_UART_Receive>
		if (!AB_Flag)
 8001234:	4bb9      	ldr	r3, [pc, #740]	@ (800151c <BLUETOOTH_TASK+0x2fc>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 8167 	bne.w	800150c <BLUETOOTH_TASK+0x2ec>
		{
			/* USER CODE END WHILE */
			switch (rxData)
 800123e:	4bb5      	ldr	r3, [pc, #724]	@ (8001514 <BLUETOOTH_TASK+0x2f4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3b30      	subs	r3, #48	@ 0x30
 8001244:	2b48      	cmp	r3, #72	@ 0x48
 8001246:	f200 8161 	bhi.w	800150c <BLUETOOTH_TASK+0x2ec>
 800124a:	a201      	add	r2, pc, #4	@ (adr r2, 8001250 <BLUETOOTH_TASK+0x30>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001473 	.word	0x08001473
 8001254:	08001481 	.word	0x08001481
 8001258:	0800148f 	.word	0x0800148f
 800125c:	0800149d 	.word	0x0800149d
 8001260:	080014ab 	.word	0x080014ab
 8001264:	080014b9 	.word	0x080014b9
 8001268:	080014c7 	.word	0x080014c7
 800126c:	080014d5 	.word	0x080014d5
 8001270:	080014e3 	.word	0x080014e3
 8001274:	080014f1 	.word	0x080014f1
 8001278:	0800150d 	.word	0x0800150d
 800127c:	0800150d 	.word	0x0800150d
 8001280:	0800150d 	.word	0x0800150d
 8001284:	0800150d 	.word	0x0800150d
 8001288:	0800150d 	.word	0x0800150d
 800128c:	0800150d 	.word	0x0800150d
 8001290:	0800150d 	.word	0x0800150d
 8001294:	0800150d 	.word	0x0800150d
 8001298:	080013c9 	.word	0x080013c9
 800129c:	0800150d 	.word	0x0800150d
 80012a0:	0800150d 	.word	0x0800150d
 80012a4:	0800150d 	.word	0x0800150d
 80012a8:	08001375 	.word	0x08001375
 80012ac:	0800150d 	.word	0x0800150d
 80012b0:	0800150d 	.word	0x0800150d
 80012b4:	0800150d 	.word	0x0800150d
 80012b8:	0800150d 	.word	0x0800150d
 80012bc:	0800150d 	.word	0x0800150d
 80012c0:	08001387 	.word	0x08001387
 80012c4:	0800150d 	.word	0x0800150d
 80012c8:	0800150d 	.word	0x0800150d
 80012cc:	0800150d 	.word	0x0800150d
 80012d0:	0800150d 	.word	0x0800150d
 80012d4:	0800150d 	.word	0x0800150d
 80012d8:	080013db 	.word	0x080013db
 80012dc:	0800150d 	.word	0x0800150d
 80012e0:	0800150d 	.word	0x0800150d
 80012e4:	08001423 	.word	0x08001423
 80012e8:	08001463 	.word	0x08001463
 80012ec:	08001453 	.word	0x08001453
 80012f0:	0800142b 	.word	0x0800142b
 80012f4:	0800150d 	.word	0x0800150d
 80012f8:	0800150d 	.word	0x0800150d
 80012fc:	0800150d 	.word	0x0800150d
 8001300:	0800150d 	.word	0x0800150d
 8001304:	0800150d 	.word	0x0800150d
 8001308:	0800150d 	.word	0x0800150d
 800130c:	0800150d 	.word	0x0800150d
 8001310:	0800150d 	.word	0x0800150d
 8001314:	0800150d 	.word	0x0800150d
 8001318:	0800150d 	.word	0x0800150d
 800131c:	0800150d 	.word	0x0800150d
 8001320:	0800150d 	.word	0x0800150d
 8001324:	0800150d 	.word	0x0800150d
 8001328:	0800150d 	.word	0x0800150d
 800132c:	0800150d 	.word	0x0800150d
 8001330:	0800150d 	.word	0x0800150d
 8001334:	0800150d 	.word	0x0800150d
 8001338:	0800150d 	.word	0x0800150d
 800133c:	0800150d 	.word	0x0800150d
 8001340:	0800150d 	.word	0x0800150d
 8001344:	0800150d 	.word	0x0800150d
 8001348:	0800150d 	.word	0x0800150d
 800134c:	0800150d 	.word	0x0800150d
 8001350:	0800150d 	.word	0x0800150d
 8001354:	080014ff 	.word	0x080014ff
 8001358:	0800150d 	.word	0x0800150d
 800135c:	0800150d 	.word	0x0800150d
 8001360:	0800150d 	.word	0x0800150d
 8001364:	0800141b 	.word	0x0800141b
 8001368:	0800146b 	.word	0x0800146b
 800136c:	0800145b 	.word	0x0800145b
 8001370:	0800143f 	.word	0x0800143f
			{
			case MOVE_FORWARD:
				Motor_voidMoveForward(speed); // motor forward  (e.g., motor control)
 8001374:	4b6a      	ldr	r3, [pc, #424]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fa6d 	bl	8001858 <Motor_voidMoveForward>
				Return_flag = 1;
 800137e:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <BLUETOOTH_TASK+0x304>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
				break;
 8001384:	e0c2      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
			case MOVE_LEFT:
				switch (Motor_enumDirection)
 8001386:	4b68      	ldr	r3, [pc, #416]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d006      	beq.n	800139c <BLUETOOTH_TASK+0x17c>
 800138e:	2b02      	cmp	r3, #2
 8001390:	dc16      	bgt.n	80013c0 <BLUETOOTH_TASK+0x1a0>
 8001392:	2b00      	cmp	r3, #0
 8001394:	d016      	beq.n	80013c4 <BLUETOOTH_TASK+0x1a4>
 8001396:	2b01      	cmp	r3, #1
 8001398:	d009      	beq.n	80013ae <BLUETOOTH_TASK+0x18e>
					Motor_voidDirection(Motor_enumDirection);
					break;
				case M_L:
					break;
				default:
					break;
 800139a:	e011      	b.n	80013c0 <BLUETOOTH_TASK+0x1a0>
					Motor_enumDirection = M_M;
 800139c:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
					Motor_voidDirection(Motor_enumDirection);
 80013a2:	4b61      	ldr	r3, [pc, #388]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fae0 	bl	800196c <Motor_voidDirection>
					break;
 80013ac:	e00b      	b.n	80013c6 <BLUETOOTH_TASK+0x1a6>
					Motor_enumDirection = M_L;
 80013ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
					Motor_voidDirection(Motor_enumDirection);
 80013b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fad7 	bl	800196c <Motor_voidDirection>
					break;
 80013be:	e002      	b.n	80013c6 <BLUETOOTH_TASK+0x1a6>
					break;
 80013c0:	bf00      	nop
 80013c2:	e0a3      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					break;
 80013c4:	bf00      	nop
				}
				// Motor_voidMoveLeft(speed); // motor move left (e.g., motor control)
				break;
 80013c6:	e0a1      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
				case MOVE_BACKWARD:
					Motor_voidMoveBackward(speed); // motor backward
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fa5d 	bl	800188c <Motor_voidMoveBackward>
					Return_flag = 0;
 80013d2:	4b54      	ldr	r3, [pc, #336]	@ (8001524 <BLUETOOTH_TASK+0x304>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
					break;
 80013d8:	e098      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
				case MOVE_RIGHT:
					switch (Motor_enumDirection)
 80013da:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d017      	beq.n	8001412 <BLUETOOTH_TASK+0x1f2>
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	dc17      	bgt.n	8001416 <BLUETOOTH_TASK+0x1f6>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00a      	beq.n	8001400 <BLUETOOTH_TASK+0x1e0>
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d113      	bne.n	8001416 <BLUETOOTH_TASK+0x1f6>
					{
					case M_R:
						break;
					case M_M:
						Motor_enumDirection = M_R;
 80013ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	701a      	strb	r2, [r3, #0]
						Motor_voidDirection(Motor_enumDirection);
 80013f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fab7 	bl	800196c <Motor_voidDirection>
						break;
 80013fe:	e00b      	b.n	8001418 <BLUETOOTH_TASK+0x1f8>
					case M_L:
						Motor_enumDirection = M_L;
 8001400:	4b49      	ldr	r3, [pc, #292]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
						Motor_voidDirection(Motor_enumDirection);
 8001406:	4b48      	ldr	r3, [pc, #288]	@ (8001528 <BLUETOOTH_TASK+0x308>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 faae 	bl	800196c <Motor_voidDirection>
						break;
 8001410:	e002      	b.n	8001418 <BLUETOOTH_TASK+0x1f8>
						break;
 8001412:	bf00      	nop
 8001414:	e07a      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					default:
						break;
 8001416:	bf00      	nop
					}
					// Motor_voidMoveRight(speed); // motor move right
					break;
 8001418:	e078      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case LANE_KEEP_ASSIST_STANDARD:
						LKS_mode = LKS_STANDARD;
 800141a:	4b44      	ldr	r3, [pc, #272]	@ (800152c <BLUETOOTH_TASK+0x30c>)
 800141c:	2202      	movs	r2, #2
 800141e:	701a      	strb	r2, [r3, #0]

						break;
 8001420:	e074      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case LANE_KEEP_ASSIST_ADAPTIVE:
						LKS_mode = LKS_ADAPTIVE;
 8001422:	4b42      	ldr	r3, [pc, #264]	@ (800152c <BLUETOOTH_TASK+0x30c>)
 8001424:	2203      	movs	r2, #3
 8001426:	701a      	strb	r2, [r3, #0]
						break;
 8001428:	e070      	b.n	800150c <BLUETOOTH_TASK+0x2ec>

					case LK_ON:
						LKS_State = LKS_ON; HAL_GPIO_WritePin(LED_LEFT_GPIO_Port,LED_LEFT_Pin,GPIO_PIN_SET);
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <BLUETOOTH_TASK+0x310>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001436:	483f      	ldr	r0, [pc, #252]	@ (8001534 <BLUETOOTH_TASK+0x314>)
 8001438:	f002 f9c2 	bl	80037c0 <HAL_GPIO_WritePin>
						break;
 800143c:	e066      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case LK_OFF:
						LKS_State = LKS_OFF; HAL_GPIO_WritePin(LED_LEFT_GPIO_Port,LED_LEFT_Pin,GPIO_PIN_RESET);
 800143e:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <BLUETOOTH_TASK+0x310>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800144a:	483a      	ldr	r0, [pc, #232]	@ (8001534 <BLUETOOTH_TASK+0x314>)
 800144c:	f002 f9b8 	bl	80037c0 <HAL_GPIO_WritePin>
						break;
 8001450:	e05c      	b.n	800150c <BLUETOOTH_TASK+0x2ec>

					case CRUISE_CONTROL_ON:
						ACC_Flag = 1;
 8001452:	4b39      	ldr	r3, [pc, #228]	@ (8001538 <BLUETOOTH_TASK+0x318>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]

						break;
 8001458:	e058      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case CRUISE_CONTROL_OFF:
						ACC_Flag = 0;
 800145a:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <BLUETOOTH_TASK+0x318>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]

						break;
 8001460:	e054      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case SIGNAL_ON:
						Turn_Flag = T_ON;
 8001462:	4b36      	ldr	r3, [pc, #216]	@ (800153c <BLUETOOTH_TASK+0x31c>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
						break;
 8001468:	e050      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case SIGNAL_OFF:
						Turn_Flag = T_OFF;
 800146a:	4b34      	ldr	r3, [pc, #208]	@ (800153c <BLUETOOTH_TASK+0x31c>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
						break;
 8001470:	e04c      	b.n	800150c <BLUETOOTH_TASK+0x2ec>

					case speed_0: //
						speed = 0;
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f000 f9dd 	bl	8001838 <Motor_voidControlSpeed>
						break;
 800147e:	e045      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_1:
						speed = 10;
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 8001482:	220a      	movs	r2, #10
 8001484:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(10);
 8001486:	200a      	movs	r0, #10
 8001488:	f000 f9d6 	bl	8001838 <Motor_voidControlSpeed>
						break;
 800148c:	e03e      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_2: // Assuming 120 is the code for standard mode
						speed = 20;
 800148e:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 8001490:	2214      	movs	r2, #20
 8001492:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(20);
 8001494:	2014      	movs	r0, #20
 8001496:	f000 f9cf 	bl	8001838 <Motor_voidControlSpeed>
						break;
 800149a:	e037      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_3:
						speed = 30;
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 800149e:	221e      	movs	r2, #30
 80014a0:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(30);
 80014a2:	201e      	movs	r0, #30
 80014a4:	f000 f9c8 	bl	8001838 <Motor_voidControlSpeed>
						break;
 80014a8:	e030      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_4:
						speed = 40;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 80014ac:	2228      	movs	r2, #40	@ 0x28
 80014ae:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(40);
 80014b0:	2028      	movs	r0, #40	@ 0x28
 80014b2:	f000 f9c1 	bl	8001838 <Motor_voidControlSpeed>
						break;
 80014b6:	e029      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_5:
						speed = 50;
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 80014ba:	2232      	movs	r2, #50	@ 0x32
 80014bc:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(50);
 80014be:	2032      	movs	r0, #50	@ 0x32
 80014c0:	f000 f9ba 	bl	8001838 <Motor_voidControlSpeed>
						break;
 80014c4:	e022      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_6:
						speed = 60;
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 80014c8:	223c      	movs	r2, #60	@ 0x3c
 80014ca:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(60);
 80014cc:	203c      	movs	r0, #60	@ 0x3c
 80014ce:	f000 f9b3 	bl	8001838 <Motor_voidControlSpeed>
						break;
 80014d2:	e01b      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_7:
						speed = 70;
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 80014d6:	2246      	movs	r2, #70	@ 0x46
 80014d8:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(70);
 80014da:	2046      	movs	r0, #70	@ 0x46
 80014dc:	f000 f9ac 	bl	8001838 <Motor_voidControlSpeed>
						break;
 80014e0:	e014      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_8:
						speed = 80;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 80014e4:	2250      	movs	r2, #80	@ 0x50
 80014e6:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(80);
 80014e8:	2050      	movs	r0, #80	@ 0x50
 80014ea:	f000 f9a5 	bl	8001838 <Motor_voidControlSpeed>
						break;
 80014ee:	e00d      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_9:
						speed = 90;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 80014f2:	225a      	movs	r2, #90	@ 0x5a
 80014f4:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(90);
 80014f6:	205a      	movs	r0, #90	@ 0x5a
 80014f8:	f000 f99e 	bl	8001838 <Motor_voidControlSpeed>
						break;
 80014fc:	e006      	b.n	800150c <BLUETOOTH_TASK+0x2ec>
					case speed_10:
						speed = 100;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <BLUETOOTH_TASK+0x300>)
 8001500:	2264      	movs	r2, #100	@ 0x64
 8001502:	701a      	strb	r2, [r3, #0]
						Motor_voidControlSpeed(100);
 8001504:	2064      	movs	r0, #100	@ 0x64
 8001506:	f000 f997 	bl	8001838 <Motor_voidControlSpeed>
						break;
 800150a:	bf00      	nop
						// Handle unexpected data (optional)
						// You might want to print an error message or take some action here.
						//break;
			}
		}
		osDelay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f006 fa87 	bl	8007a20 <osDelay>
		HAL_UART_Receive(&huart1, &rxData, 1, 50);
 8001512:	e689      	b.n	8001228 <BLUETOOTH_TASK+0x8>
 8001514:	20000097 	.word	0x20000097
 8001518:	20000198 	.word	0x20000198
 800151c:	20000098 	.word	0x20000098
 8001520:	20000096 	.word	0x20000096
 8001524:	20000099 	.word	0x20000099
 8001528:	20000000 	.word	0x20000000
 800152c:	20000001 	.word	0x20000001
 8001530:	20000095 	.word	0x20000095
 8001534:	48000400 	.word	0x48000400
 8001538:	20000090 	.word	0x20000090
 800153c:	20000094 	.word	0x20000094

08001540 <ALC_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ALC_TASK */
void ALC_TASK(void *argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ALC_TASK */
	uint8_t LDR_Value = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;)
	{
		LDR_Value = LDR_u8GetValue();
 800154c:	f7ff fa5a 	bl	8000a04 <LDR_u8GetValue>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
		if (LDR_Value >= 93)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b5c      	cmp	r3, #92	@ 0x5c
 8001558:	d903      	bls.n	8001562 <ALC_TASK+0x22>
		{
			/* front Lead with Max lighting */
			TIM3->CCR3 = 98;
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <ALC_TASK+0x60>)
 800155c:	2262      	movs	r2, #98	@ 0x62
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001560:	e018      	b.n	8001594 <ALC_TASK+0x54>
		}
		else if (LDR_Value < 93 || LDR_Value >= 80)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b5c      	cmp	r3, #92	@ 0x5c
 8001566:	d902      	bls.n	800156e <ALC_TASK+0x2e>
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b4f      	cmp	r3, #79	@ 0x4f
 800156c:	d903      	bls.n	8001576 <ALC_TASK+0x36>
		{
			/* front Led with adaptive lighting*/
			TIM3->CCR3 = LDR_Value;
 800156e:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <ALC_TASK+0x60>)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001574:	e00e      	b.n	8001594 <ALC_TASK+0x54>
		}
		else if (LDR_Value < 80 || LDR_Value > 10)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b4f      	cmp	r3, #79	@ 0x4f
 800157a:	d902      	bls.n	8001582 <ALC_TASK+0x42>
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d905      	bls.n	800158e <ALC_TASK+0x4e>
		{
			/* front Led with Low lighting */
			TIM3->CCR3 = (LDR_Value) / 2;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <ALC_TASK+0x60>)
 800158a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800158c:	e002      	b.n	8001594 <ALC_TASK+0x54>
		}
		else
		{
			/* front Led Off*/
			TIM3->CCR3 = 0;
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <ALC_TASK+0x60>)
 8001590:	2200      	movs	r2, #0
 8001592:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		osDelay(500);
 8001594:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001598:	f006 fa42 	bl	8007a20 <osDelay>
		LDR_Value = LDR_u8GetValue();
 800159c:	e7d6      	b.n	800154c <ALC_TASK+0xc>
 800159e:	bf00      	nop
 80015a0:	40000400 	.word	0x40000400

080015a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4b3c      	ldr	r3, [pc, #240]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a3b      	ldr	r2, [pc, #236]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015c4:	6153      	str	r3, [r2, #20]
 80015c6:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d2:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	4a35      	ldr	r2, [pc, #212]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015dc:	6153      	str	r3, [r2, #20]
 80015de:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b30      	ldr	r3, [pc, #192]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a2f      	ldr	r2, [pc, #188]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <MX_GPIO_Init+0x108>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <MX_GPIO_Init+0x108>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a29      	ldr	r2, [pc, #164]	@ (80016ac <MX_GPIO_Init+0x108>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <MX_GPIO_Init+0x108>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2120      	movs	r1, #32
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001622:	f002 f8cd 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|AB_ALARM_Pin
 8001626:	2200      	movs	r2, #0
 8001628:	f24e 41f8 	movw	r1, #58616	@ 0xe4f8
 800162c:	4820      	ldr	r0, [pc, #128]	@ (80016b0 <MX_GPIO_Init+0x10c>)
 800162e:	f002 f8c7 	bl	80037c0 <HAL_GPIO_WritePin>
                          |MOTOR1_D1_Pin|MOTOR1_D2_Pin|LKS_ALARM_Pin|MOTOR2_D1_Pin
                          |MOTOR2_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001638:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	481a      	ldr	r0, [pc, #104]	@ (80016b4 <MX_GPIO_Init+0x110>)
 800164a:	f001 ff17 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800164e:	2320      	movs	r3, #32
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f001 ff08 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = TRIG_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|AB_ALARM_Pin
 800166c:	f24e 43f8 	movw	r3, #58616	@ 0xe4f8
 8001670:	617b      	str	r3, [r7, #20]
                          |MOTOR1_D1_Pin|MOTOR1_D2_Pin|LKS_ALARM_Pin|MOTOR2_D1_Pin
                          |MOTOR2_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	@ (80016b0 <MX_GPIO_Init+0x10c>)
 8001686:	f001 fef9 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_RIGHT_Pin;
 800168a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MX_GPIO_Init+0x10c>)
 80016a0:	f001 feec 	bl	800347c <HAL_GPIO_Init>

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000400 	.word	0x48000400
 80016b4:	48000800 	.word	0x48000800

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016bc:	f000 fd00 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f824 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c4:	f7ff ff6e 	bl	80015a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80016c8:	f000 fa4a 	bl	8001b60 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016cc:	f000 fad4 	bl	8001c78 <MX_TIM4_Init>
  MX_ADC1_Init();
 80016d0:	f7ff fac2 	bl	8000c58 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016d4:	f000 fbf6 	bl	8001ec4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016d8:	f000 fc24 	bl	8001f24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Motor_voidInit();
 80016dc:	f000 f896 	bl	800180c <Motor_voidInit>
	HCSR04_Init();
 80016e0:	f7ff fa82 	bl	8000be8 <HCSR04_Init>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80016e4:	2108      	movs	r1, #8
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <main+0x4c>)
 80016e8:	f003 fea0 	bl	800542c <HAL_TIM_PWM_Start>
	  HAL_ADC_MspInit(&hadc1);
 80016ec:	4806      	ldr	r0, [pc, #24]	@ (8001708 <main+0x50>)
 80016ee:	f7ff fb23 	bl	8000d38 <HAL_ADC_MspInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016f2:	f006 f883 	bl	80077fc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80016f6:	f7ff fb5b 	bl	8000db0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016fa:	f006 f8b3 	bl	8007864 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80016fe:	bf00      	nop
 8001700:	e7fd      	b.n	80016fe <main+0x46>
 8001702:	bf00      	nop
 8001704:	20000100 	.word	0x20000100
 8001708:	20000040 	.word	0x20000040

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0a6      	sub	sp, #152	@ 0x98
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001716:	2228      	movs	r2, #40	@ 0x28
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f008 ff86 	bl	800a62c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2258      	movs	r2, #88	@ 0x58
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f008 ff78 	bl	800a62c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800173c:	2302      	movs	r3, #2
 800173e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001744:	2310      	movs	r3, #16
 8001746:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001754:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001758:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800175c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800176a:	4618      	mov	r0, r3
 800176c:	f002 f85a 	bl	8003824 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001776:	f000 f843 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800178a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f003 f898 	bl	80048cc <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017a2:	f000 f82d 	bl	8001800 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <SystemClock_Config+0xcc>)
 80017a8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80017b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 faec 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ca:	f000 f819 	bl	8001800 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3798      	adds	r7, #152	@ 0x98
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	00200083 	.word	0x00200083

080017dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ee:	f000 fc7d 	bl	80020ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012c00 	.word	0x40012c00

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <Error_Handler+0x8>

0800180c <Motor_voidInit>:
  * @brief  Initializes motor's pins.
  * @param  None
  * @retval None
  */
void Motor_voidInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	/* Generate PWM for the four motors*/
	TIM3->CCR1 = 0;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <Motor_voidInit+0x24>)
 8001812:	2200      	movs	r2, #0
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 100;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <Motor_voidInit+0x24>)
 8001818:	2264      	movs	r2, #100	@ 0x64
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1); /* Give same PWM signal to motor1  */
 800181c:	2100      	movs	r1, #0
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <Motor_voidInit+0x28>)
 8001820:	f003 fe04 	bl	800542c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);  /* Give same PWM signal to motor2  */
 8001824:	2104      	movs	r1, #4
 8001826:	4803      	ldr	r0, [pc, #12]	@ (8001834 <Motor_voidInit+0x28>)
 8001828:	f003 fe00 	bl	800542c <HAL_TIM_PWM_Start>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40000400 	.word	0x40000400
 8001834:	20000100 	.word	0x20000100

08001838 <Motor_voidControlSpeed>:
  * @brief  Give Duty cycle to the motor to can move it by the speed which you need  .
  * @param  DutyCycle value of Duty cycle (0-->100) for PWM signal
  * @retval None
  */
void Motor_voidControlSpeed(uint16_t DutyCycle)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = DutyCycle;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <Motor_voidControlSpeed+0x1c>)
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40000400 	.word	0x40000400

08001858 <Motor_voidMoveForward>:
  * @brief  Move motor forward.
  * @param  None
  * @retval None
  */
void Motor_voidMoveForward(uint16_t DutyCycle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	/* STOP the Front motor  */
	// HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
	// HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
	/* Turn on The back motor  */
	HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	2140      	movs	r1, #64	@ 0x40
 8001866:	4808      	ldr	r0, [pc, #32]	@ (8001888 <Motor_voidMoveForward+0x30>)
 8001868:	f001 ffaa 	bl	80037c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2180      	movs	r1, #128	@ 0x80
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <Motor_voidMoveForward+0x30>)
 8001872:	f001 ffa5 	bl	80037c0 <HAL_GPIO_WritePin>
	Motor_voidControlSpeed(DutyCycle);
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ffdd 	bl	8001838 <Motor_voidControlSpeed>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	48000400 	.word	0x48000400

0800188c <Motor_voidMoveBackward>:
  * @brief Move motor backward.
  * @param  None
  * @retval None
  */
void Motor_voidMoveBackward(uint16_t DutyCycle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
		/* STOP the Front motor  */
		// HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
		// HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
		/* Turn on The back motor  */
		HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2140      	movs	r1, #64	@ 0x40
 800189a:	4808      	ldr	r0, [pc, #32]	@ (80018bc <Motor_voidMoveBackward+0x30>)
 800189c:	f001 ff90 	bl	80037c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2180      	movs	r1, #128	@ 0x80
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <Motor_voidMoveBackward+0x30>)
 80018a6:	f001 ff8b 	bl	80037c0 <HAL_GPIO_WritePin>
		Motor_voidControlSpeed(DutyCycle);
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ffc3 	bl	8001838 <Motor_voidControlSpeed>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	48000400 	.word	0x48000400

080018c0 <Motor_voidMoveRight>:
  * @brief Move motor Right.
  * @param  None
  * @retval None
  */
void Motor_voidMoveRight(uint16_t DutyCycle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2108      	movs	r1, #8
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <Motor_voidMoveRight+0x28>)
 80018d0:	f001 ff76 	bl	80037c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2110      	movs	r1, #16
 80018d8:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <Motor_voidMoveRight+0x28>)
 80018da:	f001 ff71 	bl	80037c0 <HAL_GPIO_WritePin>
	/* Turn on The back motor  */
	//HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_RESET);
	//Motor_voidControlSpeed(DutyCycle);
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	48000400 	.word	0x48000400

080018ec <Motor_voidMoveLeft>:
  * @brief Move motor Left.
  * @param  None
  * @retval None
  */
void Motor_voidMoveLeft(uint16_t DutyCycle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2108      	movs	r1, #8
 80018fa:	4806      	ldr	r0, [pc, #24]	@ (8001914 <Motor_voidMoveLeft+0x28>)
 80018fc:	f001 ff60 	bl	80037c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2110      	movs	r1, #16
 8001904:	4803      	ldr	r0, [pc, #12]	@ (8001914 <Motor_voidMoveLeft+0x28>)
 8001906:	f001 ff5b 	bl	80037c0 <HAL_GPIO_WritePin>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	48000400 	.word	0x48000400

08001918 <Motor_voidStop>:
  * @brief Stop motor.
  * @param  None
  * @retval None
  */
void Motor_voidStop(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2108      	movs	r1, #8
 8001920:	4809      	ldr	r0, [pc, #36]	@ (8001948 <Motor_voidStop+0x30>)
 8001922:	f001 ff4d 	bl	80037c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2110      	movs	r1, #16
 800192a:	4807      	ldr	r0, [pc, #28]	@ (8001948 <Motor_voidStop+0x30>)
 800192c:	f001 ff48 	bl	80037c0 <HAL_GPIO_WritePin>
	/* Turn on The back motor  */
	HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2140      	movs	r1, #64	@ 0x40
 8001934:	4804      	ldr	r0, [pc, #16]	@ (8001948 <Motor_voidStop+0x30>)
 8001936:	f001 ff43 	bl	80037c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	@ 0x80
 800193e:	4802      	ldr	r0, [pc, #8]	@ (8001948 <Motor_voidStop+0x30>)
 8001940:	f001 ff3e 	bl	80037c0 <HAL_GPIO_WritePin>

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	48000400 	.word	0x48000400

0800194c <Motor_voidMoveMiddle>:

void Motor_voidMoveMiddle (void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	2108      	movs	r1, #8
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <Motor_voidMoveMiddle+0x1c>)
 8001956:	f001 ff33 	bl	80037c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2110      	movs	r1, #16
 800195e:	4802      	ldr	r0, [pc, #8]	@ (8001968 <Motor_voidMoveMiddle+0x1c>)
 8001960:	f001 ff2e 	bl	80037c0 <HAL_GPIO_WritePin>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	48000400 	.word	0x48000400

0800196c <Motor_voidDirection>:

/* Functions Implementation END */
void Motor_voidDirection(uint8_t M_direction)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
	switch (M_direction)
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d00a      	beq.n	8001992 <Motor_voidDirection+0x26>
 800197c:	2b02      	cmp	r3, #2
 800197e:	dc0f      	bgt.n	80019a0 <Motor_voidDirection+0x34>
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <Motor_voidDirection+0x1e>
 8001984:	2b01      	cmp	r3, #1
 8001986:	d008      	beq.n	800199a <Motor_voidDirection+0x2e>
	{
	case M_L:	Motor_voidMoveLeft(0);	break;
	case M_R:	Motor_voidMoveRight(0);	break;
	case M_M:	Motor_voidMoveMiddle();	break;
	default:							break;
 8001988:	e00a      	b.n	80019a0 <Motor_voidDirection+0x34>
	case M_L:	Motor_voidMoveLeft(0);	break;
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff ffae 	bl	80018ec <Motor_voidMoveLeft>
 8001990:	e007      	b.n	80019a2 <Motor_voidDirection+0x36>
	case M_R:	Motor_voidMoveRight(0);	break;
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff ff94 	bl	80018c0 <Motor_voidMoveRight>
 8001998:	e003      	b.n	80019a2 <Motor_voidDirection+0x36>
	case M_M:	Motor_voidMoveMiddle();	break;
 800199a:	f7ff ffd7 	bl	800194c <Motor_voidMoveMiddle>
 800199e:	e000      	b.n	80019a2 <Motor_voidDirection+0x36>
	default:							break;
 80019a0:	bf00      	nop
	}
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a10      	ldr	r2, [pc, #64]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	210f      	movs	r1, #15
 80019e6:	f06f 0001 	mvn.w	r0, #1
 80019ea:	f001 fd1d 	bl	8003428 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_InitTick+0xcc>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <HAL_InitTick+0xcc>)
 8001a12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_InitTick+0xcc>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f982 	bl	8004d38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a34:	f003 f95e 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 8001a38:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3c:	4a23      	ldr	r2, [pc, #140]	@ (8001acc <HAL_InitTick+0xd0>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0c9b      	lsrs	r3, r3, #18
 8001a44:	3b01      	subs	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a48:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <HAL_InitTick+0xd8>)
 8001a4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a56:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a6e:	4818      	ldr	r0, [pc, #96]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a70:	f003 fbb2 	bl	80051d8 <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d11b      	bne.n	8001aba <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a82:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <HAL_InitTick+0xd4>)
 8001a84:	f003 fc00 	bl	8005288 <HAL_TIM_Base_Start_IT>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d111      	bne.n	8001aba <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a96:	2019      	movs	r0, #25
 8001a98:	f001 fce2 	bl	8003460 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	d808      	bhi.n	8001ab4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	2019      	movs	r0, #25
 8001aa8:	f001 fcbe 	bl	8003428 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_InitTick+0xdc>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e002      	b.n	8001aba <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3730      	adds	r7, #48	@ 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	431bde83 	.word	0x431bde83
 8001ad0:	200000b4 	.word	0x200000b4
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	20000008 	.word	0x20000008

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <MemManage_Handler+0x4>

08001af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b1a:	f003 ff3f 	bl	800599c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200000b4 	.word	0x200000b4

08001b28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <TIM4_IRQHandler+0x10>)
 8001b2e:	f003 ff35 	bl	800599c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000014c 	.word	0x2000014c

08001b3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08e      	sub	sp, #56	@ 0x38
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b92:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001b94:	4a37      	ldr	r2, [pc, #220]	@ (8001c74 <MX_TIM3_Init+0x114>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001b98:	4b35      	ldr	r3, [pc, #212]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001b9a:	2247      	movs	r2, #71	@ 0x47
 8001b9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001ba6:	2263      	movs	r2, #99	@ 0x63
 8001ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb6:	482e      	ldr	r0, [pc, #184]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001bb8:	f003 fb0e 	bl	80051d8 <HAL_TIM_Base_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bc2:	f7ff fe1d 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4827      	ldr	r0, [pc, #156]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001bd4:	f004 f9b2 	bl	8005f3c <HAL_TIM_ConfigClockSource>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001bde:	f7ff fe0f 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001be2:	4823      	ldr	r0, [pc, #140]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001be4:	f003 fbc0 	bl	8005368 <HAL_TIM_PWM_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001bee:	f7ff fe07 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	481b      	ldr	r0, [pc, #108]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001c02:	f005 f84f 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c0c:	f7ff fdf8 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c10:	2360      	movs	r3, #96	@ 0x60
 8001c12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	4619      	mov	r1, r3
 8001c26:	4812      	ldr	r0, [pc, #72]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001c28:	f004 f874 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c32:	f7ff fde5 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c36:	463b      	mov	r3, r7
 8001c38:	2204      	movs	r2, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001c3e:	f004 f869 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001c48:	f7ff fdda 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001c54:	f004 f85e 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001c5e:	f7ff fdcf 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c62:	4803      	ldr	r0, [pc, #12]	@ (8001c70 <MX_TIM3_Init+0x110>)
 8001c64:	f000 f8da 	bl	8001e1c <HAL_TIM_MspPostInit>

}
 8001c68:	bf00      	nop
 8001c6a:	3738      	adds	r7, #56	@ 0x38
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000100 	.word	0x20000100
 8001c74:	40000400 	.word	0x40000400

08001c78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	@ 0x30
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0320 	add.w	r3, r7, #32
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d58 <MX_TIM4_Init+0xe0>)
 8001ca8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001cac:	2247      	movs	r2, #71	@ 0x47
 8001cae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cca:	4822      	ldr	r0, [pc, #136]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001ccc:	f003 fa84 	bl	80051d8 <HAL_TIM_Base_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001cd6:	f7ff fd93 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cde:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481b      	ldr	r0, [pc, #108]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001ce8:	f004 f928 	bl	8005f3c <HAL_TIM_ConfigClockSource>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001cf2:	f7ff fd85 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001cf6:	4817      	ldr	r0, [pc, #92]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001cf8:	f003 fca4 	bl	8005644 <HAL_TIM_IC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001d02:	f7ff fd7d 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	480f      	ldr	r0, [pc, #60]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001d16:	f004 ffc5 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001d20:	f7ff fd6e 	bl	8001800 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2208      	movs	r2, #8
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <MX_TIM4_Init+0xdc>)
 8001d3c:	f003 ff4d 	bl	8005bda <HAL_TIM_IC_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001d46:	f7ff fd5b 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3730      	adds	r7, #48	@ 0x30
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000014c 	.word	0x2000014c
 8001d58:	40000800 	.word	0x40000800

08001d5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	@ 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a24      	ldr	r2, [pc, #144]	@ (8001e0c <HAL_TIM_Base_MspInit+0xb0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10c      	bne.n	8001d98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7e:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a23      	ldr	r2, [pc, #140]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	61d3      	str	r3, [r2, #28]
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d96:	e035      	b.n	8001e04 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM4)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e14 <HAL_TIM_Base_MspInit+0xb8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d130      	bne.n	8001e04 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_TIM_Base_MspInit+0xb4>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001de4:	2302      	movs	r3, #2
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	480a      	ldr	r0, [pc, #40]	@ (8001e18 <HAL_TIM_Base_MspInit+0xbc>)
 8001df0:	f001 fb44 	bl	800347c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2105      	movs	r1, #5
 8001df8:	201e      	movs	r0, #30
 8001dfa:	f001 fb15 	bl	8003428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dfe:	201e      	movs	r0, #30
 8001e00:	f001 fb2e 	bl	8003460 <HAL_NVIC_EnableIRQ>
}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	@ 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40000800 	.word	0x40000800
 8001e18:	48000400 	.word	0x48000400

08001e1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_TIM_MspPostInit+0x9c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d138      	bne.n	8001eb0 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <HAL_TIM_MspPostInit+0xa0>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_TIM_MspPostInit+0xa0>)
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e48:	6153      	str	r3, [r2, #20]
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <HAL_TIM_MspPostInit+0xa0>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_TIM_MspPostInit+0xa0>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <HAL_TIM_MspPostInit+0xa0>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e60:	6153      	str	r3, [r2, #20]
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_TIM_MspPostInit+0xa0>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_1_Pin;
 8001e6e:	2350      	movs	r3, #80	@ 0x50
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8c:	f001 faf6 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <HAL_TIM_MspPostInit+0xa4>)
 8001eac:	f001 fae6 	bl	800347c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	48000400 	.word	0x48000400

08001ec4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001eca:	4a15      	ldr	r2, [pc, #84]	@ (8001f20 <MX_USART1_UART_Init+0x5c>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001ed0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_USART1_UART_Init+0x58>)
 8001f08:	f004 ff76 	bl	8006df8 <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f12:	f7ff fc75 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000198 	.word	0x20000198
 8001f20:	40013800 	.word	0x40013800

08001f24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f2a:	4a15      	ldr	r2, [pc, #84]	@ (8001f80 <MX_USART2_UART_Init+0x5c>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_USART2_UART_Init+0x58>)
 8001f68:	f004 ff46 	bl	8006df8 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f72:	f7ff fc45 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000220 	.word	0x20000220
 8001f80:	40004400 	.word	0x40004400

08001f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	@ 0x30
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <HAL_UART_MspInit+0xd8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d128      	bne.n	8001ff8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb0:	6193      	str	r3, [r2, #24]
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b28      	ldr	r3, [pc, #160]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a27      	ldr	r2, [pc, #156]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8001fc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fd6:	2330      	movs	r3, #48	@ 0x30
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481c      	ldr	r0, [pc, #112]	@ (8002064 <HAL_UART_MspInit+0xe0>)
 8001ff2:	f001 fa43 	bl	800347c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ff6:	e02d      	b.n	8002054 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8002068 <HAL_UART_MspInit+0xe4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d128      	bne.n	8002054 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	4a10      	ldr	r2, [pc, #64]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	6153      	str	r3, [r2, #20]
 8002026:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <HAL_UART_MspInit+0xdc>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002032:	230c      	movs	r3, #12
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002042:	2307      	movs	r3, #7
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002050:	f001 fa14 	bl	800347c <HAL_GPIO_Init>
}
 8002054:	bf00      	nop
 8002056:	3730      	adds	r7, #48	@ 0x30
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40013800 	.word	0x40013800
 8002060:	40021000 	.word	0x40021000
 8002064:	48000800 	.word	0x48000800
 8002068:	40004400 	.word	0x40004400

0800206c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800206c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002070:	f7ff fd64 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002074:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002076:	490d      	ldr	r1, [pc, #52]	@ (80020ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002078:	4a0d      	ldr	r2, [pc, #52]	@ (80020b0 <LoopForever+0xe>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800208c:	4c0a      	ldr	r4, [pc, #40]	@ (80020b8 <LoopForever+0x16>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209a:	f008 facf 	bl	800a63c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800209e:	f7ff fb0b 	bl	80016b8 <main>

080020a2 <LoopForever>:

LoopForever:
    b LoopForever
 80020a2:	e7fe      	b.n	80020a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80020b0:	0800a80c 	.word	0x0800a80c
  ldr r2, =_sbss
 80020b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80020b8:	20001da0 	.word	0x20001da0

080020bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC1_2_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <HAL_Init+0x28>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <HAL_Init+0x28>)
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f001 f99e 	bl	8003412 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f7ff fc90 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fc66 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000

080020ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_IncTick+0x20>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x24>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <HAL_IncTick+0x24>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	2000000c 	.word	0x2000000c
 8002110:	200002a8 	.word	0x200002a8

08002114 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;  
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <HAL_GetTick+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200002a8 	.word	0x200002a8

0800212c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b09a      	sub	sp, #104	@ 0x68
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e1e3      	b.n	8002514 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d176      	bne.n	800224c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d152      	bne.n	800220c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe fdd9 	bl	8000d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d13b      	bne.n	800220c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f001 f829 	bl	80031ec <ADC_Disable>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d12f      	bne.n	800220c <HAL_ADC_Init+0xe0>
 80021ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d12b      	bne.n	800220c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021bc:	f023 0302 	bic.w	r3, r3, #2
 80021c0:	f043 0202 	orr.w	r2, r3, #2
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021d6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021e8:	4b92      	ldr	r3, [pc, #584]	@ (8002434 <HAL_ADC_Init+0x308>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a92      	ldr	r2, [pc, #584]	@ (8002438 <HAL_ADC_Init+0x30c>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9a      	lsrs	r2, r3, #18
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021fe:	e002      	b.n	8002206 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002228:	d110      	bne.n	800224c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f023 0312 	bic.w	r3, r3, #18
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 8150 	bne.w	80024fa <HAL_ADC_Init+0x3ce>
 800225a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 814b 	bne.w	80024fa <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8143 	bne.w	80024fa <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800227c:	f043 0202 	orr.w	r2, r3, #2
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800228c:	d004      	beq.n	8002298 <HAL_ADC_Init+0x16c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6a      	ldr	r2, [pc, #424]	@ (800243c <HAL_ADC_Init+0x310>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_ADC_Init+0x170>
 8002298:	4b69      	ldr	r3, [pc, #420]	@ (8002440 <HAL_ADC_Init+0x314>)
 800229a:	e000      	b.n	800229e <HAL_ADC_Init+0x172>
 800229c:	4b69      	ldr	r3, [pc, #420]	@ (8002444 <HAL_ADC_Init+0x318>)
 800229e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a8:	d102      	bne.n	80022b0 <HAL_ADC_Init+0x184>
 80022aa:	4b64      	ldr	r3, [pc, #400]	@ (800243c <HAL_ADC_Init+0x310>)
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e01a      	b.n	80022e6 <HAL_ADC_Init+0x1ba>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a61      	ldr	r2, [pc, #388]	@ (800243c <HAL_ADC_Init+0x310>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d103      	bne.n	80022c2 <HAL_ADC_Init+0x196>
 80022ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	e011      	b.n	80022e6 <HAL_ADC_Init+0x1ba>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a60      	ldr	r2, [pc, #384]	@ (8002448 <HAL_ADC_Init+0x31c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d102      	bne.n	80022d2 <HAL_ADC_Init+0x1a6>
 80022cc:	4b5f      	ldr	r3, [pc, #380]	@ (800244c <HAL_ADC_Init+0x320>)
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e009      	b.n	80022e6 <HAL_ADC_Init+0x1ba>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a5d      	ldr	r2, [pc, #372]	@ (800244c <HAL_ADC_Init+0x320>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d102      	bne.n	80022e2 <HAL_ADC_Init+0x1b6>
 80022dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002448 <HAL_ADC_Init+0x31c>)
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e001      	b.n	80022e6 <HAL_ADC_Init+0x1ba>
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d108      	bne.n	8002306 <HAL_ADC_Init+0x1da>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Init+0x1da>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_ADC_Init+0x1dc>
 8002306:	2300      	movs	r3, #0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11c      	bne.n	8002346 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800230c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_ADC_Init+0x202>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x202>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_ADC_Init+0x204>
 800232e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002330:	2b00      	cmp	r3, #0
 8002332:	d108      	bne.n	8002346 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	431a      	orrs	r2, r3
 8002342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002344:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7e5b      	ldrb	r3, [r3, #25]
 800234a:	035b      	lsls	r3, r3, #13
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002350:	2a01      	cmp	r2, #1
 8002352:	d002      	beq.n	800235a <HAL_ADC_Init+0x22e>
 8002354:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002358:	e000      	b.n	800235c <HAL_ADC_Init+0x230>
 800235a:	2200      	movs	r2, #0
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4313      	orrs	r3, r2
 800236a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800236c:	4313      	orrs	r3, r2
 800236e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d11b      	bne.n	80023b2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7e5b      	ldrb	r3, [r3, #25]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	3b01      	subs	r3, #1
 8002388:	045a      	lsls	r2, r3, #17
 800238a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800238c:	4313      	orrs	r3, r2
 800238e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002392:	663b      	str	r3, [r7, #96]	@ 0x60
 8002394:	e00d      	b.n	80023b2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800239e:	f043 0220 	orr.w	r2, r3, #32
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d054      	beq.n	8002464 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a22      	ldr	r2, [pc, #136]	@ (8002448 <HAL_ADC_Init+0x31c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_ADC_Init+0x2a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a20      	ldr	r2, [pc, #128]	@ (800244c <HAL_ADC_Init+0x320>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d140      	bne.n	8002450 <HAL_ADC_Init+0x324>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80023d6:	d02a      	beq.n	800242e <HAL_ADC_Init+0x302>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023e0:	d022      	beq.n	8002428 <HAL_ADC_Init+0x2fc>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80023ea:	d01a      	beq.n	8002422 <HAL_ADC_Init+0x2f6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 80023f4:	d012      	beq.n	800241c <HAL_ADC_Init+0x2f0>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80023fe:	d00a      	beq.n	8002416 <HAL_ADC_Init+0x2ea>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8002408:	d002      	beq.n	8002410 <HAL_ADC_Init+0x2e4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	e023      	b.n	8002458 <HAL_ADC_Init+0x32c>
 8002410:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002414:	e020      	b.n	8002458 <HAL_ADC_Init+0x32c>
 8002416:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800241a:	e01d      	b.n	8002458 <HAL_ADC_Init+0x32c>
 800241c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002420:	e01a      	b.n	8002458 <HAL_ADC_Init+0x32c>
 8002422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002426:	e017      	b.n	8002458 <HAL_ADC_Init+0x32c>
 8002428:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 800242c:	e014      	b.n	8002458 <HAL_ADC_Init+0x32c>
 800242e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002432:	e011      	b.n	8002458 <HAL_ADC_Init+0x32c>
 8002434:	20000004 	.word	0x20000004
 8002438:	431bde83 	.word	0x431bde83
 800243c:	50000100 	.word	0x50000100
 8002440:	50000300 	.word	0x50000300
 8002444:	50000700 	.word	0x50000700
 8002448:	50000400 	.word	0x50000400
 800244c:	50000500 	.word	0x50000500
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800245c:	4313      	orrs	r3, r2
 800245e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002460:	4313      	orrs	r3, r2
 8002462:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b00      	cmp	r3, #0
 8002470:	d114      	bne.n	800249c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002480:	f023 0302 	bic.w	r3, r3, #2
 8002484:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7e1b      	ldrb	r3, [r3, #24]
 800248a:	039a      	lsls	r2, r3, #14
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4313      	orrs	r3, r2
 8002496:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002498:	4313      	orrs	r3, r2
 800249a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <HAL_ADC_Init+0x3f0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80024ac:	430b      	orrs	r3, r1
 80024ae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d10c      	bne.n	80024d2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f023 010f 	bic.w	r1, r3, #15
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80024d0:	e007      	b.n	80024e2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 020f 	bic.w	r2, r2, #15
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	f023 0303 	bic.w	r3, r3, #3
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80024f8:	e00a      	b.n	8002510 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f023 0312 	bic.w	r3, r3, #18
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002510:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002514:	4618      	mov	r0, r3
 8002516:	3768      	adds	r7, #104	@ 0x68
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	fff0c007 	.word	0xfff0c007

08002520 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 80f9 	bne.w	800272e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADC_Start+0x2a>
 8002546:	2302      	movs	r3, #2
 8002548:	e0f4      	b.n	8002734 <HAL_ADC_Start+0x214>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fde6 	bl	8003124 <ADC_Enable>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80e0 	bne.w	8002724 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002580:	d004      	beq.n	800258c <HAL_ADC_Start+0x6c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6d      	ldr	r2, [pc, #436]	@ (800273c <HAL_ADC_Start+0x21c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d106      	bne.n	800259a <HAL_ADC_Start+0x7a>
 800258c:	4b6c      	ldr	r3, [pc, #432]	@ (8002740 <HAL_ADC_Start+0x220>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_ADC_Start+0x9a>
 8002598:	e005      	b.n	80025a6 <HAL_ADC_Start+0x86>
 800259a:	4b6a      	ldr	r3, [pc, #424]	@ (8002744 <HAL_ADC_Start+0x224>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_ADC_Start+0x9a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_Start+0x9a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a64      	ldr	r2, [pc, #400]	@ (8002748 <HAL_ADC_Start+0x228>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d115      	bne.n	80025e6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d036      	beq.n	8002642 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025e4:	e02d      	b.n	8002642 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025fa:	d004      	beq.n	8002606 <HAL_ADC_Start+0xe6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a4e      	ldr	r2, [pc, #312]	@ (800273c <HAL_ADC_Start+0x21c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10a      	bne.n	800261c <HAL_ADC_Start+0xfc>
 8002606:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e008      	b.n	800262e <HAL_ADC_Start+0x10e>
 800261c:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <HAL_ADC_Start+0x228>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800263a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800264e:	d106      	bne.n	800265e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002654:	f023 0206 	bic.w	r2, r3, #6
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
 800265c:	e002      	b.n	8002664 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	221c      	movs	r2, #28
 8002672:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800267c:	d004      	beq.n	8002688 <HAL_ADC_Start+0x168>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2e      	ldr	r2, [pc, #184]	@ (800273c <HAL_ADC_Start+0x21c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d106      	bne.n	8002696 <HAL_ADC_Start+0x176>
 8002688:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <HAL_ADC_Start+0x220>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03e      	beq.n	8002712 <HAL_ADC_Start+0x1f2>
 8002694:	e005      	b.n	80026a2 <HAL_ADC_Start+0x182>
 8002696:	4b2b      	ldr	r3, [pc, #172]	@ (8002744 <HAL_ADC_Start+0x224>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d037      	beq.n	8002712 <HAL_ADC_Start+0x1f2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_Start+0x196>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a22      	ldr	r2, [pc, #136]	@ (800273c <HAL_ADC_Start+0x21c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_Start+0x1a4>
 80026b6:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <HAL_ADC_Start+0x220>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d027      	beq.n	8002712 <HAL_ADC_Start+0x1f2>
 80026c2:	e005      	b.n	80026d0 <HAL_ADC_Start+0x1b0>
 80026c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <HAL_ADC_Start+0x224>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d020      	beq.n	8002712 <HAL_ADC_Start+0x1f2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d8:	d004      	beq.n	80026e4 <HAL_ADC_Start+0x1c4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a17      	ldr	r2, [pc, #92]	@ (800273c <HAL_ADC_Start+0x21c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d106      	bne.n	80026f2 <HAL_ADC_Start+0x1d2>
 80026e4:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <HAL_ADC_Start+0x220>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d010      	beq.n	8002712 <HAL_ADC_Start+0x1f2>
 80026f0:	e005      	b.n	80026fe <HAL_ADC_Start+0x1de>
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_ADC_Start+0x224>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2b09      	cmp	r3, #9
 80026fc:	d009      	beq.n	8002712 <HAL_ADC_Start+0x1f2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002706:	d004      	beq.n	8002712 <HAL_ADC_Start+0x1f2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <HAL_ADC_Start+0x228>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10f      	bne.n	8002732 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	e006      	b.n	8002732 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800272c:	e001      	b.n	8002732 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800272e:	2302      	movs	r3, #2
 8002730:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	50000100 	.word	0x50000100
 8002740:	50000300 	.word	0x50000300
 8002744:	50000700 	.word	0x50000700
 8002748:	50000400 	.word	0x50000400

0800274c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b08      	cmp	r3, #8
 8002760:	d102      	bne.n	8002768 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002762:	2308      	movs	r3, #8
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e03a      	b.n	80027de <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002770:	d004      	beq.n	800277c <HAL_ADC_PollForConversion+0x30>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a72      	ldr	r2, [pc, #456]	@ (8002940 <HAL_ADC_PollForConversion+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_ADC_PollForConversion+0x34>
 800277c:	4b71      	ldr	r3, [pc, #452]	@ (8002944 <HAL_ADC_PollForConversion+0x1f8>)
 800277e:	e000      	b.n	8002782 <HAL_ADC_PollForConversion+0x36>
 8002780:	4b71      	ldr	r3, [pc, #452]	@ (8002948 <HAL_ADC_PollForConversion+0x1fc>)
 8002782:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2b00      	cmp	r3, #0
 800278e:	d112      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11d      	bne.n	80027da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0bf      	b.n	8002936 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0ad      	b.n	8002936 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80027da:	230c      	movs	r3, #12
 80027dc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e6:	d004      	beq.n	80027f2 <HAL_ADC_PollForConversion+0xa6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a54      	ldr	r2, [pc, #336]	@ (8002940 <HAL_ADC_PollForConversion+0x1f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d106      	bne.n	8002800 <HAL_ADC_PollForConversion+0xb4>
 80027f2:	4b54      	ldr	r3, [pc, #336]	@ (8002944 <HAL_ADC_PollForConversion+0x1f8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_ADC_PollForConversion+0xd4>
 80027fe:	e005      	b.n	800280c <HAL_ADC_PollForConversion+0xc0>
 8002800:	4b51      	ldr	r3, [pc, #324]	@ (8002948 <HAL_ADC_PollForConversion+0x1fc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <HAL_ADC_PollForConversion+0xd4>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002814:	d004      	beq.n	8002820 <HAL_ADC_PollForConversion+0xd4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4c      	ldr	r2, [pc, #304]	@ (800294c <HAL_ADC_PollForConversion+0x200>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d104      	bne.n	800282a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e00f      	b.n	800284a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002832:	d004      	beq.n	800283e <HAL_ADC_PollForConversion+0xf2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a41      	ldr	r2, [pc, #260]	@ (8002940 <HAL_ADC_PollForConversion+0x1f4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d102      	bne.n	8002844 <HAL_ADC_PollForConversion+0xf8>
 800283e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002842:	e000      	b.n	8002846 <HAL_ADC_PollForConversion+0xfa>
 8002844:	4b41      	ldr	r3, [pc, #260]	@ (800294c <HAL_ADC_PollForConversion+0x200>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800284a:	f7ff fc63 	bl	8002114 <HAL_GetTick>
 800284e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002850:	e021      	b.n	8002896 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d01d      	beq.n	8002896 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <HAL_ADC_PollForConversion+0x124>
 8002860:	f7ff fc58 	bl	8002114 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d212      	bcs.n	8002896 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e04f      	b.n	8002936 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0d6      	beq.n	8002852 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d131      	bne.n	8002922 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d12c      	bne.n	8002922 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d125      	bne.n	8002922 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d112      	bne.n	800290a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d112      	bne.n	8002922 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40
 8002908:	e00b      	b.n	8002922 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	50000100 	.word	0x50000100
 8002944:	50000300 	.word	0x50000300
 8002948:	50000700 	.word	0x50000700
 800294c:	50000400 	.word	0x50000400

08002950 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800296c:	b480      	push	{r7}
 800296e:	b09b      	sub	sp, #108	@ 0x6c
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x22>
 800298a:	2302      	movs	r3, #2
 800298c:	e2c8      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x5b4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 82ac 	bne.w	8002efe <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d81c      	bhi.n	80029e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	461a      	mov	r2, r3
 80029c2:	231f      	movs	r3, #31
 80029c4:	4093      	lsls	r3, r2
 80029c6:	43db      	mvns	r3, r3
 80029c8:	4019      	ands	r1, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa00 f203 	lsl.w	r2, r0, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80029e6:	e063      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d81e      	bhi.n	8002a2e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	3b1e      	subs	r3, #30
 8002a04:	221f      	movs	r2, #31
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	4019      	ands	r1, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	3b1e      	subs	r3, #30
 8002a20:	fa00 f203 	lsl.w	r2, r0, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a2c:	e040      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b0e      	cmp	r3, #14
 8002a34:	d81e      	bhi.n	8002a74 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	3b3c      	subs	r3, #60	@ 0x3c
 8002a4a:	221f      	movs	r2, #31
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4019      	ands	r1, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	3b3c      	subs	r3, #60	@ 0x3c
 8002a66:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a72:	e01d      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	3b5a      	subs	r3, #90	@ 0x5a
 8002a88:	221f      	movs	r2, #31
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	4019      	ands	r1, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	3b5a      	subs	r3, #90	@ 0x5a
 8002aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80e5 	bne.w	8002c8a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	d91c      	bls.n	8002b02 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6999      	ldr	r1, [r3, #24]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	2207      	movs	r2, #7
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4019      	ands	r1, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	3b1e      	subs	r3, #30
 8002af4:	fa00 f203 	lsl.w	r2, r0, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	619a      	str	r2, [r3, #24]
 8002b00:	e019      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6959      	ldr	r1, [r3, #20]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	4019      	ands	r1, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6898      	ldr	r0, [r3, #8]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d84f      	bhi.n	8002bf8 <HAL_ADC_ConfigChannel+0x28c>
 8002b58:	a201      	add	r2, pc, #4	@ (adr r2, 8002b60 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b93 	.word	0x08002b93
 8002b68:	08002bb5 	.word	0x08002bb5
 8002b6c:	08002bd7 	.word	0x08002bd7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b76:	4b99      	ldr	r3, [pc, #612]	@ (8002ddc <HAL_ADC_ConfigChannel+0x470>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	0691      	lsls	r1, r2, #26
 8002b80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b82:	430a      	orrs	r2, r1
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b8e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b90:	e07b      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b98:	4b90      	ldr	r3, [pc, #576]	@ (8002ddc <HAL_ADC_ConfigChannel+0x470>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	0691      	lsls	r1, r2, #26
 8002ba2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002bb0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bb2:	e06a      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002bba:	4b88      	ldr	r3, [pc, #544]	@ (8002ddc <HAL_ADC_ConfigChannel+0x470>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	0691      	lsls	r1, r2, #26
 8002bc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002bd2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bd4:	e059      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8002ddc <HAL_ADC_ConfigChannel+0x470>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	0691      	lsls	r1, r2, #26
 8002be6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002be8:	430a      	orrs	r2, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002bf4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bf6:	e048      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	069b      	lsls	r3, r3, #26
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d107      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c1a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	069b      	lsls	r3, r3, #26
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d107      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c3e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d107      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c62:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	069b      	lsls	r3, r3, #26
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d107      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c86:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002c88:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x33e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x33e>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_ADC_ConfigChannel+0x340>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f040 8131 	bne.w	8002f14 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d00f      	beq.n	8002cda <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002cd8:	e049      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	d91c      	bls.n	8002d36 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6999      	ldr	r1, [r3, #24]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b1b      	subs	r3, #27
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4019      	ands	r1, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6898      	ldr	r0, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	3b1b      	subs	r3, #27
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	619a      	str	r2, [r3, #24]
 8002d34:	e01b      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6959      	ldr	r1, [r3, #20]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	2207      	movs	r2, #7
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	4019      	ands	r1, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6898      	ldr	r0, [r3, #8]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	fa00 f203 	lsl.w	r2, r0, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x416>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <HAL_ADC_ConfigChannel+0x474>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x41a>
 8002d82:	4b18      	ldr	r3, [pc, #96]	@ (8002de4 <HAL_ADC_ConfigChannel+0x478>)
 8002d84:	e000      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x41c>
 8002d86:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <HAL_ADC_ConfigChannel+0x47c>)
 8002d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d105      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d015      	beq.n	8002dca <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002da2:	2b11      	cmp	r3, #17
 8002da4:	d105      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002db6:	2b12      	cmp	r3, #18
 8002db8:	f040 80ac 	bne.w	8002f14 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 80a5 	bne.w	8002f14 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd2:	d10b      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x480>
 8002dd4:	4b02      	ldr	r3, [pc, #8]	@ (8002de0 <HAL_ADC_ConfigChannel+0x474>)
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e023      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x4b6>
 8002dda:	bf00      	nop
 8002ddc:	83fff000 	.word	0x83fff000
 8002de0:	50000100 	.word	0x50000100
 8002de4:	50000300 	.word	0x50000300
 8002de8:	50000700 	.word	0x50000700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a4e      	ldr	r2, [pc, #312]	@ (8002f2c <HAL_ADC_ConfigChannel+0x5c0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d103      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x492>
 8002df6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e011      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x4b6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4b      	ldr	r2, [pc, #300]	@ (8002f30 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x4a2>
 8002e08:	4b4a      	ldr	r3, [pc, #296]	@ (8002f34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e009      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x4b6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a48      	ldr	r2, [pc, #288]	@ (8002f34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x4b2>
 8002e18:	4b45      	ldr	r3, [pc, #276]	@ (8002f30 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e001      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x4b6>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d108      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x4d6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x4d6>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x4d8>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d150      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x4fe>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x4fe>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x500>
 8002e6a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d13c      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d11d      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x548>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e80:	d118      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e8c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <HAL_ADC_ConfigChannel+0x5cc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <HAL_ADC_ConfigChannel+0x5d0>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0c9a      	lsrs	r2, r3, #18
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ea4:	e002      	b.n	8002eac <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f9      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002eb2:	e02e      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d10b      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x568>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ed2:	e01e      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b12      	cmp	r3, #18
 8002eda:	d11a      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ee4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ee6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ee8:	e013      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002efc:	e00a      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002f10:	e000      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f12:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	376c      	adds	r7, #108	@ 0x6c
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	50000100 	.word	0x50000100
 8002f30:	50000400 	.word	0x50000400
 8002f34:	50000500 	.word	0x50000500
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	431bde83 	.word	0x431bde83

08002f40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b099      	sub	sp, #100	@ 0x64
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f58:	d102      	bne.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	e01a      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6a      	ldr	r2, [pc, #424]	@ (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d103      	bne.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002f6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	e011      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a67      	ldr	r2, [pc, #412]	@ (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f7c:	4b66      	ldr	r3, [pc, #408]	@ (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	e009      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a64      	ldr	r2, [pc, #400]	@ (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f8c:	4b61      	ldr	r3, [pc, #388]	@ (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	e001      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b0      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e0a9      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 808d 	bne.w	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 8086 	bne.w	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fdc:	d004      	beq.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4b      	ldr	r2, [pc, #300]	@ (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800311c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002fea:	e000      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002fec:	4b4c      	ldr	r3, [pc, #304]	@ (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002fee:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d040      	beq.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ff8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800300a:	035b      	lsls	r3, r3, #13
 800300c:	430b      	orrs	r3, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003012:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d108      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d15c      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003056:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	d14b      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800305c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003064:	f023 030f 	bic.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	6811      	ldr	r1, [r2, #0]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	430a      	orrs	r2, r1
 8003072:	431a      	orrs	r2, r3
 8003074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003076:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003078:	e03c      	b.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800307a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003084:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d123      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80030c8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d112      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80030ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030d6:	f023 030f 	bic.w	r3, r3, #15
 80030da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030dc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030de:	e009      	b.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80030f2:	e000      	b.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030f4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8003102:	4618      	mov	r0, r3
 8003104:	3764      	adds	r7, #100	@ 0x64
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	50000100 	.word	0x50000100
 8003114:	50000400 	.word	0x50000400
 8003118:	50000500 	.word	0x50000500
 800311c:	50000300 	.word	0x50000300
 8003120:	50000700 	.word	0x50000700

08003124 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <ADC_Enable+0x2c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <ADC_Enable+0x2c>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <ADC_Enable+0x2e>
 8003150:	2300      	movs	r3, #0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d143      	bne.n	80031de <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	4b22      	ldr	r3, [pc, #136]	@ (80031e8 <ADC_Enable+0xc4>)
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f043 0210 	orr.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e02f      	b.n	80031e0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003190:	f7fe ffc0 	bl	8002114 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003196:	e01b      	b.n	80031d0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003198:	f7fe ffbc 	bl	8002114 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d914      	bls.n	80031d0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d00d      	beq.n	80031d0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f043 0210 	orr.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e007      	b.n	80031e0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d1dc      	bne.n	8003198 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	8000003f 	.word	0x8000003f

080031ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d108      	bne.n	8003218 <ADC_Disable+0x2c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <ADC_Disable+0x2c>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <ADC_Disable+0x2e>
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d047      	beq.n	80032ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030d 	and.w	r3, r3, #13
 8003228:	2b01      	cmp	r3, #1
 800322a:	d10f      	bne.n	800324c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0202 	orr.w	r2, r2, #2
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2203      	movs	r2, #3
 8003242:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003244:	f7fe ff66 	bl	8002114 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800324a:	e029      	b.n	80032a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f043 0210 	orr.w	r2, r3, #16
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e023      	b.n	80032b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003268:	f7fe ff54 	bl	8002114 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d914      	bls.n	80032a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10d      	bne.n	80032a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0210 	orr.w	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e007      	b.n	80032b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d0dc      	beq.n	8003268 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	@ (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	@ (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	@ (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	@ 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	@ 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff4c 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800343a:	f7ff ff61 	bl	8003300 <__NVIC_GetPriorityGrouping>
 800343e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	6978      	ldr	r0, [r7, #20]
 8003446:	f7ff ffb1 	bl	80033ac <NVIC_EncodePriority>
 800344a:	4602      	mov	r2, r0
 800344c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff80 	bl	8003358 <__NVIC_SetPriority>
}
 8003458:	bf00      	nop
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff54 	bl	800331c <__NVIC_EnableIRQ>
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	e160      	b.n	800374e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8152 	beq.w	8003748 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d005      	beq.n	80034bc <HAL_GPIO_Init+0x40>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d130      	bne.n	800351e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f2:	2201      	movs	r2, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0201 	and.w	r2, r3, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d017      	beq.n	800355a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d123      	bne.n	80035ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	220f      	movs	r2, #15
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	6939      	ldr	r1, [r7, #16]
 80035aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	2203      	movs	r2, #3
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80ac 	beq.w	8003748 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f0:	4b5e      	ldr	r3, [pc, #376]	@ (800376c <HAL_GPIO_Init+0x2f0>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a5d      	ldr	r2, [pc, #372]	@ (800376c <HAL_GPIO_Init+0x2f0>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b5b      	ldr	r3, [pc, #364]	@ (800376c <HAL_GPIO_Init+0x2f0>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003608:	4a59      	ldr	r2, [pc, #356]	@ (8003770 <HAL_GPIO_Init+0x2f4>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	3302      	adds	r3, #2
 8003610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	220f      	movs	r2, #15
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003632:	d025      	beq.n	8003680 <HAL_GPIO_Init+0x204>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a4f      	ldr	r2, [pc, #316]	@ (8003774 <HAL_GPIO_Init+0x2f8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01f      	beq.n	800367c <HAL_GPIO_Init+0x200>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a4e      	ldr	r2, [pc, #312]	@ (8003778 <HAL_GPIO_Init+0x2fc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d019      	beq.n	8003678 <HAL_GPIO_Init+0x1fc>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a4d      	ldr	r2, [pc, #308]	@ (800377c <HAL_GPIO_Init+0x300>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_GPIO_Init+0x1f8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a4c      	ldr	r2, [pc, #304]	@ (8003780 <HAL_GPIO_Init+0x304>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00d      	beq.n	8003670 <HAL_GPIO_Init+0x1f4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a4b      	ldr	r2, [pc, #300]	@ (8003784 <HAL_GPIO_Init+0x308>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <HAL_GPIO_Init+0x1f0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a4a      	ldr	r2, [pc, #296]	@ (8003788 <HAL_GPIO_Init+0x30c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_GPIO_Init+0x1ec>
 8003664:	2306      	movs	r3, #6
 8003666:	e00c      	b.n	8003682 <HAL_GPIO_Init+0x206>
 8003668:	2307      	movs	r3, #7
 800366a:	e00a      	b.n	8003682 <HAL_GPIO_Init+0x206>
 800366c:	2305      	movs	r3, #5
 800366e:	e008      	b.n	8003682 <HAL_GPIO_Init+0x206>
 8003670:	2304      	movs	r3, #4
 8003672:	e006      	b.n	8003682 <HAL_GPIO_Init+0x206>
 8003674:	2303      	movs	r3, #3
 8003676:	e004      	b.n	8003682 <HAL_GPIO_Init+0x206>
 8003678:	2302      	movs	r3, #2
 800367a:	e002      	b.n	8003682 <HAL_GPIO_Init+0x206>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_GPIO_Init+0x206>
 8003680:	2300      	movs	r3, #0
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	f002 0203 	and.w	r2, r2, #3
 8003688:	0092      	lsls	r2, r2, #2
 800368a:	4093      	lsls	r3, r2
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003692:	4937      	ldr	r1, [pc, #220]	@ (8003770 <HAL_GPIO_Init+0x2f4>)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	3302      	adds	r3, #2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036a0:	4b3a      	ldr	r3, [pc, #232]	@ (800378c <HAL_GPIO_Init+0x310>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <HAL_GPIO_Init+0x310>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ca:	4b30      	ldr	r3, [pc, #192]	@ (800378c <HAL_GPIO_Init+0x310>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <HAL_GPIO_Init+0x310>)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036f4:	4b25      	ldr	r3, [pc, #148]	@ (800378c <HAL_GPIO_Init+0x310>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003718:	4a1c      	ldr	r2, [pc, #112]	@ (800378c <HAL_GPIO_Init+0x310>)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800371e:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <HAL_GPIO_Init+0x310>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <HAL_GPIO_Init+0x310>)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	3301      	adds	r3, #1
 800374c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	f47f ae97 	bne.w	800348c <HAL_GPIO_Init+0x10>
  }
}
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40021000 	.word	0x40021000
 8003770:	40010000 	.word	0x40010000
 8003774:	48000400 	.word	0x48000400
 8003778:	48000800 	.word	0x48000800
 800377c:	48000c00 	.word	0x48000c00
 8003780:	48001000 	.word	0x48001000
 8003784:	48001400 	.word	0x48001400
 8003788:	48001800 	.word	0x48001800
 800378c:	40010400 	.word	0x40010400

08003790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e001      	b.n	80037b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
 80037cc:	4613      	mov	r3, r2
 80037ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d0:	787b      	ldrb	r3, [r7, #1]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037dc:	e002      	b.n	80037e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	041a      	lsls	r2, r3, #16
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43d9      	mvns	r1, r3
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	400b      	ands	r3, r1
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800382a:	af00      	add	r7, sp, #0
 800382c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003830:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003834:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800383a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f001 b83a 	b.w	80048be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 816f 	beq.w	8003b3e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003860:	4bb5      	ldr	r3, [pc, #724]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00c      	beq.n	8003886 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800386c:	4bb2      	ldr	r3, [pc, #712]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d15c      	bne.n	8003932 <HAL_RCC_OscConfig+0x10e>
 8003878:	4baf      	ldr	r3, [pc, #700]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003884:	d155      	bne.n	8003932 <HAL_RCC_OscConfig+0x10e>
 8003886:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800388a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800389a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <HAL_RCC_OscConfig+0x94>
 80038b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	e015      	b.n	80038e4 <HAL_RCC_OscConfig+0xc0>
 80038b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038bc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80038cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038d0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80038d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80038e0:	4b95      	ldr	r3, [pc, #596]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038e8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80038ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80038f0:	fa92 f2a2 	rbit	r2, r2
 80038f4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80038f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80038fc:	fab2 f282 	clz	r2, r2
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f042 0220 	orr.w	r2, r2, #32
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	f002 021f 	and.w	r2, r2, #31
 800390c:	2101      	movs	r1, #1
 800390e:	fa01 f202 	lsl.w	r2, r1, r2
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8111 	beq.w	8003b3c <HAL_RCC_OscConfig+0x318>
 800391a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800391e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 8108 	bne.w	8003b3c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f000 bfc6 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003936:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x12e>
 8003944:	4b7c      	ldr	r3, [pc, #496]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a7b      	ldr	r2, [pc, #492]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	e036      	b.n	80039c0 <HAL_RCC_OscConfig+0x19c>
 8003952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003956:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x158>
 8003962:	4b75      	ldr	r3, [pc, #468]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a74      	ldr	r2, [pc, #464]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b72      	ldr	r3, [pc, #456]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a71      	ldr	r2, [pc, #452]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003974:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e021      	b.n	80039c0 <HAL_RCC_OscConfig+0x19c>
 800397c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003980:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x184>
 800398e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a69      	ldr	r2, [pc, #420]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b67      	ldr	r3, [pc, #412]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a66      	ldr	r2, [pc, #408]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0x19c>
 80039a8:	4b63      	ldr	r3, [pc, #396]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a62      	ldr	r2, [pc, #392]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b60      	ldr	r3, [pc, #384]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d059      	beq.n	8003a84 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fe fba0 	bl	8002114 <HAL_GetTick>
 80039d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039da:	f7fe fb9b 	bl	8002114 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	@ 0x64
 80039e8:	d902      	bls.n	80039f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f000 bf67 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
 80039f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003a04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <HAL_RCC_OscConfig+0x1fe>
 8003a1c:	4b46      	ldr	r3, [pc, #280]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x22a>
 8003a22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a26:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003a36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a3a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a3e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a52:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003a56:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a5a:	fa92 f2a2 	rbit	r2, r2
 8003a5e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003a62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a66:	fab2 f282 	clz	r2, r2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f042 0220 	orr.w	r2, r2, #32
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	f002 021f 	and.w	r2, r2, #31
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ab      	beq.n	80039da <HAL_RCC_OscConfig+0x1b6>
 8003a82:	e05c      	b.n	8003b3e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe fb46 	bl	8002114 <HAL_GetTick>
 8003a88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8e:	f7fe fb41 	bl	8002114 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	@ 0x64
 8003a9c:	d902      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	f000 bf0d 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
 8003aa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003aa8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003ab8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2b2>
 8003ad0:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	e015      	b.n	8003b02 <HAL_RCC_OscConfig+0x2de>
 8003ad6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ada:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003aee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003af2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003afe:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <HAL_RCC_OscConfig+0x314>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b06:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003b0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003b0e:	fa92 f2a2 	rbit	r2, r2
 8003b12:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003b16:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003b1a:	fab2 f282 	clz	r2, r2
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	f042 0220 	orr.w	r2, r2, #32
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f002 021f 	and.w	r2, r2, #31
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ab      	bne.n	8003a8e <HAL_RCC_OscConfig+0x26a>
 8003b36:	e002      	b.n	8003b3e <HAL_RCC_OscConfig+0x31a>
 8003b38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 817f 	beq.w	8003e52 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b54:	4ba7      	ldr	r3, [pc, #668]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b60:	4ba4      	ldr	r3, [pc, #656]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d173      	bne.n	8003c54 <HAL_RCC_OscConfig+0x430>
 8003b6c:	4ba1      	ldr	r3, [pc, #644]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b78:	d16c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x430>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003b8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b90:	fab3 f383 	clz	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_RCC_OscConfig+0x386>
 8003ba4:	4b93      	ldr	r3, [pc, #588]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	e013      	b.n	8003bd2 <HAL_RCC_OscConfig+0x3ae>
 8003baa:	2302      	movs	r3, #2
 8003bac:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003bc2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003bce:	4b89      	ldr	r3, [pc, #548]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003bd8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003bdc:	fa92 f2a2 	rbit	r2, r2
 8003be0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003be4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003be8:	fab2 f282 	clz	r2, r2
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f042 0220 	orr.w	r2, r2, #32
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	f002 021f 	and.w	r2, r2, #31
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCC_OscConfig+0x3f6>
 8003c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d002      	beq.n	8003c1a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f000 be52 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b76      	ldr	r3, [pc, #472]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	21f8      	movs	r1, #248	@ 0xf8
 8003c30:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003c38:	fa91 f1a1 	rbit	r1, r1
 8003c3c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003c40:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003c44:	fab1 f181 	clz	r1, r1
 8003c48:	b2c9      	uxtb	r1, r1
 8003c4a:	408b      	lsls	r3, r1
 8003c4c:	4969      	ldr	r1, [pc, #420]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	e0fe      	b.n	8003e52 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8088 	beq.w	8003d76 <HAL_RCC_OscConfig+0x552>
 8003c66:	2301      	movs	r3, #1
 8003c68:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003c78:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2301      	movs	r3, #1
 8003c90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fe fa3f 	bl	8002114 <HAL_GetTick>
 8003c96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fe fa3a 	bl	8002114 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d902      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	f000 be06 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003cc4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x4be>
 8003cdc:	4b45      	ldr	r3, [pc, #276]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	e013      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e6>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003cfa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003d06:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003d10:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003d14:	fa92 f2a2 	rbit	r2, r2
 8003d18:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003d1c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003d20:	fab2 f282 	clz	r2, r2
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	f042 0220 	orr.w	r2, r2, #32
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	f002 021f 	and.w	r2, r2, #31
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f202 	lsl.w	r2, r1, r2
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0af      	beq.n	8003c9c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	21f8      	movs	r1, #248	@ 0xf8
 8003d52:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003d5a:	fa91 f1a1 	rbit	r1, r1
 8003d5e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003d62:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003d66:	fab1 f181 	clz	r1, r1
 8003d6a:	b2c9      	uxtb	r1, r1
 8003d6c:	408b      	lsls	r3, r1
 8003d6e:	4921      	ldr	r1, [pc, #132]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e06d      	b.n	8003e52 <HAL_RCC_OscConfig+0x62e>
 8003d76:	2301      	movs	r3, #1
 8003d78:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003d88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fe f9b7 	bl	8002114 <HAL_GetTick>
 8003da6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fe f9b2 	bl	8002114 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d902      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	f000 bd7e 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003dd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5d4>
 8003dec:	4b01      	ldr	r3, [pc, #4]	@ (8003df4 <HAL_RCC_OscConfig+0x5d0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	e016      	b.n	8003e20 <HAL_RCC_OscConfig+0x5fc>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003e10:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003e1c:	4bbf      	ldr	r3, [pc, #764]	@ (800411c <HAL_RCC_OscConfig+0x8f8>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	2202      	movs	r2, #2
 8003e22:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003e26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003e2a:	fa92 f2a2 	rbit	r2, r2
 8003e2e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003e32:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003e36:	fab2 f282 	clz	r2, r2
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f042 0220 	orr.w	r2, r2, #32
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	f002 021f 	and.w	r2, r2, #31
 8003e46:	2101      	movs	r1, #1
 8003e48:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ac      	bne.n	8003dac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8113 	beq.w	800408e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d07c      	beq.n	8003f72 <HAL_RCC_OscConfig+0x74e>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	4ba2      	ldr	r3, [pc, #648]	@ (8004120 <HAL_RCC_OscConfig+0x8fc>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f937 	bl	8002114 <HAL_GetTick>
 8003ea6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eac:	f7fe f932 	bl	8002114 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d902      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	f000 bcfe 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ecc:	fa93 f2a3 	rbit	r2, r3
 8003ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	fa93 f2a3 	rbit	r2, r3
 8003ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003f06:	2202      	movs	r2, #2
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	fa93 f2a3 	rbit	r2, r3
 8003f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003f20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	4b7e      	ldr	r3, [pc, #504]	@ (800411c <HAL_RCC_OscConfig+0x8f8>)
 8003f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003f2e:	2102      	movs	r1, #2
 8003f30:	6019      	str	r1, [r3, #0]
 8003f32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	fa93 f1a3 	rbit	r1, r3
 8003f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f48:	6019      	str	r1, [r3, #0]
  return result;
 8003f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fab3 f383 	clz	r3, r3
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d09d      	beq.n	8003eac <HAL_RCC_OscConfig+0x688>
 8003f70:	e08d      	b.n	800408e <HAL_RCC_OscConfig+0x86a>
 8003f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	fa93 f2a3 	rbit	r2, r3
 8003f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f94:	601a      	str	r2, [r3, #0]
  return result;
 8003f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8004120 <HAL_RCC_OscConfig+0x8fc>)
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fe f8ae 	bl	8002114 <HAL_GetTick>
 8003fb8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fbe:	f7fe f8a9 	bl	8002114 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	f000 bc75 	b.w	80048be <HAL_RCC_OscConfig+0x109a>
 8003fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003fdc:	2202      	movs	r2, #2
 8003fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fe4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	fa93 f2a3 	rbit	r2, r3
 8003fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ff2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ffc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004000:	2202      	movs	r2, #2
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004008:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	fa93 f2a3 	rbit	r2, r3
 8004012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004016:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004020:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004024:	2202      	movs	r2, #2
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800402c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	fa93 f2a3 	rbit	r2, r3
 8004036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800403a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800403e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004040:	4b36      	ldr	r3, [pc, #216]	@ (800411c <HAL_RCC_OscConfig+0x8f8>)
 8004042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004048:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800404c:	2102      	movs	r1, #2
 800404e:	6019      	str	r1, [r3, #0]
 8004050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004054:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	fa93 f1a3 	rbit	r1, r3
 800405e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004062:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004066:	6019      	str	r1, [r3, #0]
  return result;
 8004068:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800406c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d197      	bne.n	8003fbe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004092:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 81a5 	beq.w	80043ee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040aa:	4b1c      	ldr	r3, [pc, #112]	@ (800411c <HAL_RCC_OscConfig+0x8f8>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d116      	bne.n	80040e4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	4b19      	ldr	r3, [pc, #100]	@ (800411c <HAL_RCC_OscConfig+0x8f8>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4a18      	ldr	r2, [pc, #96]	@ (800411c <HAL_RCC_OscConfig+0x8f8>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	61d3      	str	r3, [r2, #28]
 80040c2:	4b16      	ldr	r3, [pc, #88]	@ (800411c <HAL_RCC_OscConfig+0x8f8>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80040ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <HAL_RCC_OscConfig+0x900>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d121      	bne.n	8004134 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <HAL_RCC_OscConfig+0x900>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <HAL_RCC_OscConfig+0x900>)
 80040f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fc:	f7fe f80a 	bl	8002114 <HAL_GetTick>
 8004100:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e010      	b.n	8004128 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fe f805 	bl	8002114 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	@ 0x64
 8004114:	d908      	bls.n	8004128 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e3d1      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	10908120 	.word	0x10908120
 8004124:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	4b8d      	ldr	r3, [pc, #564]	@ (8004360 <HAL_RCC_OscConfig+0xb3c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0e8      	beq.n	8004106 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004138:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x92e>
 8004144:	4b87      	ldr	r3, [pc, #540]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4a86      	ldr	r2, [pc, #536]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6213      	str	r3, [r2, #32]
 8004150:	e035      	b.n	80041be <HAL_RCC_OscConfig+0x99a>
 8004152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004156:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x958>
 8004162:	4b80      	ldr	r3, [pc, #512]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a7f      	ldr	r2, [pc, #508]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6213      	str	r3, [r2, #32]
 800416e:	4b7d      	ldr	r3, [pc, #500]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4a7c      	ldr	r2, [pc, #496]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	6213      	str	r3, [r2, #32]
 800417a:	e020      	b.n	80041be <HAL_RCC_OscConfig+0x99a>
 800417c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004180:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b05      	cmp	r3, #5
 800418a:	d10c      	bne.n	80041a6 <HAL_RCC_OscConfig+0x982>
 800418c:	4b75      	ldr	r3, [pc, #468]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	4a74      	ldr	r2, [pc, #464]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 8004192:	f043 0304 	orr.w	r3, r3, #4
 8004196:	6213      	str	r3, [r2, #32]
 8004198:	4b72      	ldr	r3, [pc, #456]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	4a71      	ldr	r2, [pc, #452]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	6213      	str	r3, [r2, #32]
 80041a4:	e00b      	b.n	80041be <HAL_RCC_OscConfig+0x99a>
 80041a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	6213      	str	r3, [r2, #32]
 80041b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4a6b      	ldr	r2, [pc, #428]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8081 	beq.w	80042d2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d0:	f7fd ffa0 	bl	8002114 <HAL_GetTick>
 80041d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	e00b      	b.n	80041f2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fd ff9b 	bl	8002114 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e365      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
 80041f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041fa:	2202      	movs	r2, #2
 80041fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004202:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004210:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800421a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800421e:	2202      	movs	r2, #2
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004226:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	fa93 f2a3 	rbit	r2, r3
 8004230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004234:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004238:	601a      	str	r2, [r3, #0]
  return result;
 800423a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800423e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004242:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d102      	bne.n	800425e <HAL_RCC_OscConfig+0xa3a>
 8004258:	4b42      	ldr	r3, [pc, #264]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	e013      	b.n	8004286 <HAL_RCC_OscConfig+0xa62>
 800425e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004262:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004266:	2202      	movs	r2, #2
 8004268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800426e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	fa93 f2a3 	rbit	r2, r3
 8004278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800427c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	4b38      	ldr	r3, [pc, #224]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800428a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800428e:	2102      	movs	r1, #2
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004296:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	fa92 f1a2 	rbit	r1, r2
 80042a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042a4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80042a8:	6011      	str	r1, [r2, #0]
  return result;
 80042aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042ae:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f002 021f 	and.w	r2, r2, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d084      	beq.n	80041da <HAL_RCC_OscConfig+0x9b6>
 80042d0:	e083      	b.n	80043da <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7fd ff1f 	bl	8002114 <HAL_GetTick>
 80042d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fd ff1a 	bl	8002114 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e2e4      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
 80042f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042fc:	2202      	movs	r2, #2
 80042fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004304:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	fa93 f2a3 	rbit	r2, r3
 800430e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004312:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800431c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004320:	2202      	movs	r2, #2
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004328:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	fa93 f2a3 	rbit	r2, r3
 8004332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004336:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800433a:	601a      	str	r2, [r3, #0]
  return result;
 800433c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004340:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d106      	bne.n	8004368 <HAL_RCC_OscConfig+0xb44>
 800435a:	4b02      	ldr	r3, [pc, #8]	@ (8004364 <HAL_RCC_OscConfig+0xb40>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	e017      	b.n	8004390 <HAL_RCC_OscConfig+0xb6c>
 8004360:	40007000 	.word	0x40007000
 8004364:	40021000 	.word	0x40021000
 8004368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800436c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004378:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004386:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	4bb3      	ldr	r3, [pc, #716]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004394:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004398:	2102      	movs	r1, #2
 800439a:	6011      	str	r1, [r2, #0]
 800439c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	fa92 f1a2 	rbit	r1, r2
 80043aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043ae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80043b2:	6011      	str	r1, [r2, #0]
  return result;
 80043b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043b8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	fab2 f282 	clz	r2, r2
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	f002 021f 	and.w	r2, r2, #31
 80043ce:	2101      	movs	r1, #1
 80043d0:	fa01 f202 	lsl.w	r2, r1, r2
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d180      	bne.n	80042dc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043da:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d105      	bne.n	80043ee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e2:	4b9e      	ldr	r3, [pc, #632]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4a9d      	ldr	r2, [pc, #628]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 80043e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 825e 	beq.w	80048bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004400:	4b96      	ldr	r3, [pc, #600]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b08      	cmp	r3, #8
 800440a:	f000 821f 	beq.w	800484c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800440e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004412:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b02      	cmp	r3, #2
 800441c:	f040 8170 	bne.w	8004700 <HAL_RCC_OscConfig+0xedc>
 8004420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004424:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800442c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004432:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fa93 f2a3 	rbit	r2, r3
 800443c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004440:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004444:	601a      	str	r2, [r3, #0]
  return result;
 8004446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800444a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800444e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800445a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fd fe55 	bl	8002114 <HAL_GetTick>
 800446a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446e:	e009      	b.n	8004484 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fd fe50 	bl	8002114 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e21c      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
 8004484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004488:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800448c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004496:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	fa93 f2a3 	rbit	r2, r3
 80044a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80044a8:	601a      	str	r2, [r3, #0]
  return result;
 80044aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80044b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_OscConfig+0xcaa>
 80044c8:	4b64      	ldr	r3, [pc, #400]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	e027      	b.n	800451e <HAL_RCC_OscConfig+0xcfa>
 80044ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80044d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80044fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004506:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	fa93 f2a3 	rbit	r2, r3
 8004510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004514:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	4b50      	ldr	r3, [pc, #320]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004522:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004526:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800452a:	6011      	str	r1, [r2, #0]
 800452c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004530:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	fa92 f1a2 	rbit	r1, r2
 800453a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800453e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004542:	6011      	str	r1, [r2, #0]
  return result;
 8004544:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004548:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	fab2 f282 	clz	r2, r2
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	f042 0220 	orr.w	r2, r2, #32
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	f002 021f 	and.w	r2, r2, #31
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f202 	lsl.w	r2, r1, r2
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d182      	bne.n	8004470 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800456a:	4b3c      	ldr	r3, [pc, #240]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	f023 020f 	bic.w	r2, r3, #15
 8004572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004576:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	4937      	ldr	r1, [pc, #220]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 8004580:	4313      	orrs	r3, r2
 8004582:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004584:	4b35      	ldr	r3, [pc, #212]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800458c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004590:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a19      	ldr	r1, [r3, #32]
 8004598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800459c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	492d      	ldr	r1, [pc, #180]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
 80045ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80045b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	fa93 f2a3 	rbit	r2, r3
 80045c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80045d0:	601a      	str	r2, [r3, #0]
  return result;
 80045d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80045da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045dc:	fab3 f383 	clz	r3, r3
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80045e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	461a      	mov	r2, r3
 80045ee:	2301      	movs	r3, #1
 80045f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fd fd8f 	bl	8002114 <HAL_GetTick>
 80045f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045fa:	e009      	b.n	8004610 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd fd8a 	bl	8002114 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e156      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
 8004610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004614:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004618:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800461c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004622:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	fa93 f2a3 	rbit	r2, r3
 800462c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004630:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004634:	601a      	str	r2, [r3, #0]
  return result;
 8004636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800463a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800463e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <HAL_RCC_OscConfig+0xe3c>
 8004654:	4b01      	ldr	r3, [pc, #4]	@ (800465c <HAL_RCC_OscConfig+0xe38>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	e02a      	b.n	80046b0 <HAL_RCC_OscConfig+0xe8c>
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000
 8004660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004664:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004668:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800466c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004672:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	fa93 f2a3 	rbit	r2, r3
 800467c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004680:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800468a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800468e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004698:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	fa93 f2a3 	rbit	r2, r3
 80046a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046a6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	4b86      	ldr	r3, [pc, #536]	@ (80048c8 <HAL_RCC_OscConfig+0x10a4>)
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80046b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80046bc:	6011      	str	r1, [r2, #0]
 80046be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	fa92 f1a2 	rbit	r1, r2
 80046cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046d0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80046d4:	6011      	str	r1, [r2, #0]
  return result;
 80046d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046da:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	fab2 f282 	clz	r2, r2
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	f042 0220 	orr.w	r2, r2, #32
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	f002 021f 	and.w	r2, r2, #31
 80046f0:	2101      	movs	r1, #1
 80046f2:	fa01 f202 	lsl.w	r2, r1, r2
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f43f af7f 	beq.w	80045fc <HAL_RCC_OscConfig+0xdd8>
 80046fe:	e0dd      	b.n	80048bc <HAL_RCC_OscConfig+0x1098>
 8004700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004704:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004708:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800470c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004712:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	fa93 f2a3 	rbit	r2, r3
 800471c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004720:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004724:	601a      	str	r2, [r3, #0]
  return result;
 8004726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800472a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800472e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800473a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fd fce5 	bl	8002114 <HAL_GetTick>
 800474a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474e:	e009      	b.n	8004764 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7fd fce0 	bl	8002114 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0ac      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
 8004764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004768:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800476c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004776:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	fa93 f2a3 	rbit	r2, r3
 8004780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004784:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004788:	601a      	str	r2, [r3, #0]
  return result;
 800478a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800478e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004792:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d102      	bne.n	80047ae <HAL_RCC_OscConfig+0xf8a>
 80047a8:	4b47      	ldr	r3, [pc, #284]	@ (80048c8 <HAL_RCC_OscConfig+0x10a4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	e027      	b.n	80047fe <HAL_RCC_OscConfig+0xfda>
 80047ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047b2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80047b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047c0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	fa93 f2a3 	rbit	r2, r3
 80047ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80047dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	fa93 f2a3 	rbit	r2, r3
 80047f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047f4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	4b33      	ldr	r3, [pc, #204]	@ (80048c8 <HAL_RCC_OscConfig+0x10a4>)
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004802:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004806:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800480a:	6011      	str	r1, [r2, #0]
 800480c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004810:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	fa92 f1a2 	rbit	r1, r2
 800481a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800481e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004822:	6011      	str	r1, [r2, #0]
  return result;
 8004824:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004828:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	fab2 f282 	clz	r2, r2
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	f042 0220 	orr.w	r2, r2, #32
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	f002 021f 	and.w	r2, r2, #31
 800483e:	2101      	movs	r1, #1
 8004840:	fa01 f202 	lsl.w	r2, r1, r2
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d182      	bne.n	8004750 <HAL_RCC_OscConfig+0xf2c>
 800484a:	e037      	b.n	80048bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004850:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e02e      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004860:	4b19      	ldr	r3, [pc, #100]	@ (80048c8 <HAL_RCC_OscConfig+0x10a4>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004868:	4b17      	ldr	r3, [pc, #92]	@ (80048c8 <HAL_RCC_OscConfig+0x10a4>)
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004870:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004874:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800487c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	429a      	cmp	r2, r3
 8004886:	d117      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004888:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800488c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004894:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800489c:	429a      	cmp	r2, r3
 800489e:	d10b      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80048a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000

080048cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b09e      	sub	sp, #120	@ 0x78
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e162      	b.n	8004baa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b90      	ldr	r3, [pc, #576]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d910      	bls.n	8004914 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 0207 	bic.w	r2, r3, #7
 80048fa:	498b      	ldr	r1, [pc, #556]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b89      	ldr	r3, [pc, #548]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e14a      	b.n	8004baa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004920:	4b82      	ldr	r3, [pc, #520]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	497f      	ldr	r1, [pc, #508]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80dc 	beq.w	8004af8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d13c      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xf6>
 8004948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800494c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004958:	fab3 f383 	clz	r3, r3
 800495c:	b2db      	uxtb	r3, r3
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d102      	bne.n	8004972 <HAL_RCC_ClockConfig+0xa6>
 800496c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	e00f      	b.n	8004992 <HAL_RCC_ClockConfig+0xc6>
 8004972:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004976:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004984:	663b      	str	r3, [r7, #96]	@ 0x60
 8004986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004988:	fa93 f3a3 	rbit	r3, r3
 800498c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498e:	4b67      	ldr	r3, [pc, #412]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004996:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800499a:	fa92 f2a2 	rbit	r2, r2
 800499e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80049a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049a2:	fab2 f282 	clz	r2, r2
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	f042 0220 	orr.w	r2, r2, #32
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	f002 021f 	and.w	r2, r2, #31
 80049b2:	2101      	movs	r1, #1
 80049b4:	fa01 f202 	lsl.w	r2, r1, r2
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d17b      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0f3      	b.n	8004baa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d13c      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x178>
 80049ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80049d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d102      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x128>
 80049ee:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	e00f      	b.n	8004a14 <HAL_RCC_ClockConfig+0x148>
 80049f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049fc:	fa93 f3a3 	rbit	r3, r3
 8004a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a10:	4b46      	ldr	r3, [pc, #280]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a18:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a1c:	fa92 f2a2 	rbit	r2, r2
 8004a20:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004a22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a24:	fab2 f282 	clz	r2, r2
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	f042 0220 	orr.w	r2, r2, #32
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	f002 021f 	and.w	r2, r2, #31
 8004a34:	2101      	movs	r1, #1
 8004a36:	fa01 f202 	lsl.w	r2, r1, r2
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d13a      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0b2      	b.n	8004baa <HAL_RCC_ClockConfig+0x2de>
 8004a44:	2302      	movs	r3, #2
 8004a46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d102      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x1a0>
 8004a66:	4b31      	ldr	r3, [pc, #196]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	e00d      	b.n	8004a88 <HAL_RCC_ClockConfig+0x1bc>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	fa93 f3a3 	rbit	r3, r3
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a78:	2302      	movs	r3, #2
 8004a7a:	623b      	str	r3, [r7, #32]
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	4b29      	ldr	r3, [pc, #164]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	2202      	movs	r2, #2
 8004a8a:	61ba      	str	r2, [r7, #24]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	fa92 f2a2 	rbit	r2, r2
 8004a92:	617a      	str	r2, [r7, #20]
  return result;
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	fab2 f282 	clz	r2, r2
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	f042 0220 	orr.w	r2, r2, #32
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	f002 021f 	and.w	r2, r2, #31
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e079      	b.n	8004baa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f023 0203 	bic.w	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	491a      	ldr	r1, [pc, #104]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac8:	f7fd fb24 	bl	8002114 <HAL_GetTick>
 8004acc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad0:	f7fd fb20 	bl	8002114 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e061      	b.n	8004baa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	4b11      	ldr	r3, [pc, #68]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 020c 	and.w	r2, r3, #12
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d1eb      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d214      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 0207 	bic.w	r2, r3, #7
 8004b0e:	4906      	ldr	r1, [pc, #24]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b04      	ldr	r3, [pc, #16]	@ (8004b28 <HAL_RCC_ClockConfig+0x25c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e040      	b.n	8004baa <HAL_RCC_ClockConfig+0x2de>
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	491a      	ldr	r1, [pc, #104]	@ (8004bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5a:	4b16      	ldr	r3, [pc, #88]	@ (8004bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4912      	ldr	r1, [pc, #72]	@ (8004bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b6e:	f000 f829 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004b72:	4601      	mov	r1, r0
 8004b74:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb4 <HAL_RCC_ClockConfig+0x2e8>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b7c:	22f0      	movs	r2, #240	@ 0xf0
 8004b7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	fa92 f2a2 	rbit	r2, r2
 8004b86:	60fa      	str	r2, [r7, #12]
  return result;
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	fab2 f282 	clz	r2, r2
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	40d3      	lsrs	r3, r2
 8004b92:	4a09      	ldr	r2, [pc, #36]	@ (8004bb8 <HAL_RCC_ClockConfig+0x2ec>)
 8004b94:	5cd3      	ldrb	r3, [r2, r3]
 8004b96:	fa21 f303 	lsr.w	r3, r1, r3
 8004b9a:	4a08      	ldr	r2, [pc, #32]	@ (8004bbc <HAL_RCC_ClockConfig+0x2f0>)
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b9e:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <HAL_RCC_ClockConfig+0x2f4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc ff2a 	bl	80019fc <HAL_InitTick>
  
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3778      	adds	r7, #120	@ 0x78
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	0800a7cc 	.word	0x0800a7cc
 8004bbc:	20000004 	.word	0x20000004
 8004bc0:	20000008 	.word	0x20000008

08004bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b08b      	sub	sp, #44	@ 0x2c
 8004bc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004bde:	4b2a      	ldr	r3, [pc, #168]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d002      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x36>
 8004bf2:	e03f      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bf4:	4b25      	ldr	r3, [pc, #148]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004bf6:	623b      	str	r3, [r7, #32]
      break;
 8004bf8:	e03f      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004c00:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004c04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	fa92 f2a2 	rbit	r2, r2
 8004c0c:	607a      	str	r2, [r7, #4]
  return result;
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	fab2 f282 	clz	r2, r2
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	40d3      	lsrs	r3, r2
 8004c18:	4a1d      	ldr	r2, [pc, #116]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	220f      	movs	r2, #15
 8004c28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	fa92 f2a2 	rbit	r2, r2
 8004c30:	60fa      	str	r2, [r7, #12]
  return result;
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	fab2 f282 	clz	r2, r2
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	40d3      	lsrs	r3, r2
 8004c3c:	4a15      	ldr	r2, [pc, #84]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5c:	e007      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	623b      	str	r3, [r7, #32]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c76:	623b      	str	r3, [r7, #32]
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	372c      	adds	r7, #44	@ 0x2c
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	007a1200 	.word	0x007a1200
 8004c90:	0800a7e4 	.word	0x0800a7e4
 8004c94:	0800a7f4 	.word	0x0800a7f4

08004c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000004 	.word	0x20000004

08004cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cb6:	f7ff ffef 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cba:	4601      	mov	r1, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cc4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004cc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	fa92 f2a2 	rbit	r2, r2
 8004cd0:	603a      	str	r2, [r7, #0]
  return result;
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	fab2 f282 	clz	r2, r2
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	40d3      	lsrs	r3, r2
 8004cdc:	4a04      	ldr	r2, [pc, #16]	@ (8004cf0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004cde:	5cd3      	ldrb	r3, [r2, r3]
 8004ce0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	0800a7dc 	.word	0x0800a7dc

08004cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004cfa:	f7ff ffcd 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cfe:	4601      	mov	r1, r0
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d08:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	fa92 f2a2 	rbit	r2, r2
 8004d14:	603a      	str	r2, [r7, #0]
  return result;
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	40d3      	lsrs	r3, r2
 8004d20:	4a04      	ldr	r2, [pc, #16]	@ (8004d34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d22:	5cd3      	ldrb	r3, [r2, r3]
 8004d24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40021000 	.word	0x40021000
 8004d34:	0800a7dc 	.word	0x0800a7dc

08004d38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	220f      	movs	r2, #15
 8004d46:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d48:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0203 	and.w	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004d54:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004d60:	4b0c      	ldr	r3, [pc, #48]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d6c:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <HAL_RCC_GetClockConfig+0x60>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0207 	and.w	r2, r3, #7
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40022000 	.word	0x40022000

08004d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b092      	sub	sp, #72	@ 0x48
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80d4 	beq.w	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc0:	4b4e      	ldr	r3, [pc, #312]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10e      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	61d3      	str	r3, [r2, #28]
 8004dd8:	4b48      	ldr	r3, [pc, #288]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dea:	4b45      	ldr	r3, [pc, #276]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d118      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df6:	4b42      	ldr	r3, [pc, #264]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a41      	ldr	r2, [pc, #260]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e02:	f7fd f987 	bl	8002114 <HAL_GetTick>
 8004e06:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e08:	e008      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0a:	f7fd f983 	bl	8002114 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b64      	cmp	r3, #100	@ 0x64
 8004e16:	d901      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1d6      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1c:	4b38      	ldr	r3, [pc, #224]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e28:	4b34      	ldr	r3, [pc, #208]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8084 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d07c      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e48:	4b2c      	ldr	r3, [pc, #176]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b26      	ldr	r3, [pc, #152]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	461a      	mov	r2, r3
 8004e72:	2301      	movs	r3, #1
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e86:	fab3 f383 	clz	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	461a      	mov	r2, r3
 8004e96:	2300      	movs	r3, #0
 8004e98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e9a:	4a18      	ldr	r2, [pc, #96]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d04b      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd f933 	bl	8002114 <HAL_GetTick>
 8004eae:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd f92f 	bl	8002114 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e180      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	fa93 f3a3 	rbit	r3, r3
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	623b      	str	r3, [r7, #32]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	fa93 f3a3 	rbit	r3, r3
 8004ede:	61fb      	str	r3, [r7, #28]
  return result;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	fab3 f383 	clz	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d108      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004ef6:	4b01      	ldr	r3, [pc, #4]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	e00d      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40007000 	.word	0x40007000
 8004f04:	10908100 	.word	0x10908100
 8004f08:	2302      	movs	r3, #2
 8004f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	4b9a      	ldr	r3, [pc, #616]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	2202      	movs	r2, #2
 8004f1a:	613a      	str	r2, [r7, #16]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	fa92 f2a2 	rbit	r2, r2
 8004f22:	60fa      	str	r2, [r7, #12]
  return result;
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	fab2 f282 	clz	r2, r2
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	f002 021f 	and.w	r2, r2, #31
 8004f36:	2101      	movs	r1, #1
 8004f38:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0b7      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f42:	4b8f      	ldr	r3, [pc, #572]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	498c      	ldr	r1, [pc, #560]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5c:	4b88      	ldr	r3, [pc, #544]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4a87      	ldr	r2, [pc, #540]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f74:	4b82      	ldr	r3, [pc, #520]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	f023 0203 	bic.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	497f      	ldr	r1, [pc, #508]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f92:	4b7b      	ldr	r3, [pc, #492]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	4978      	ldr	r1, [pc, #480]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fb0:	4b73      	ldr	r3, [pc, #460]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	4970      	ldr	r1, [pc, #448]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d008      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fce:	4b6c      	ldr	r3, [pc, #432]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	f023 0210 	bic.w	r2, r3, #16
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4969      	ldr	r1, [pc, #420]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004fec:	4b64      	ldr	r3, [pc, #400]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	4961      	ldr	r1, [pc, #388]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800500a:	4b5d      	ldr	r3, [pc, #372]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	f023 0220 	bic.w	r2, r3, #32
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	495a      	ldr	r1, [pc, #360]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005018:	4313      	orrs	r3, r2
 800501a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005028:	4b55      	ldr	r3, [pc, #340]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	4952      	ldr	r1, [pc, #328]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005046:	4b4e      	ldr	r3, [pc, #312]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	494b      	ldr	r1, [pc, #300]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005064:	4b46      	ldr	r3, [pc, #280]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	4943      	ldr	r1, [pc, #268]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005082:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	493c      	ldr	r1, [pc, #240]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050a0:	4b37      	ldr	r3, [pc, #220]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	4934      	ldr	r1, [pc, #208]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80050be:	4b30      	ldr	r3, [pc, #192]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	492d      	ldr	r1, [pc, #180]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050dc:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e8:	4925      	ldr	r1, [pc, #148]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80050fa:	4b21      	ldr	r3, [pc, #132]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	491e      	ldr	r1, [pc, #120]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005108:	4313      	orrs	r3, r2
 800510a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005124:	4916      	ldr	r1, [pc, #88]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005126:	4313      	orrs	r3, r2
 8005128:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005136:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	490f      	ldr	r1, [pc, #60]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005154:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005160:	4907      	ldr	r1, [pc, #28]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005172:	4b03      	ldr	r3, [pc, #12]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005176:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	e002      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000
 8005184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005186:	4913      	ldr	r1, [pc, #76]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005188:	4313      	orrs	r3, r2
 800518a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005198:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a4:	490b      	ldr	r1, [pc, #44]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80051b6:	4b07      	ldr	r3, [pc, #28]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ba:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c2:	4904      	ldr	r1, [pc, #16]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3748      	adds	r7, #72	@ 0x48
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000

080051d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e049      	b.n	800527e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fc fdac 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 ffbc 	bl	8006194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e04f      	b.n	8005340 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a23      	ldr	r2, [pc, #140]	@ (800534c <HAL_TIM_Base_Start_IT+0xc4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x76>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ca:	d018      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x76>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005350 <HAL_TIM_Base_Start_IT+0xc8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x76>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1e      	ldr	r2, [pc, #120]	@ (8005354 <HAL_TIM_Base_Start_IT+0xcc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x76>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005358 <HAL_TIM_Base_Start_IT+0xd0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x76>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <HAL_TIM_Base_Start_IT+0xd4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x76>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <HAL_TIM_Base_Start_IT+0xd8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d115      	bne.n	800532a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	4b17      	ldr	r3, [pc, #92]	@ (8005364 <HAL_TIM_Base_Start_IT+0xdc>)
 8005306:	4013      	ands	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d015      	beq.n	800533c <HAL_TIM_Base_Start_IT+0xb4>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005316:	d011      	beq.n	800533c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	e008      	b.n	800533c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e000      	b.n	800533e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40013400 	.word	0x40013400
 800535c:	40014000 	.word	0x40014000
 8005360:	40015000 	.word	0x40015000
 8005364:	00010007 	.word	0x00010007

08005368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e049      	b.n	800540e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f841 	bl	8005416 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f000 fef4 	bl	8006194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_TIM_PWM_Start+0x24>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e03c      	b.n	80054ca <HAL_TIM_PWM_Start+0x9e>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d109      	bne.n	800546a <HAL_TIM_PWM_Start+0x3e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e02f      	b.n	80054ca <HAL_TIM_PWM_Start+0x9e>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d109      	bne.n	8005484 <HAL_TIM_PWM_Start+0x58>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e022      	b.n	80054ca <HAL_TIM_PWM_Start+0x9e>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b0c      	cmp	r3, #12
 8005488:	d109      	bne.n	800549e <HAL_TIM_PWM_Start+0x72>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	e015      	b.n	80054ca <HAL_TIM_PWM_Start+0x9e>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d109      	bne.n	80054b8 <HAL_TIM_PWM_Start+0x8c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e008      	b.n	80054ca <HAL_TIM_PWM_Start+0x9e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e0a1      	b.n	8005616 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_PWM_Start+0xb6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e0:	e023      	b.n	800552a <HAL_TIM_PWM_Start+0xfe>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Start+0xc6>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f0:	e01b      	b.n	800552a <HAL_TIM_PWM_Start+0xfe>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Start+0xd6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005500:	e013      	b.n	800552a <HAL_TIM_PWM_Start+0xfe>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b0c      	cmp	r3, #12
 8005506:	d104      	bne.n	8005512 <HAL_TIM_PWM_Start+0xe6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005510:	e00b      	b.n	800552a <HAL_TIM_PWM_Start+0xfe>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b10      	cmp	r3, #16
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Start+0xf6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005520:	e003      	b.n	800552a <HAL_TIM_PWM_Start+0xfe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f001 fb90 	bl	8006c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a38      	ldr	r2, [pc, #224]	@ (8005620 <HAL_TIM_PWM_Start+0x1f4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <HAL_TIM_PWM_Start+0x148>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a37      	ldr	r2, [pc, #220]	@ (8005624 <HAL_TIM_PWM_Start+0x1f8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <HAL_TIM_PWM_Start+0x148>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a35      	ldr	r2, [pc, #212]	@ (8005628 <HAL_TIM_PWM_Start+0x1fc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_TIM_PWM_Start+0x148>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a34      	ldr	r2, [pc, #208]	@ (800562c <HAL_TIM_PWM_Start+0x200>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_TIM_PWM_Start+0x148>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a32      	ldr	r2, [pc, #200]	@ (8005630 <HAL_TIM_PWM_Start+0x204>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_PWM_Start+0x148>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a31      	ldr	r2, [pc, #196]	@ (8005634 <HAL_TIM_PWM_Start+0x208>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_TIM_PWM_Start+0x14c>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <HAL_TIM_PWM_Start+0x14e>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a23      	ldr	r2, [pc, #140]	@ (8005620 <HAL_TIM_PWM_Start+0x1f4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d01d      	beq.n	80055d4 <HAL_TIM_PWM_Start+0x1a8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a0:	d018      	beq.n	80055d4 <HAL_TIM_PWM_Start+0x1a8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a24      	ldr	r2, [pc, #144]	@ (8005638 <HAL_TIM_PWM_Start+0x20c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_TIM_PWM_Start+0x1a8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a22      	ldr	r2, [pc, #136]	@ (800563c <HAL_TIM_PWM_Start+0x210>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00e      	beq.n	80055d4 <HAL_TIM_PWM_Start+0x1a8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005624 <HAL_TIM_PWM_Start+0x1f8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_TIM_PWM_Start+0x1a8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <HAL_TIM_PWM_Start+0x1fc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_PWM_Start+0x1a8>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a19      	ldr	r2, [pc, #100]	@ (8005634 <HAL_TIM_PWM_Start+0x208>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d115      	bne.n	8005600 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	4b19      	ldr	r3, [pc, #100]	@ (8005640 <HAL_TIM_PWM_Start+0x214>)
 80055dc:	4013      	ands	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d015      	beq.n	8005612 <HAL_TIM_PWM_Start+0x1e6>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ec:	d011      	beq.n	8005612 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	e008      	b.n	8005612 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e000      	b.n	8005614 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800
 8005634:	40015000 	.word	0x40015000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	00010007 	.word	0x00010007

08005644 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e049      	b.n	80056ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f841 	bl	80056f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f000 fd86 	bl	8006194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start_IT+0x1e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e023      	b.n	800576e <HAL_TIM_IC_Start_IT+0x66>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d104      	bne.n	8005736 <HAL_TIM_IC_Start_IT+0x2e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005732:	b2db      	uxtb	r3, r3
 8005734:	e01b      	b.n	800576e <HAL_TIM_IC_Start_IT+0x66>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d104      	bne.n	8005746 <HAL_TIM_IC_Start_IT+0x3e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005742:	b2db      	uxtb	r3, r3
 8005744:	e013      	b.n	800576e <HAL_TIM_IC_Start_IT+0x66>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b0c      	cmp	r3, #12
 800574a:	d104      	bne.n	8005756 <HAL_TIM_IC_Start_IT+0x4e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005752:	b2db      	uxtb	r3, r3
 8005754:	e00b      	b.n	800576e <HAL_TIM_IC_Start_IT+0x66>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b10      	cmp	r3, #16
 800575a:	d104      	bne.n	8005766 <HAL_TIM_IC_Start_IT+0x5e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e003      	b.n	800576e <HAL_TIM_IC_Start_IT+0x66>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800576c:	b2db      	uxtb	r3, r3
 800576e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_TIM_IC_Start_IT+0x78>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e013      	b.n	80057a8 <HAL_TIM_IC_Start_IT+0xa0>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d104      	bne.n	8005790 <HAL_TIM_IC_Start_IT+0x88>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e00b      	b.n	80057a8 <HAL_TIM_IC_Start_IT+0xa0>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b08      	cmp	r3, #8
 8005794:	d104      	bne.n	80057a0 <HAL_TIM_IC_Start_IT+0x98>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800579c:	b2db      	uxtb	r3, r3
 800579e:	e003      	b.n	80057a8 <HAL_TIM_IC_Start_IT+0xa0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d102      	bne.n	80057b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80057b0:	7b7b      	ldrb	r3, [r7, #13]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d001      	beq.n	80057ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e0dd      	b.n	8005976 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start_IT+0xc2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c8:	e023      	b.n	8005812 <HAL_TIM_IC_Start_IT+0x10a>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start_IT+0xd2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d8:	e01b      	b.n	8005812 <HAL_TIM_IC_Start_IT+0x10a>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start_IT+0xe2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e8:	e013      	b.n	8005812 <HAL_TIM_IC_Start_IT+0x10a>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_IC_Start_IT+0xf2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057f8:	e00b      	b.n	8005812 <HAL_TIM_IC_Start_IT+0x10a>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d104      	bne.n	800580a <HAL_TIM_IC_Start_IT+0x102>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005808:	e003      	b.n	8005812 <HAL_TIM_IC_Start_IT+0x10a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_TIM_IC_Start_IT+0x11a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005820:	e013      	b.n	800584a <HAL_TIM_IC_Start_IT+0x142>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d104      	bne.n	8005832 <HAL_TIM_IC_Start_IT+0x12a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005830:	e00b      	b.n	800584a <HAL_TIM_IC_Start_IT+0x142>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d104      	bne.n	8005842 <HAL_TIM_IC_Start_IT+0x13a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005840:	e003      	b.n	800584a <HAL_TIM_IC_Start_IT+0x142>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d841      	bhi.n	80058d4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005850:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <HAL_TIM_IC_Start_IT+0x150>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800588d 	.word	0x0800588d
 800585c:	080058d5 	.word	0x080058d5
 8005860:	080058d5 	.word	0x080058d5
 8005864:	080058d5 	.word	0x080058d5
 8005868:	0800589f 	.word	0x0800589f
 800586c:	080058d5 	.word	0x080058d5
 8005870:	080058d5 	.word	0x080058d5
 8005874:	080058d5 	.word	0x080058d5
 8005878:	080058b1 	.word	0x080058b1
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058d5 	.word	0x080058d5
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058c3 	.word	0x080058c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0202 	orr.w	r2, r2, #2
 800589a:	60da      	str	r2, [r3, #12]
      break;
 800589c:	e01d      	b.n	80058da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0204 	orr.w	r2, r2, #4
 80058ac:	60da      	str	r2, [r3, #12]
      break;
 80058ae:	e014      	b.n	80058da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	60da      	str	r2, [r3, #12]
      break;
 80058c0:	e00b      	b.n	80058da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0210 	orr.w	r2, r2, #16
 80058d0:	60da      	str	r2, [r3, #12]
      break;
 80058d2:	e002      	b.n	80058da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      break;
 80058d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d149      	bne.n	8005974 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2201      	movs	r2, #1
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 f9b5 	bl	8006c58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a23      	ldr	r2, [pc, #140]	@ (8005980 <HAL_TIM_IC_Start_IT+0x278>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d01d      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x22c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005900:	d018      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x22c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1f      	ldr	r2, [pc, #124]	@ (8005984 <HAL_TIM_IC_Start_IT+0x27c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x22c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1d      	ldr	r2, [pc, #116]	@ (8005988 <HAL_TIM_IC_Start_IT+0x280>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x22c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1c      	ldr	r2, [pc, #112]	@ (800598c <HAL_TIM_IC_Start_IT+0x284>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x22c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1a      	ldr	r2, [pc, #104]	@ (8005990 <HAL_TIM_IC_Start_IT+0x288>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x22c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <HAL_TIM_IC_Start_IT+0x28c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d115      	bne.n	8005960 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	4b17      	ldr	r3, [pc, #92]	@ (8005998 <HAL_TIM_IC_Start_IT+0x290>)
 800593c:	4013      	ands	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b06      	cmp	r3, #6
 8005944:	d015      	beq.n	8005972 <HAL_TIM_IC_Start_IT+0x26a>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d011      	beq.n	8005972 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0201 	orr.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595e:	e008      	b.n	8005972 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e000      	b.n	8005974 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005972:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40013400 	.word	0x40013400
 8005990:	40014000 	.word	0x40014000
 8005994:	40015000 	.word	0x40015000
 8005998:	00010007 	.word	0x00010007

0800599c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d122      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d11b      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0202 	mvn.w	r2, #2
 80059c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb f862 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fbb6 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fbbd 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d122      	bne.n	8005a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d11b      	bne.n	8005a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0204 	mvn.w	r2, #4
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fb f838 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fb8c 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fb93 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d122      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d11b      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0208 	mvn.w	r2, #8
 8005a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2204      	movs	r2, #4
 8005a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fb f80e 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8005a8c:	e005      	b.n	8005a9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fb62 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fb69 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d122      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d11b      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0210 	mvn.w	r2, #16
 8005ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fa ffe4 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fb38 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb3f 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d10e      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d107      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0201 	mvn.w	r2, #1
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fb fe5e 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2a:	2b80      	cmp	r3, #128	@ 0x80
 8005b2c:	d10e      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b38:	2b80      	cmp	r3, #128	@ 0x80
 8005b3a:	d107      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 f942 	bl	8006dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5a:	d10e      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b66:	2b80      	cmp	r3, #128	@ 0x80
 8005b68:	d107      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 f935 	bl	8006de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d10e      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b40      	cmp	r3, #64	@ 0x40
 8005b94:	d107      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 faed 	bl	8006180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f06f 0220 	mvn.w	r2, #32
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 f8f5 	bl	8006dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e088      	b.n	8005d0a <HAL_TIM_IC_ConfigChannel+0x130>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11b      	bne.n	8005c3e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c16:	f000 fe61 	bl	80068dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 020c 	bic.w	r2, r2, #12
 8005c28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6999      	ldr	r1, [r3, #24]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	619a      	str	r2, [r3, #24]
 8005c3c:	e060      	b.n	8005d00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d11c      	bne.n	8005c7e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c54:	f000 fedf 	bl	8006a16 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6999      	ldr	r1, [r3, #24]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	619a      	str	r2, [r3, #24]
 8005c7c:	e040      	b.n	8005d00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d11b      	bne.n	8005cbc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c94:	f000 ff2c 	bl	8006af0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 020c 	bic.w	r2, r2, #12
 8005ca6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69d9      	ldr	r1, [r3, #28]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	61da      	str	r2, [r3, #28]
 8005cba:	e021      	b.n	8005d00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b0c      	cmp	r3, #12
 8005cc0:	d11c      	bne.n	8005cfc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005cd2:	f000 ff49 	bl	8006b68 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ce4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69d9      	ldr	r1, [r3, #28]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	021a      	lsls	r2, r3, #8
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	61da      	str	r2, [r3, #28]
 8005cfa:	e001      	b.n	8005d00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0ff      	b.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b14      	cmp	r3, #20
 8005d3e:	f200 80f0 	bhi.w	8005f22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005f23 	.word	0x08005f23
 8005d50:	08005f23 	.word	0x08005f23
 8005d54:	08005f23 	.word	0x08005f23
 8005d58:	08005ddd 	.word	0x08005ddd
 8005d5c:	08005f23 	.word	0x08005f23
 8005d60:	08005f23 	.word	0x08005f23
 8005d64:	08005f23 	.word	0x08005f23
 8005d68:	08005e1f 	.word	0x08005e1f
 8005d6c:	08005f23 	.word	0x08005f23
 8005d70:	08005f23 	.word	0x08005f23
 8005d74:	08005f23 	.word	0x08005f23
 8005d78:	08005e5f 	.word	0x08005e5f
 8005d7c:	08005f23 	.word	0x08005f23
 8005d80:	08005f23 	.word	0x08005f23
 8005d84:	08005f23 	.word	0x08005f23
 8005d88:	08005ea1 	.word	0x08005ea1
 8005d8c:	08005f23 	.word	0x08005f23
 8005d90:	08005f23 	.word	0x08005f23
 8005d94:	08005f23 	.word	0x08005f23
 8005d98:	08005ee1 	.word	0x08005ee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fa94 	bl	80062d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0208 	orr.w	r2, r2, #8
 8005db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0204 	bic.w	r2, r2, #4
 8005dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6999      	ldr	r1, [r3, #24]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	619a      	str	r2, [r3, #24]
      break;
 8005dda:	e0a5      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fb0e 	bl	8006404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6999      	ldr	r1, [r3, #24]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	021a      	lsls	r2, r3, #8
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	619a      	str	r2, [r3, #24]
      break;
 8005e1c:	e084      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fb81 	bl	800652c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0208 	orr.w	r2, r2, #8
 8005e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0204 	bic.w	r2, r2, #4
 8005e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69d9      	ldr	r1, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	61da      	str	r2, [r3, #28]
      break;
 8005e5c:	e064      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fbf3 	bl	8006650 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69d9      	ldr	r1, [r3, #28]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	021a      	lsls	r2, r3, #8
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	61da      	str	r2, [r3, #28]
      break;
 8005e9e:	e043      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fc42 	bl	8006730 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0208 	orr.w	r2, r2, #8
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0204 	bic.w	r2, r2, #4
 8005eca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ede:	e023      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fc8c 	bl	8006804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	021a      	lsls	r2, r3, #8
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f20:	e002      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
      break;
 8005f26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop

08005f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_TIM_ConfigClockSource+0x1c>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e0b6      	b.n	80060c6 <HAL_TIM_ConfigClockSource+0x18a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f94:	d03e      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0xd8>
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9a:	f200 8087 	bhi.w	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa2:	f000 8086 	beq.w	80060b2 <HAL_TIM_ConfigClockSource+0x176>
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005faa:	d87f      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005fac:	2b70      	cmp	r3, #112	@ 0x70
 8005fae:	d01a      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0xaa>
 8005fb0:	2b70      	cmp	r3, #112	@ 0x70
 8005fb2:	d87b      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005fb4:	2b60      	cmp	r3, #96	@ 0x60
 8005fb6:	d050      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x11e>
 8005fb8:	2b60      	cmp	r3, #96	@ 0x60
 8005fba:	d877      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005fbc:	2b50      	cmp	r3, #80	@ 0x50
 8005fbe:	d03c      	beq.n	800603a <HAL_TIM_ConfigClockSource+0xfe>
 8005fc0:	2b50      	cmp	r3, #80	@ 0x50
 8005fc2:	d873      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005fc4:	2b40      	cmp	r3, #64	@ 0x40
 8005fc6:	d058      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x13e>
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	d86f      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005fcc:	2b30      	cmp	r3, #48	@ 0x30
 8005fce:	d064      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x15e>
 8005fd0:	2b30      	cmp	r3, #48	@ 0x30
 8005fd2:	d86b      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d060      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x15e>
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d867      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05c      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x15e>
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d05a      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x15e>
 8005fe4:	e062      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff6:	f000 fe0f 	bl	8006c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	609a      	str	r2, [r3, #8]
      break;
 8006012:	e04f      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006024:	f000 fdf8 	bl	8006c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006036:	609a      	str	r2, [r3, #8]
      break;
 8006038:	e03c      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fcb6 	bl	80069b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2150      	movs	r1, #80	@ 0x50
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fdc5 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 8006058:	e02c      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006066:	461a      	mov	r2, r3
 8006068:	f000 fd12 	bl	8006a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2160      	movs	r1, #96	@ 0x60
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fdb5 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 8006078:	e01c      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006086:	461a      	mov	r2, r3
 8006088:	f000 fc96 	bl	80069b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2140      	movs	r1, #64	@ 0x40
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fda5 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 8006098:	e00c      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f000 fd9c 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 80060aa:	e003      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
      break;
 80060b0:	e000      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	d831      	bhi.n	8006148 <HAL_TIM_ReadCapturedValue+0x78>
 80060e4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006149 	.word	0x08006149
 80060f4:	08006149 	.word	0x08006149
 80060f8:	08006149 	.word	0x08006149
 80060fc:	0800612b 	.word	0x0800612b
 8006100:	08006149 	.word	0x08006149
 8006104:	08006149 	.word	0x08006149
 8006108:	08006149 	.word	0x08006149
 800610c:	08006135 	.word	0x08006135
 8006110:	08006149 	.word	0x08006149
 8006114:	08006149 	.word	0x08006149
 8006118:	08006149 	.word	0x08006149
 800611c:	0800613f 	.word	0x0800613f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006126:	60fb      	str	r3, [r7, #12]

      break;
 8006128:	e00f      	b.n	800614a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006130:	60fb      	str	r3, [r7, #12]

      break;
 8006132:	e00a      	b.n	800614a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613a:	60fb      	str	r3, [r7, #12]

      break;
 800613c:	e005      	b.n	800614a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	60fb      	str	r3, [r7, #12]

      break;
 8006146:	e000      	b.n	800614a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006148:	bf00      	nop
  }

  return tmpreg;
 800614a:	68fb      	ldr	r3, [r7, #12]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a42      	ldr	r2, [pc, #264]	@ (80062b0 <TIM_Base_SetConfig+0x11c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b2:	d00f      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a3f      	ldr	r2, [pc, #252]	@ (80062b4 <TIM_Base_SetConfig+0x120>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a3e      	ldr	r2, [pc, #248]	@ (80062b8 <TIM_Base_SetConfig+0x124>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a3d      	ldr	r2, [pc, #244]	@ (80062bc <TIM_Base_SetConfig+0x128>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a3c      	ldr	r2, [pc, #240]	@ (80062c0 <TIM_Base_SetConfig+0x12c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d108      	bne.n	80061e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a31      	ldr	r2, [pc, #196]	@ (80062b0 <TIM_Base_SetConfig+0x11c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01f      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f4:	d01b      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2e      	ldr	r2, [pc, #184]	@ (80062b4 <TIM_Base_SetConfig+0x120>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d017      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a2d      	ldr	r2, [pc, #180]	@ (80062b8 <TIM_Base_SetConfig+0x124>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2c      	ldr	r2, [pc, #176]	@ (80062bc <TIM_Base_SetConfig+0x128>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00f      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2c      	ldr	r2, [pc, #176]	@ (80062c4 <TIM_Base_SetConfig+0x130>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00b      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2b      	ldr	r2, [pc, #172]	@ (80062c8 <TIM_Base_SetConfig+0x134>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a2a      	ldr	r2, [pc, #168]	@ (80062cc <TIM_Base_SetConfig+0x138>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <TIM_Base_SetConfig+0x9a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a25      	ldr	r2, [pc, #148]	@ (80062c0 <TIM_Base_SetConfig+0x12c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d108      	bne.n	8006240 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a12      	ldr	r2, [pc, #72]	@ (80062b0 <TIM_Base_SetConfig+0x11c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x100>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a13      	ldr	r2, [pc, #76]	@ (80062bc <TIM_Base_SetConfig+0x128>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x100>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a13      	ldr	r2, [pc, #76]	@ (80062c4 <TIM_Base_SetConfig+0x130>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x100>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a12      	ldr	r2, [pc, #72]	@ (80062c8 <TIM_Base_SetConfig+0x134>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x100>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a11      	ldr	r2, [pc, #68]	@ (80062cc <TIM_Base_SetConfig+0x138>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x100>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a0c      	ldr	r2, [pc, #48]	@ (80062c0 <TIM_Base_SetConfig+0x12c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d103      	bne.n	800629c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	615a      	str	r2, [r3, #20]
}
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40000400 	.word	0x40000400
 80062b8:	40000800 	.word	0x40000800
 80062bc:	40013400 	.word	0x40013400
 80062c0:	40015000 	.word	0x40015000
 80062c4:	40014000 	.word	0x40014000
 80062c8:	40014400 	.word	0x40014400
 80062cc:	40014800 	.word	0x40014800

080062d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f023 0201 	bic.w	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0302 	bic.w	r3, r3, #2
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a30      	ldr	r2, [pc, #192]	@ (80063ec <TIM_OC1_SetConfig+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_OC1_SetConfig+0x88>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a2f      	ldr	r2, [pc, #188]	@ (80063f0 <TIM_OC1_SetConfig+0x120>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_OC1_SetConfig+0x88>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a2e      	ldr	r2, [pc, #184]	@ (80063f4 <TIM_OC1_SetConfig+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_OC1_SetConfig+0x88>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a2d      	ldr	r2, [pc, #180]	@ (80063f8 <TIM_OC1_SetConfig+0x128>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_OC1_SetConfig+0x88>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a2c      	ldr	r2, [pc, #176]	@ (80063fc <TIM_OC1_SetConfig+0x12c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC1_SetConfig+0x88>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a2b      	ldr	r2, [pc, #172]	@ (8006400 <TIM_OC1_SetConfig+0x130>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10c      	bne.n	8006372 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0308 	bic.w	r3, r3, #8
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f023 0304 	bic.w	r3, r3, #4
 8006370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a1d      	ldr	r2, [pc, #116]	@ (80063ec <TIM_OC1_SetConfig+0x11c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <TIM_OC1_SetConfig+0xd2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1c      	ldr	r2, [pc, #112]	@ (80063f0 <TIM_OC1_SetConfig+0x120>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00f      	beq.n	80063a2 <TIM_OC1_SetConfig+0xd2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1b      	ldr	r2, [pc, #108]	@ (80063f4 <TIM_OC1_SetConfig+0x124>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_OC1_SetConfig+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a1a      	ldr	r2, [pc, #104]	@ (80063f8 <TIM_OC1_SetConfig+0x128>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_OC1_SetConfig+0xd2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <TIM_OC1_SetConfig+0x12c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_OC1_SetConfig+0xd2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a18      	ldr	r2, [pc, #96]	@ (8006400 <TIM_OC1_SetConfig+0x130>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d111      	bne.n	80063c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	621a      	str	r2, [r3, #32]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40013400 	.word	0x40013400
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800
 8006400:	40015000 	.word	0x40015000

08006404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	f023 0210 	bic.w	r2, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f023 0320 	bic.w	r3, r3, #32
 8006452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2c      	ldr	r2, [pc, #176]	@ (8006514 <TIM_OC2_SetConfig+0x110>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <TIM_OC2_SetConfig+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2b      	ldr	r2, [pc, #172]	@ (8006518 <TIM_OC2_SetConfig+0x114>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_OC2_SetConfig+0x74>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2a      	ldr	r2, [pc, #168]	@ (800651c <TIM_OC2_SetConfig+0x118>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d10d      	bne.n	8006494 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800647e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a1f      	ldr	r2, [pc, #124]	@ (8006514 <TIM_OC2_SetConfig+0x110>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <TIM_OC2_SetConfig+0xc0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a1e      	ldr	r2, [pc, #120]	@ (8006518 <TIM_OC2_SetConfig+0x114>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00f      	beq.n	80064c4 <TIM_OC2_SetConfig+0xc0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006520 <TIM_OC2_SetConfig+0x11c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <TIM_OC2_SetConfig+0xc0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <TIM_OC2_SetConfig+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_OC2_SetConfig+0xc0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006528 <TIM_OC2_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC2_SetConfig+0xc0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a17      	ldr	r2, [pc, #92]	@ (800651c <TIM_OC2_SetConfig+0x118>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d113      	bne.n	80064ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40012c00 	.word	0x40012c00
 8006518:	40013400 	.word	0x40013400
 800651c:	40015000 	.word	0x40015000
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800

0800652c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800655a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2b      	ldr	r2, [pc, #172]	@ (8006638 <TIM_OC3_SetConfig+0x10c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_OC3_SetConfig+0x72>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2a      	ldr	r2, [pc, #168]	@ (800663c <TIM_OC3_SetConfig+0x110>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC3_SetConfig+0x72>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a29      	ldr	r2, [pc, #164]	@ (8006640 <TIM_OC3_SetConfig+0x114>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d10d      	bne.n	80065ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006638 <TIM_OC3_SetConfig+0x10c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <TIM_OC3_SetConfig+0xbe>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1d      	ldr	r2, [pc, #116]	@ (800663c <TIM_OC3_SetConfig+0x110>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00f      	beq.n	80065ea <TIM_OC3_SetConfig+0xbe>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006644 <TIM_OC3_SetConfig+0x118>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00b      	beq.n	80065ea <TIM_OC3_SetConfig+0xbe>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006648 <TIM_OC3_SetConfig+0x11c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d007      	beq.n	80065ea <TIM_OC3_SetConfig+0xbe>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1b      	ldr	r2, [pc, #108]	@ (800664c <TIM_OC3_SetConfig+0x120>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_OC3_SetConfig+0xbe>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a16      	ldr	r2, [pc, #88]	@ (8006640 <TIM_OC3_SetConfig+0x114>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d113      	bne.n	8006612 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	621a      	str	r2, [r3, #32]
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40012c00 	.word	0x40012c00
 800663c:	40013400 	.word	0x40013400
 8006640:	40015000 	.word	0x40015000
 8006644:	40014000 	.word	0x40014000
 8006648:	40014400 	.word	0x40014400
 800664c:	40014800 	.word	0x40014800

08006650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800669e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	031b      	lsls	r3, r3, #12
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006718 <TIM_OC4_SetConfig+0xc8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d013      	beq.n	80066dc <TIM_OC4_SetConfig+0x8c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a19      	ldr	r2, [pc, #100]	@ (800671c <TIM_OC4_SetConfig+0xcc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00f      	beq.n	80066dc <TIM_OC4_SetConfig+0x8c>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a18      	ldr	r2, [pc, #96]	@ (8006720 <TIM_OC4_SetConfig+0xd0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00b      	beq.n	80066dc <TIM_OC4_SetConfig+0x8c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a17      	ldr	r2, [pc, #92]	@ (8006724 <TIM_OC4_SetConfig+0xd4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d007      	beq.n	80066dc <TIM_OC4_SetConfig+0x8c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a16      	ldr	r2, [pc, #88]	@ (8006728 <TIM_OC4_SetConfig+0xd8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_OC4_SetConfig+0x8c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a15      	ldr	r2, [pc, #84]	@ (800672c <TIM_OC4_SetConfig+0xdc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d109      	bne.n	80066f0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40013400 	.word	0x40013400
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400
 8006728:	40014800 	.word	0x40014800
 800672c:	40015000 	.word	0x40015000

08006730 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006774:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a19      	ldr	r2, [pc, #100]	@ (80067ec <TIM_OC5_SetConfig+0xbc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <TIM_OC5_SetConfig+0x82>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <TIM_OC5_SetConfig+0xc0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_OC5_SetConfig+0x82>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a17      	ldr	r2, [pc, #92]	@ (80067f4 <TIM_OC5_SetConfig+0xc4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_OC5_SetConfig+0x82>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a16      	ldr	r2, [pc, #88]	@ (80067f8 <TIM_OC5_SetConfig+0xc8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_OC5_SetConfig+0x82>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <TIM_OC5_SetConfig+0xcc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC5_SetConfig+0x82>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a14      	ldr	r2, [pc, #80]	@ (8006800 <TIM_OC5_SetConfig+0xd0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d109      	bne.n	80067c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	621a      	str	r2, [r3, #32]
}
 80067e0:	bf00      	nop
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40013400 	.word	0x40013400
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800
 8006800:	40015000 	.word	0x40015000

08006804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800684a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	051b      	lsls	r3, r3, #20
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a1a      	ldr	r2, [pc, #104]	@ (80068c4 <TIM_OC6_SetConfig+0xc0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <TIM_OC6_SetConfig+0x84>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <TIM_OC6_SetConfig+0xc4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_OC6_SetConfig+0x84>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a18      	ldr	r2, [pc, #96]	@ (80068cc <TIM_OC6_SetConfig+0xc8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_OC6_SetConfig+0x84>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a17      	ldr	r2, [pc, #92]	@ (80068d0 <TIM_OC6_SetConfig+0xcc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_OC6_SetConfig+0x84>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a16      	ldr	r2, [pc, #88]	@ (80068d4 <TIM_OC6_SetConfig+0xd0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC6_SetConfig+0x84>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a15      	ldr	r2, [pc, #84]	@ (80068d8 <TIM_OC6_SetConfig+0xd4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d109      	bne.n	800689c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800688e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	029b      	lsls	r3, r3, #10
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800
 80068d8:	40015000 	.word	0x40015000

080068dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f023 0201 	bic.w	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a26      	ldr	r2, [pc, #152]	@ (80069a0 <TIM_TI1_SetConfig+0xc4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d017      	beq.n	800693a <TIM_TI1_SetConfig+0x5e>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006910:	d013      	beq.n	800693a <TIM_TI1_SetConfig+0x5e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a23      	ldr	r2, [pc, #140]	@ (80069a4 <TIM_TI1_SetConfig+0xc8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00f      	beq.n	800693a <TIM_TI1_SetConfig+0x5e>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a22      	ldr	r2, [pc, #136]	@ (80069a8 <TIM_TI1_SetConfig+0xcc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00b      	beq.n	800693a <TIM_TI1_SetConfig+0x5e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a21      	ldr	r2, [pc, #132]	@ (80069ac <TIM_TI1_SetConfig+0xd0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <TIM_TI1_SetConfig+0x5e>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a20      	ldr	r2, [pc, #128]	@ (80069b0 <TIM_TI1_SetConfig+0xd4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d003      	beq.n	800693a <TIM_TI1_SetConfig+0x5e>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4a1f      	ldr	r2, [pc, #124]	@ (80069b4 <TIM_TI1_SetConfig+0xd8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <TIM_TI1_SetConfig+0x62>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <TIM_TI1_SetConfig+0x64>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e003      	b.n	800695e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	b2db      	uxtb	r3, r3
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f023 030a 	bic.w	r3, r3, #10
 8006978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f003 030a 	and.w	r3, r3, #10
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40012c00 	.word	0x40012c00
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40013400 	.word	0x40013400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40015000 	.word	0x40015000

080069b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f023 0201 	bic.w	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 030a 	bic.w	r3, r3, #10
 80069f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b087      	sub	sp, #28
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f023 0210 	bic.w	r2, r3, #16
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f023 0210 	bic.w	r2, r3, #16
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	031b      	lsls	r3, r3, #12
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	621a      	str	r2, [r3, #32]
}
 8006ae4:	bf00      	nop
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 0303 	bic.w	r3, r3, #3
 8006b1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006b40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	621a      	str	r2, [r3, #32]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ba6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	031b      	lsls	r3, r3, #12
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006bba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f043 0307 	orr.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	021a      	lsls	r2, r3, #8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	401a      	ands	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1a      	ldr	r2, [r3, #32]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e06d      	b.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a30      	ldr	r2, [pc, #192]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a2f      	ldr	r2, [pc, #188]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d108      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d01d      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d38:	d018      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d013      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1a      	ldr	r2, [pc, #104]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00e      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a15      	ldr	r2, [pc, #84]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d009      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a11      	ldr	r2, [pc, #68]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d10c      	bne.n	8006d86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40013400 	.word	0x40013400
 8006dac:	40015000 	.word	0x40015000
 8006db0:	40000400 	.word	0x40000400
 8006db4:	40000800 	.word	0x40000800
 8006db8:	40014000 	.word	0x40014000

08006dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e040      	b.n	8006e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fb f8b2 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2224      	movs	r2, #36	@ 0x24
 8006e24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8f6 	bl	8007028 <UART_SetConfig>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e022      	b.n	8006e8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fabe 	bl	80073d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fb45 	bl	8007514 <UART_CheckIdleState>
 8006e8a:	4603      	mov	r3, r0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	@ 0x28
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	f040 80b6 	bne.w	800701c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <HAL_UART_Receive+0x28>
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0ae      	b.n	800701e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2222      	movs	r2, #34	@ 0x22
 8006ecc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ed6:	f7fb f91d 	bl	8002114 <HAL_GetTick>
 8006eda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef4:	d10e      	bne.n	8006f14 <HAL_UART_Receive+0x80>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d105      	bne.n	8006f0a <HAL_UART_Receive+0x76>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f08:	e02d      	b.n	8006f66 <HAL_UART_Receive+0xd2>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	22ff      	movs	r2, #255	@ 0xff
 8006f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f12:	e028      	b.n	8006f66 <HAL_UART_Receive+0xd2>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10d      	bne.n	8006f38 <HAL_UART_Receive+0xa4>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <HAL_UART_Receive+0x9a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	22ff      	movs	r2, #255	@ 0xff
 8006f28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f2c:	e01b      	b.n	8006f66 <HAL_UART_Receive+0xd2>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	227f      	movs	r2, #127	@ 0x7f
 8006f32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f36:	e016      	b.n	8006f66 <HAL_UART_Receive+0xd2>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f40:	d10d      	bne.n	8006f5e <HAL_UART_Receive+0xca>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <HAL_UART_Receive+0xc0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	227f      	movs	r2, #127	@ 0x7f
 8006f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f52:	e008      	b.n	8006f66 <HAL_UART_Receive+0xd2>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	223f      	movs	r2, #63	@ 0x3f
 8006f58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f5c:	e003      	b.n	8006f66 <HAL_UART_Receive+0xd2>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f6c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f76:	d108      	bne.n	8006f8a <HAL_UART_Receive+0xf6>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	e003      	b.n	8006f92 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f92:	e037      	b.n	8007004 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2120      	movs	r1, #32
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fb60 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e033      	b.n	800701e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10c      	bne.n	8006fd6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	8a7b      	ldrh	r3, [r7, #18]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	e00d      	b.n	8006ff2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	8a7b      	ldrh	r3, [r7, #18]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1c1      	bne.n	8006f94 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800701c:	2302      	movs	r3, #2
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	3720      	adds	r7, #32
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b92      	ldr	r3, [pc, #584]	@ (800729c <UART_SetConfig+0x274>)
 8007054:	4013      	ands	r3, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	6979      	ldr	r1, [r7, #20]
 800705c:	430b      	orrs	r3, r1
 800705e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	430a      	orrs	r2, r1
 8007098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a80      	ldr	r2, [pc, #512]	@ (80072a0 <UART_SetConfig+0x278>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d120      	bne.n	80070e6 <UART_SetConfig+0xbe>
 80070a4:	4b7f      	ldr	r3, [pc, #508]	@ (80072a4 <UART_SetConfig+0x27c>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d817      	bhi.n	80070e0 <UART_SetConfig+0xb8>
 80070b0:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <UART_SetConfig+0x90>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	080070d5 	.word	0x080070d5
 80070c0:	080070db 	.word	0x080070db
 80070c4:	080070cf 	.word	0x080070cf
 80070c8:	2301      	movs	r3, #1
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e0b5      	b.n	800723a <UART_SetConfig+0x212>
 80070ce:	2302      	movs	r3, #2
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e0b2      	b.n	800723a <UART_SetConfig+0x212>
 80070d4:	2304      	movs	r3, #4
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e0af      	b.n	800723a <UART_SetConfig+0x212>
 80070da:	2308      	movs	r3, #8
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e0ac      	b.n	800723a <UART_SetConfig+0x212>
 80070e0:	2310      	movs	r3, #16
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e0a9      	b.n	800723a <UART_SetConfig+0x212>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a6f      	ldr	r2, [pc, #444]	@ (80072a8 <UART_SetConfig+0x280>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d124      	bne.n	800713a <UART_SetConfig+0x112>
 80070f0:	4b6c      	ldr	r3, [pc, #432]	@ (80072a4 <UART_SetConfig+0x27c>)
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070fc:	d011      	beq.n	8007122 <UART_SetConfig+0xfa>
 80070fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007102:	d817      	bhi.n	8007134 <UART_SetConfig+0x10c>
 8007104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007108:	d011      	beq.n	800712e <UART_SetConfig+0x106>
 800710a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800710e:	d811      	bhi.n	8007134 <UART_SetConfig+0x10c>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <UART_SetConfig+0xf4>
 8007114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007118:	d006      	beq.n	8007128 <UART_SetConfig+0x100>
 800711a:	e00b      	b.n	8007134 <UART_SetConfig+0x10c>
 800711c:	2300      	movs	r3, #0
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e08b      	b.n	800723a <UART_SetConfig+0x212>
 8007122:	2302      	movs	r3, #2
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e088      	b.n	800723a <UART_SetConfig+0x212>
 8007128:	2304      	movs	r3, #4
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e085      	b.n	800723a <UART_SetConfig+0x212>
 800712e:	2308      	movs	r3, #8
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e082      	b.n	800723a <UART_SetConfig+0x212>
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e07f      	b.n	800723a <UART_SetConfig+0x212>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a5b      	ldr	r2, [pc, #364]	@ (80072ac <UART_SetConfig+0x284>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d124      	bne.n	800718e <UART_SetConfig+0x166>
 8007144:	4b57      	ldr	r3, [pc, #348]	@ (80072a4 <UART_SetConfig+0x27c>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007148:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800714c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007150:	d011      	beq.n	8007176 <UART_SetConfig+0x14e>
 8007152:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007156:	d817      	bhi.n	8007188 <UART_SetConfig+0x160>
 8007158:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800715c:	d011      	beq.n	8007182 <UART_SetConfig+0x15a>
 800715e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007162:	d811      	bhi.n	8007188 <UART_SetConfig+0x160>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <UART_SetConfig+0x148>
 8007168:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800716c:	d006      	beq.n	800717c <UART_SetConfig+0x154>
 800716e:	e00b      	b.n	8007188 <UART_SetConfig+0x160>
 8007170:	2300      	movs	r3, #0
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e061      	b.n	800723a <UART_SetConfig+0x212>
 8007176:	2302      	movs	r3, #2
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e05e      	b.n	800723a <UART_SetConfig+0x212>
 800717c:	2304      	movs	r3, #4
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e05b      	b.n	800723a <UART_SetConfig+0x212>
 8007182:	2308      	movs	r3, #8
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e058      	b.n	800723a <UART_SetConfig+0x212>
 8007188:	2310      	movs	r3, #16
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e055      	b.n	800723a <UART_SetConfig+0x212>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a47      	ldr	r2, [pc, #284]	@ (80072b0 <UART_SetConfig+0x288>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d124      	bne.n	80071e2 <UART_SetConfig+0x1ba>
 8007198:	4b42      	ldr	r3, [pc, #264]	@ (80072a4 <UART_SetConfig+0x27c>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80071a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071a4:	d011      	beq.n	80071ca <UART_SetConfig+0x1a2>
 80071a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071aa:	d817      	bhi.n	80071dc <UART_SetConfig+0x1b4>
 80071ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071b0:	d011      	beq.n	80071d6 <UART_SetConfig+0x1ae>
 80071b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071b6:	d811      	bhi.n	80071dc <UART_SetConfig+0x1b4>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <UART_SetConfig+0x19c>
 80071bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071c0:	d006      	beq.n	80071d0 <UART_SetConfig+0x1a8>
 80071c2:	e00b      	b.n	80071dc <UART_SetConfig+0x1b4>
 80071c4:	2300      	movs	r3, #0
 80071c6:	77fb      	strb	r3, [r7, #31]
 80071c8:	e037      	b.n	800723a <UART_SetConfig+0x212>
 80071ca:	2302      	movs	r3, #2
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e034      	b.n	800723a <UART_SetConfig+0x212>
 80071d0:	2304      	movs	r3, #4
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	e031      	b.n	800723a <UART_SetConfig+0x212>
 80071d6:	2308      	movs	r3, #8
 80071d8:	77fb      	strb	r3, [r7, #31]
 80071da:	e02e      	b.n	800723a <UART_SetConfig+0x212>
 80071dc:	2310      	movs	r3, #16
 80071de:	77fb      	strb	r3, [r7, #31]
 80071e0:	e02b      	b.n	800723a <UART_SetConfig+0x212>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a33      	ldr	r2, [pc, #204]	@ (80072b4 <UART_SetConfig+0x28c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d124      	bne.n	8007236 <UART_SetConfig+0x20e>
 80071ec:	4b2d      	ldr	r3, [pc, #180]	@ (80072a4 <UART_SetConfig+0x27c>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80071f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80071f8:	d011      	beq.n	800721e <UART_SetConfig+0x1f6>
 80071fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80071fe:	d817      	bhi.n	8007230 <UART_SetConfig+0x208>
 8007200:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007204:	d011      	beq.n	800722a <UART_SetConfig+0x202>
 8007206:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800720a:	d811      	bhi.n	8007230 <UART_SetConfig+0x208>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <UART_SetConfig+0x1f0>
 8007210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007214:	d006      	beq.n	8007224 <UART_SetConfig+0x1fc>
 8007216:	e00b      	b.n	8007230 <UART_SetConfig+0x208>
 8007218:	2300      	movs	r3, #0
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e00d      	b.n	800723a <UART_SetConfig+0x212>
 800721e:	2302      	movs	r3, #2
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e00a      	b.n	800723a <UART_SetConfig+0x212>
 8007224:	2304      	movs	r3, #4
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e007      	b.n	800723a <UART_SetConfig+0x212>
 800722a:	2308      	movs	r3, #8
 800722c:	77fb      	strb	r3, [r7, #31]
 800722e:	e004      	b.n	800723a <UART_SetConfig+0x212>
 8007230:	2310      	movs	r3, #16
 8007232:	77fb      	strb	r3, [r7, #31]
 8007234:	e001      	b.n	800723a <UART_SetConfig+0x212>
 8007236:	2310      	movs	r3, #16
 8007238:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007242:	d16b      	bne.n	800731c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007244:	7ffb      	ldrb	r3, [r7, #31]
 8007246:	2b08      	cmp	r3, #8
 8007248:	d838      	bhi.n	80072bc <UART_SetConfig+0x294>
 800724a:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <UART_SetConfig+0x228>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007275 	.word	0x08007275
 8007254:	0800727d 	.word	0x0800727d
 8007258:	08007285 	.word	0x08007285
 800725c:	080072bd 	.word	0x080072bd
 8007260:	0800728b 	.word	0x0800728b
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072bd 	.word	0x080072bd
 800726c:	080072bd 	.word	0x080072bd
 8007270:	08007293 	.word	0x08007293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007274:	f7fd fd1c 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8007278:	61b8      	str	r0, [r7, #24]
        break;
 800727a:	e024      	b.n	80072c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800727c:	f7fd fd3a 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 8007280:	61b8      	str	r0, [r7, #24]
        break;
 8007282:	e020      	b.n	80072c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007284:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <UART_SetConfig+0x290>)
 8007286:	61bb      	str	r3, [r7, #24]
        break;
 8007288:	e01d      	b.n	80072c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728a:	f7fd fc9b 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 800728e:	61b8      	str	r0, [r7, #24]
        break;
 8007290:	e019      	b.n	80072c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007296:	61bb      	str	r3, [r7, #24]
        break;
 8007298:	e015      	b.n	80072c6 <UART_SetConfig+0x29e>
 800729a:	bf00      	nop
 800729c:	efff69f3 	.word	0xefff69f3
 80072a0:	40013800 	.word	0x40013800
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40004400 	.word	0x40004400
 80072ac:	40004800 	.word	0x40004800
 80072b0:	40004c00 	.word	0x40004c00
 80072b4:	40005000 	.word	0x40005000
 80072b8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	77bb      	strb	r3, [r7, #30]
        break;
 80072c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d073      	beq.n	80073b4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	005a      	lsls	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	441a      	add	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b0f      	cmp	r3, #15
 80072e6:	d916      	bls.n	8007316 <UART_SetConfig+0x2ee>
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ee:	d212      	bcs.n	8007316 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f023 030f 	bic.w	r3, r3, #15
 80072f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	b29a      	uxth	r2, r3
 8007306:	89fb      	ldrh	r3, [r7, #14]
 8007308:	4313      	orrs	r3, r2
 800730a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	89fa      	ldrh	r2, [r7, #14]
 8007312:	60da      	str	r2, [r3, #12]
 8007314:	e04e      	b.n	80073b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	77bb      	strb	r3, [r7, #30]
 800731a:	e04b      	b.n	80073b4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800731c:	7ffb      	ldrb	r3, [r7, #31]
 800731e:	2b08      	cmp	r3, #8
 8007320:	d827      	bhi.n	8007372 <UART_SetConfig+0x34a>
 8007322:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <UART_SetConfig+0x300>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	0800734d 	.word	0x0800734d
 800732c:	08007355 	.word	0x08007355
 8007330:	0800735d 	.word	0x0800735d
 8007334:	08007373 	.word	0x08007373
 8007338:	08007363 	.word	0x08007363
 800733c:	08007373 	.word	0x08007373
 8007340:	08007373 	.word	0x08007373
 8007344:	08007373 	.word	0x08007373
 8007348:	0800736b 	.word	0x0800736b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734c:	f7fd fcb0 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8007350:	61b8      	str	r0, [r7, #24]
        break;
 8007352:	e013      	b.n	800737c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007354:	f7fd fcce 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 8007358:	61b8      	str	r0, [r7, #24]
        break;
 800735a:	e00f      	b.n	800737c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800735c:	4b1b      	ldr	r3, [pc, #108]	@ (80073cc <UART_SetConfig+0x3a4>)
 800735e:	61bb      	str	r3, [r7, #24]
        break;
 8007360:	e00c      	b.n	800737c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007362:	f7fd fc2f 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8007366:	61b8      	str	r0, [r7, #24]
        break;
 8007368:	e008      	b.n	800737c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800736e:	61bb      	str	r3, [r7, #24]
        break;
 8007370:	e004      	b.n	800737c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	77bb      	strb	r3, [r7, #30]
        break;
 800737a:	bf00      	nop
    }

    if (pclk != 0U)
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d018      	beq.n	80073b4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	085a      	lsrs	r2, r3, #1
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	441a      	add	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b0f      	cmp	r3, #15
 800739a:	d909      	bls.n	80073b0 <UART_SetConfig+0x388>
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a2:	d205      	bcs.n	80073b0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	e001      	b.n	80073b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80073c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	007a1200 	.word	0x007a1200

080073d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01a      	beq.n	80074e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ce:	d10a      	bne.n	80074e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	605a      	str	r2, [r3, #4]
  }
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b098      	sub	sp, #96	@ 0x60
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007524:	f7fa fdf6 	bl	8002114 <HAL_GetTick>
 8007528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b08      	cmp	r3, #8
 8007536:	d12e      	bne.n	8007596 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007540:	2200      	movs	r2, #0
 8007542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f88c 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d021      	beq.n	8007596 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007566:	653b      	str	r3, [r7, #80]	@ 0x50
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007570:	647b      	str	r3, [r7, #68]	@ 0x44
 8007572:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800757e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e6      	bne.n	8007552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e062      	b.n	800765c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d149      	bne.n	8007638 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f856 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d03c      	beq.n	8007638 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	623b      	str	r3, [r7, #32]
   return(result);
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80075de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3308      	adds	r3, #8
 800760e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007610:	61fa      	str	r2, [r7, #28]
 8007612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	69b9      	ldr	r1, [r7, #24]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	617b      	str	r3, [r7, #20]
   return(result);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e5      	bne.n	80075f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e011      	b.n	800765c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3758      	adds	r7, #88	@ 0x58
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007674:	e049      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d045      	beq.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767e:	f7fa fd49 	bl	8002114 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	429a      	cmp	r2, r3
 800768c:	d302      	bcc.n	8007694 <UART_WaitOnFlagUntilTimeout+0x30>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e048      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d031      	beq.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d110      	bne.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2208      	movs	r2, #8
 80076ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f838 	bl	8007732 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2208      	movs	r2, #8
 80076c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e029      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076e4:	d111      	bne.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f81e 	bl	8007732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e00f      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4013      	ands	r3, r2
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	429a      	cmp	r2, r3
 8007718:	bf0c      	ite	eq
 800771a:	2301      	moveq	r3, #1
 800771c:	2300      	movne	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	429a      	cmp	r2, r3
 8007726:	d0a6      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007732:	b480      	push	{r7}
 8007734:	b095      	sub	sp, #84	@ 0x54
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800774e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007758:	643b      	str	r3, [r7, #64]	@ 0x40
 800775a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800775e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e6      	bne.n	800773a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	61fb      	str	r3, [r7, #28]
   return(result);
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3308      	adds	r3, #8
 800778a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800778c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800778e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e5      	bne.n	800776c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d118      	bne.n	80077da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f023 0310 	bic.w	r3, r3, #16
 80077bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c6:	61bb      	str	r3, [r7, #24]
 80077c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6979      	ldr	r1, [r7, #20]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	613b      	str	r3, [r7, #16]
   return(result);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e6      	bne.n	80077a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077ee:	bf00      	nop
 80077f0:	3754      	adds	r7, #84	@ 0x54
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007802:	f3ef 8305 	mrs	r3, IPSR
 8007806:	60bb      	str	r3, [r7, #8]
  return(result);
 8007808:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10f      	bne.n	800782e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800780e:	f3ef 8310 	mrs	r3, PRIMASK
 8007812:	607b      	str	r3, [r7, #4]
  return(result);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <osKernelInitialize+0x32>
 800781a:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <osKernelInitialize+0x64>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d109      	bne.n	8007836 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007822:	f3ef 8311 	mrs	r3, BASEPRI
 8007826:	603b      	str	r3, [r7, #0]
  return(result);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800782e:	f06f 0305 	mvn.w	r3, #5
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e00c      	b.n	8007850 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <osKernelInitialize+0x64>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800783e:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <osKernelInitialize+0x64>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e002      	b.n	8007850 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800784a:	f04f 33ff 	mov.w	r3, #4294967295
 800784e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007850:	68fb      	ldr	r3, [r7, #12]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	200002ac 	.word	0x200002ac

08007864 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800786a:	f3ef 8305 	mrs	r3, IPSR
 800786e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007870:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10f      	bne.n	8007896 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007876:	f3ef 8310 	mrs	r3, PRIMASK
 800787a:	607b      	str	r3, [r7, #4]
  return(result);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <osKernelStart+0x32>
 8007882:	4b11      	ldr	r3, [pc, #68]	@ (80078c8 <osKernelStart+0x64>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d109      	bne.n	800789e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800788a:	f3ef 8311 	mrs	r3, BASEPRI
 800788e:	603b      	str	r3, [r7, #0]
  return(result);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007896:	f06f 0305 	mvn.w	r3, #5
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e00e      	b.n	80078bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800789e:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <osKernelStart+0x64>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d107      	bne.n	80078b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80078a6:	4b08      	ldr	r3, [pc, #32]	@ (80078c8 <osKernelStart+0x64>)
 80078a8:	2202      	movs	r2, #2
 80078aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80078ac:	f001 fa2e 	bl	8008d0c <vTaskStartScheduler>
      stat = osOK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e002      	b.n	80078bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	200002ac 	.word	0x200002ac

080078cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b092      	sub	sp, #72	@ 0x48
 80078d0:	af04      	add	r7, sp, #16
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078dc:	f3ef 8305 	mrs	r3, IPSR
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 8094 	bne.w	8007a12 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ea:	f3ef 8310 	mrs	r3, PRIMASK
 80078ee:	623b      	str	r3, [r7, #32]
  return(result);
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 808d 	bne.w	8007a12 <osThreadNew+0x146>
 80078f8:	4b48      	ldr	r3, [pc, #288]	@ (8007a1c <osThreadNew+0x150>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d106      	bne.n	800790e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007900:	f3ef 8311 	mrs	r3, BASEPRI
 8007904:	61fb      	str	r3, [r7, #28]
  return(result);
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f040 8082 	bne.w	8007a12 <osThreadNew+0x146>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d07e      	beq.n	8007a12 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007914:	2380      	movs	r3, #128	@ 0x80
 8007916:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007918:	2318      	movs	r3, #24
 800791a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800791c:	2300      	movs	r3, #0
 800791e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007920:	f107 031b 	add.w	r3, r7, #27
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8007926:	f04f 33ff 	mov.w	r3, #4294967295
 800792a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d045      	beq.n	80079be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <osThreadNew+0x74>
        name = attr->name;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d008      	beq.n	8007966 <osThreadNew+0x9a>
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	2b38      	cmp	r3, #56	@ 0x38
 8007958:	d805      	bhi.n	8007966 <osThreadNew+0x9a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <osThreadNew+0x9e>
        return (NULL);
 8007966:	2300      	movs	r3, #0
 8007968:	e054      	b.n	8007a14 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	089b      	lsrs	r3, r3, #2
 8007978:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00e      	beq.n	80079a0 <osThreadNew+0xd4>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b5b      	cmp	r3, #91	@ 0x5b
 8007988:	d90a      	bls.n	80079a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800798e:	2b00      	cmp	r3, #0
 8007990:	d006      	beq.n	80079a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <osThreadNew+0xd4>
        mem = 1;
 800799a:	2301      	movs	r3, #1
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800799e:	e010      	b.n	80079c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <osThreadNew+0xf6>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d108      	bne.n	80079c2 <osThreadNew+0xf6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <osThreadNew+0xf6>
          mem = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079bc:	e001      	b.n	80079c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80079c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d110      	bne.n	80079ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079d0:	9202      	str	r2, [sp, #8]
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 ffc2 	bl	8008968 <xTaskCreateStatic>
 80079e4:	4603      	mov	r3, r0
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e013      	b.n	8007a12 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80079ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d110      	bne.n	8007a12 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f001 f80f 	bl	8008a26 <xTaskCreate>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d001      	beq.n	8007a12 <osThreadNew+0x146>
          hTask = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a12:	697b      	ldr	r3, [r7, #20]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3738      	adds	r7, #56	@ 0x38
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	200002ac 	.word	0x200002ac

08007a20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a28:	f3ef 8305 	mrs	r3, IPSR
 8007a2c:	613b      	str	r3, [r7, #16]
  return(result);
 8007a2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10f      	bne.n	8007a54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a34:	f3ef 8310 	mrs	r3, PRIMASK
 8007a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d109      	bne.n	8007a54 <osDelay+0x34>
 8007a40:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <osDelay+0x58>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d109      	bne.n	8007a5c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a48:	f3ef 8311 	mrs	r3, BASEPRI
 8007a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <osDelay+0x3c>
    stat = osErrorISR;
 8007a54:	f06f 0305 	mvn.w	r3, #5
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e007      	b.n	8007a6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 f91a 	bl	8008ca0 <vTaskDelay>
    }
  }

  return (stat);
 8007a6c:	697b      	ldr	r3, [r7, #20]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200002ac 	.word	0x200002ac

08007a7c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08c      	sub	sp, #48	@ 0x30
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a8c:	f3ef 8305 	mrs	r3, IPSR
 8007a90:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f040 8086 	bne.w	8007ba6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a9e:	617b      	str	r3, [r7, #20]
  return(result);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d17f      	bne.n	8007ba6 <osSemaphoreNew+0x12a>
 8007aa6:	4b42      	ldr	r3, [pc, #264]	@ (8007bb0 <osSemaphoreNew+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d105      	bne.n	8007aba <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aae:	f3ef 8311 	mrs	r3, BASEPRI
 8007ab2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d175      	bne.n	8007ba6 <osSemaphoreNew+0x12a>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d072      	beq.n	8007ba6 <osSemaphoreNew+0x12a>
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d86e      	bhi.n	8007ba6 <osSemaphoreNew+0x12a>
    mem = -1;
 8007ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8007acc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d015      	beq.n	8007b00 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <osSemaphoreNew+0x6e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b4f      	cmp	r3, #79	@ 0x4f
 8007ae2:	d902      	bls.n	8007aea <osSemaphoreNew+0x6e>
        mem = 1;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	623b      	str	r3, [r7, #32]
 8007ae8:	e00c      	b.n	8007b04 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d108      	bne.n	8007b04 <osSemaphoreNew+0x88>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <osSemaphoreNew+0x88>
          mem = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	623b      	str	r3, [r7, #32]
 8007afe:	e001      	b.n	8007b04 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d04c      	beq.n	8007ba6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d128      	bne.n	8007b64 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d10a      	bne.n	8007b2e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	9200      	str	r2, [sp, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	2001      	movs	r0, #1
 8007b26:	f000 f997 	bl	8007e58 <xQueueGenericCreateStatic>
 8007b2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b2c:	e005      	b.n	8007b3a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007b2e:	2203      	movs	r2, #3
 8007b30:	2100      	movs	r1, #0
 8007b32:	2001      	movs	r0, #1
 8007b34:	f000 fa0c 	bl	8007f50 <xQueueGenericCreate>
 8007b38:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d022      	beq.n	8007b86 <osSemaphoreNew+0x10a>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01f      	beq.n	8007b86 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007b46:	2300      	movs	r3, #0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b4e:	f000 facf 	bl	80080f0 <xQueueGenericSend>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d016      	beq.n	8007b86 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007b58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b5a:	f000 fd49 	bl	80085f0 <vQueueDelete>
            hSemaphore = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b62:	e010      	b.n	8007b86 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d108      	bne.n	8007b7c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fa4e 	bl	8008014 <xQueueCreateCountingSemaphoreStatic>
 8007b78:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b7a:	e004      	b.n	8007b86 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 fa81 	bl	8008086 <xQueueCreateCountingSemaphore>
 8007b84:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <osSemaphoreNew+0x11e>
          name = attr->name;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	e001      	b.n	8007b9e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007b9e:	69f9      	ldr	r1, [r7, #28]
 8007ba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ba2:	f000 fe59 	bl	8008858 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3728      	adds	r7, #40	@ 0x28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200002ac 	.word	0x200002ac

08007bb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a07      	ldr	r2, [pc, #28]	@ (8007be0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007bc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4a06      	ldr	r2, [pc, #24]	@ (8007be4 <vApplicationGetIdleTaskMemory+0x30>)
 8007bca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2280      	movs	r2, #128	@ 0x80
 8007bd0:	601a      	str	r2, [r3, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	200002b0 	.word	0x200002b0
 8007be4:	2000030c 	.word	0x2000030c

08007be8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4a07      	ldr	r2, [pc, #28]	@ (8007c14 <vApplicationGetTimerTaskMemory+0x2c>)
 8007bf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4a06      	ldr	r2, [pc, #24]	@ (8007c18 <vApplicationGetTimerTaskMemory+0x30>)
 8007bfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c06:	601a      	str	r2, [r3, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	2000050c 	.word	0x2000050c
 8007c18:	20000568 	.word	0x20000568

08007c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f103 0208 	add.w	r2, r3, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f04f 32ff 	mov.w	r2, #4294967295
 8007c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f103 0208 	add.w	r2, r3, #8
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f103 0208 	add.w	r2, r3, #8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	601a      	str	r2, [r3, #0]
}
 8007cb2:	bf00      	nop
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d103      	bne.n	8007cde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e00c      	b.n	8007cf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e002      	b.n	8007cec <vListInsert+0x2e>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d2f6      	bcs.n	8007ce6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6892      	ldr	r2, [r2, #8]
 8007d46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6852      	ldr	r2, [r2, #4]
 8007d50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d103      	bne.n	8007d64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	1e5a      	subs	r2, r3, #1
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007db0:	f002 f93a 	bl	800a028 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dbc:	68f9      	ldr	r1, [r7, #12]
 8007dbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	441a      	add	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de0:	3b01      	subs	r3, #1
 8007de2:	68f9      	ldr	r1, [r7, #12]
 8007de4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	441a      	add	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	22ff      	movs	r2, #255	@ 0xff
 8007df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	22ff      	movs	r2, #255	@ 0xff
 8007dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d114      	bne.n	8007e30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01a      	beq.n	8007e44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3310      	adds	r3, #16
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fa0e 	bl	8009234 <xTaskRemoveFromEventList>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d012      	beq.n	8007e44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e54 <xQueueGenericReset+0xd0>)
 8007e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	e009      	b.n	8007e44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	3310      	adds	r3, #16
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fef1 	bl	8007c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3324      	adds	r3, #36	@ 0x24
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff feec 	bl	8007c1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e44:	f002 f922 	bl	800a08c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e48:	2301      	movs	r3, #1
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	@ 0x38
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10b      	bne.n	8007e84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	e7fd      	b.n	8007e80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	e7fd      	b.n	8007e9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <xQueueGenericCreateStatic+0x56>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <xQueueGenericCreateStatic+0x5a>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e000      	b.n	8007eb4 <xQueueGenericCreateStatic+0x5c>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	623b      	str	r3, [r7, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d102      	bne.n	8007edc <xQueueGenericCreateStatic+0x84>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <xQueueGenericCreateStatic+0x88>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <xQueueGenericCreateStatic+0x8a>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10b      	bne.n	8007efe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	61fb      	str	r3, [r7, #28]
}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	e7fd      	b.n	8007efa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007efe:	2350      	movs	r3, #80	@ 0x50
 8007f00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b50      	cmp	r3, #80	@ 0x50
 8007f06:	d00b      	beq.n	8007f20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	61bb      	str	r3, [r7, #24]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00d      	beq.n	8007f46 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f32:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f844 	bl	8007fce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3730      	adds	r7, #48	@ 0x30
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10b      	bne.n	8007f7c <xQueueGenericCreate+0x2c>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	613b      	str	r3, [r7, #16]
}
 8007f76:	bf00      	nop
 8007f78:	bf00      	nop
 8007f7a:	e7fd      	b.n	8007f78 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e004      	b.n	8007f92 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	3350      	adds	r3, #80	@ 0x50
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f968 	bl	800a26c <pvPortMalloc>
 8007f9c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	3350      	adds	r3, #80	@ 0x50
 8007fa8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fb2:	79fa      	ldrb	r2, [r7, #7]
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f805 	bl	8007fce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007fc4:	69bb      	ldr	r3, [r7, #24]
	}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	e002      	b.n	8007ff0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	69b8      	ldr	r0, [r7, #24]
 8008000:	f7ff fec0 	bl	8007d84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08a      	sub	sp, #40	@ 0x28
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	61bb      	str	r3, [r7, #24]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	429a      	cmp	r2, r3
 8008044:	d90b      	bls.n	800805e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	617b      	str	r3, [r7, #20]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800805e:	2302      	movs	r3, #2
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	2100      	movs	r1, #0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7ff fef5 	bl	8007e58 <xQueueGenericCreateStatic>
 800806e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800807c:	69fb      	ldr	r3, [r7, #28]
	}
 800807e:	4618      	mov	r0, r3
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	613b      	str	r3, [r7, #16]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d90b      	bls.n	80080ce <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60fb      	str	r3, [r7, #12]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080ce:	2202      	movs	r2, #2
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff ff3c 	bl	8007f50 <xQueueGenericCreate>
 80080d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80080e6:	697b      	ldr	r3, [r7, #20]
	}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08e      	sub	sp, #56	@ 0x38
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080fe:	2300      	movs	r3, #0
 8008100:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10b      	bne.n	8008124 <xQueueGenericSend+0x34>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <xQueueGenericSend+0x42>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <xQueueGenericSend+0x46>
 8008132:	2301      	movs	r3, #1
 8008134:	e000      	b.n	8008138 <xQueueGenericSend+0x48>
 8008136:	2300      	movs	r3, #0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10b      	bne.n	8008154 <xQueueGenericSend+0x64>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	e7fd      	b.n	8008150 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d103      	bne.n	8008162 <xQueueGenericSend+0x72>
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <xQueueGenericSend+0x76>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <xQueueGenericSend+0x78>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <xQueueGenericSend+0x94>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	623b      	str	r3, [r7, #32]
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008184:	f001 fa1c 	bl	80095c0 <xTaskGetSchedulerState>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d102      	bne.n	8008194 <xQueueGenericSend+0xa4>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <xQueueGenericSend+0xa8>
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <xQueueGenericSend+0xaa>
 8008198:	2300      	movs	r3, #0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10b      	bne.n	80081b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	61fb      	str	r3, [r7, #28]
}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	e7fd      	b.n	80081b2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081b6:	f001 ff37 	bl	800a028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <xQueueGenericSend+0xdc>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d129      	bne.n	8008220 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081d2:	f000 fa31 	bl	8008638 <prvCopyDataToQueue>
 80081d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d010      	beq.n	8008202 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	3324      	adds	r3, #36	@ 0x24
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 f825 	bl	8009234 <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d013      	beq.n	8008218 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081f0:	4b3f      	ldr	r3, [pc, #252]	@ (80082f0 <xQueueGenericSend+0x200>)
 80081f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	e00a      	b.n	8008218 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d007      	beq.n	8008218 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008208:	4b39      	ldr	r3, [pc, #228]	@ (80082f0 <xQueueGenericSend+0x200>)
 800820a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008218:	f001 ff38 	bl	800a08c <vPortExitCritical>
				return pdPASS;
 800821c:	2301      	movs	r3, #1
 800821e:	e063      	b.n	80082e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d103      	bne.n	800822e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008226:	f001 ff31 	bl	800a08c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
 800822c:	e05c      	b.n	80082e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800822e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008234:	f107 0314 	add.w	r3, r7, #20
 8008238:	4618      	mov	r0, r3
 800823a:	f001 f85f 	bl	80092fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800823e:	2301      	movs	r3, #1
 8008240:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008242:	f001 ff23 	bl	800a08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008246:	f000 fdc9 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800824a:	f001 feed 	bl	800a028 <vPortEnterCritical>
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008254:	b25b      	sxtb	r3, r3
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825a:	d103      	bne.n	8008264 <xQueueGenericSend+0x174>
 800825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800826a:	b25b      	sxtb	r3, r3
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d103      	bne.n	800827a <xQueueGenericSend+0x18a>
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800827a:	f001 ff07 	bl	800a08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800827e:	1d3a      	adds	r2, r7, #4
 8008280:	f107 0314 	add.w	r3, r7, #20
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f84e 	bl	8009328 <xTaskCheckForTimeOut>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d124      	bne.n	80082dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008292:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008294:	f000 fac8 	bl	8008828 <prvIsQueueFull>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d018      	beq.n	80082d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	3310      	adds	r3, #16
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4611      	mov	r1, r2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 ff72 	bl	8009190 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ae:	f000 fa53 	bl	8008758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082b2:	f000 fda1 	bl	8008df8 <xTaskResumeAll>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f47f af7c 	bne.w	80081b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <xQueueGenericSend+0x200>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	e772      	b.n	80081b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082d2:	f000 fa41 	bl	8008758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082d6:	f000 fd8f 	bl	8008df8 <xTaskResumeAll>
 80082da:	e76c      	b.n	80081b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082de:	f000 fa3b 	bl	8008758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082e2:	f000 fd89 	bl	8008df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082e6:	2300      	movs	r3, #0
		}
	}
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3738      	adds	r7, #56	@ 0x38
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08e      	sub	sp, #56	@ 0x38
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800831e:	bf00      	nop
 8008320:	bf00      	nop
 8008322:	e7fd      	b.n	8008320 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d103      	bne.n	8008332 <xQueueGenericSendFromISR+0x3e>
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <xQueueGenericSendFromISR+0x42>
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <xQueueGenericSendFromISR+0x44>
 8008336:	2300      	movs	r3, #0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	623b      	str	r3, [r7, #32]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d103      	bne.n	8008362 <xQueueGenericSendFromISR+0x6e>
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <xQueueGenericSendFromISR+0x72>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <xQueueGenericSendFromISR+0x74>
 8008366:	2300      	movs	r3, #0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10b      	bne.n	8008384 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	61fb      	str	r3, [r7, #28]
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008384:	f001 ff30 	bl	800a1e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008388:	f3ef 8211 	mrs	r2, BASEPRI
 800838c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	61ba      	str	r2, [r7, #24]
 800839e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d302      	bcc.n	80083b6 <xQueueGenericSendFromISR+0xc2>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d12c      	bne.n	8008410 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083c6:	f000 f937 	bl	8008638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d2:	d112      	bne.n	80083fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d016      	beq.n	800840a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	3324      	adds	r3, #36	@ 0x24
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 ff27 	bl	8009234 <xTaskRemoveFromEventList>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00e      	beq.n	800840a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	e007      	b.n	800840a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083fe:	3301      	adds	r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	b25a      	sxtb	r2, r3
 8008404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800840a:	2301      	movs	r3, #1
 800840c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800840e:	e001      	b.n	8008414 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008410:	2300      	movs	r3, #0
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
 8008414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008416:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800841e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008422:	4618      	mov	r0, r3
 8008424:	3738      	adds	r7, #56	@ 0x38
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08c      	sub	sp, #48	@ 0x30
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008438:	2300      	movs	r3, #0
 800843a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <xQueueReceive+0x32>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	623b      	str	r3, [r7, #32]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d103      	bne.n	800846c <xQueueReceive+0x40>
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <xQueueReceive+0x44>
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <xQueueReceive+0x46>
 8008470:	2300      	movs	r3, #0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <xQueueReceive+0x62>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	61fb      	str	r3, [r7, #28]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800848e:	f001 f897 	bl	80095c0 <xTaskGetSchedulerState>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <xQueueReceive+0x72>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <xQueueReceive+0x76>
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <xQueueReceive+0x78>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10b      	bne.n	80084c0 <xQueueReceive+0x94>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	61bb      	str	r3, [r7, #24]
}
 80084ba:	bf00      	nop
 80084bc:	bf00      	nop
 80084be:	e7fd      	b.n	80084bc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80084c0:	f001 fdb2 	bl	800a028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01f      	beq.n	8008510 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084d4:	f000 f91a 	bl	800870c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	1e5a      	subs	r2, r3, #1
 80084dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00f      	beq.n	8008508 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ea:	3310      	adds	r3, #16
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fea1 	bl	8009234 <xTaskRemoveFromEventList>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084f8:	4b3c      	ldr	r3, [pc, #240]	@ (80085ec <xQueueReceive+0x1c0>)
 80084fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008508:	f001 fdc0 	bl	800a08c <vPortExitCritical>
				return pdPASS;
 800850c:	2301      	movs	r3, #1
 800850e:	e069      	b.n	80085e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008516:	f001 fdb9 	bl	800a08c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800851a:	2300      	movs	r3, #0
 800851c:	e062      	b.n	80085e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d106      	bne.n	8008532 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fee7 	bl	80092fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800852e:	2301      	movs	r3, #1
 8008530:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008532:	f001 fdab 	bl	800a08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008536:	f000 fc51 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800853a:	f001 fd75 	bl	800a028 <vPortEnterCritical>
 800853e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008544:	b25b      	sxtb	r3, r3
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d103      	bne.n	8008554 <xQueueReceive+0x128>
 800854c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008556:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800855a:	b25b      	sxtb	r3, r3
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d103      	bne.n	800856a <xQueueReceive+0x13e>
 8008562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800856a:	f001 fd8f 	bl	800a08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800856e:	1d3a      	adds	r2, r7, #4
 8008570:	f107 0310 	add.w	r3, r7, #16
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fed6 	bl	8009328 <xTaskCheckForTimeOut>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d123      	bne.n	80085ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008584:	f000 f93a 	bl	80087fc <prvIsQueueEmpty>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800858e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008590:	3324      	adds	r3, #36	@ 0x24
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fdfa 	bl	8009190 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800859c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800859e:	f000 f8db 	bl	8008758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085a2:	f000 fc29 	bl	8008df8 <xTaskResumeAll>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d189      	bne.n	80084c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085ac:	4b0f      	ldr	r3, [pc, #60]	@ (80085ec <xQueueReceive+0x1c0>)
 80085ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	e780      	b.n	80084c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c0:	f000 f8ca 	bl	8008758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085c4:	f000 fc18 	bl	8008df8 <xTaskResumeAll>
 80085c8:	e77a      	b.n	80084c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085cc:	f000 f8c4 	bl	8008758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085d0:	f000 fc12 	bl	8008df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d6:	f000 f911 	bl	80087fc <prvIsQueueEmpty>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f43f af6f 	beq.w	80084c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3730      	adds	r7, #48	@ 0x30
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10b      	bne.n	800861a <vQueueDelete+0x2a>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f946 	bl	80088ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f001 fee6 	bl	800a3fc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008630:	bf00      	nop
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10d      	bne.n	8008672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d14d      	bne.n	80086fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 ffca 	bl	80095fc <xTaskPriorityDisinherit>
 8008668:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	605a      	str	r2, [r3, #4]
 8008670:	e043      	b.n	80086fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d119      	bne.n	80086ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6898      	ldr	r0, [r3, #8]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008680:	461a      	mov	r2, r3
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	f001 fffe 	bl	800a684 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d32b      	bcc.n	80086fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	609a      	str	r2, [r3, #8]
 80086aa:	e026      	b.n	80086fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68d8      	ldr	r0, [r3, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b4:	461a      	mov	r2, r3
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	f001 ffe4 	bl	800a684 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c4:	425b      	negs	r3, r3
 80086c6:	441a      	add	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d207      	bcs.n	80086e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e0:	425b      	negs	r3, r3
 80086e2:	441a      	add	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d105      	bne.n	80086fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008702:	697b      	ldr	r3, [r7, #20]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871a:	2b00      	cmp	r3, #0
 800871c:	d018      	beq.n	8008750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008726:	441a      	add	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d303      	bcc.n	8008740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68d9      	ldr	r1, [r3, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008748:	461a      	mov	r2, r3
 800874a:	6838      	ldr	r0, [r7, #0]
 800874c:	f001 ff9a 	bl	800a684 <memcpy>
	}
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008760:	f001 fc62 	bl	800a028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800876a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800876c:	e011      	b.n	8008792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008772:	2b00      	cmp	r3, #0
 8008774:	d012      	beq.n	800879c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3324      	adds	r3, #36	@ 0x24
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fd5a 	bl	8009234 <xTaskRemoveFromEventList>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008786:	f000 fe33 	bl	80093f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	3b01      	subs	r3, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dce9      	bgt.n	800876e <prvUnlockQueue+0x16>
 800879a:	e000      	b.n	800879e <prvUnlockQueue+0x46>
					break;
 800879c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	22ff      	movs	r2, #255	@ 0xff
 80087a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80087a6:	f001 fc71 	bl	800a08c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087aa:	f001 fc3d 	bl	800a028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087b6:	e011      	b.n	80087dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d012      	beq.n	80087e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3310      	adds	r3, #16
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fd35 	bl	8009234 <xTaskRemoveFromEventList>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087d0:	f000 fe0e 	bl	80093f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dce9      	bgt.n	80087b8 <prvUnlockQueue+0x60>
 80087e4:	e000      	b.n	80087e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	22ff      	movs	r2, #255	@ 0xff
 80087ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087f0:	f001 fc4c 	bl	800a08c <vPortExitCritical>
}
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008804:	f001 fc10 	bl	800a028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e001      	b.n	800881a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881a:	f001 fc37 	bl	800a08c <vPortExitCritical>

	return xReturn;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008830:	f001 fbfa 	bl	800a028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883c:	429a      	cmp	r2, r3
 800883e:	d102      	bne.n	8008846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008840:	2301      	movs	r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	e001      	b.n	800884a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800884a:	f001 fc1f 	bl	800a08c <vPortExitCritical>

	return xReturn;
 800884e:	68fb      	ldr	r3, [r7, #12]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	e014      	b.n	8008892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008868:	4a0f      	ldr	r2, [pc, #60]	@ (80088a8 <vQueueAddToRegistry+0x50>)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008874:	490c      	ldr	r1, [pc, #48]	@ (80088a8 <vQueueAddToRegistry+0x50>)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800887e:	4a0a      	ldr	r2, [pc, #40]	@ (80088a8 <vQueueAddToRegistry+0x50>)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	4413      	add	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800888a:	e006      	b.n	800889a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3301      	adds	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b07      	cmp	r3, #7
 8008896:	d9e7      	bls.n	8008868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20000968 	.word	0x20000968

080088ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e016      	b.n	80088e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088ba:	4a10      	ldr	r2, [pc, #64]	@ (80088fc <vQueueUnregisterQueue+0x50>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	4413      	add	r3, r2
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d10b      	bne.n	80088e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088ca:	4a0c      	ldr	r2, [pc, #48]	@ (80088fc <vQueueUnregisterQueue+0x50>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2100      	movs	r1, #0
 80088d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088d4:	4a09      	ldr	r2, [pc, #36]	@ (80088fc <vQueueUnregisterQueue+0x50>)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	4413      	add	r3, r2
 80088dc:	2200      	movs	r2, #0
 80088de:	605a      	str	r2, [r3, #4]
				break;
 80088e0:	e006      	b.n	80088f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	d9e5      	bls.n	80088ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	20000968 	.word	0x20000968

08008900 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008910:	f001 fb8a 	bl	800a028 <vPortEnterCritical>
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800891a:	b25b      	sxtb	r3, r3
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d103      	bne.n	800892a <vQueueWaitForMessageRestricted+0x2a>
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008930:	b25b      	sxtb	r3, r3
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d103      	bne.n	8008940 <vQueueWaitForMessageRestricted+0x40>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008940:	f001 fba4 	bl	800a08c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	3324      	adds	r3, #36	@ 0x24
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fc41 	bl	80091dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800895a:	6978      	ldr	r0, [r7, #20]
 800895c:	f7ff fefc 	bl	8008758 <prvUnlockQueue>
	}
 8008960:	bf00      	nop
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	@ 0x38
 800896c:	af04      	add	r7, sp, #16
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10b      	bne.n	8008994 <xTaskCreateStatic+0x2c>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	623b      	str	r3, [r7, #32]
}
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	e7fd      	b.n	8008990 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10b      	bne.n	80089b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	61fb      	str	r3, [r7, #28]
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	e7fd      	b.n	80089ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089b2:	235c      	movs	r3, #92	@ 0x5c
 80089b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80089ba:	d00b      	beq.n	80089d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	61bb      	str	r3, [r7, #24]
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	e7fd      	b.n	80089d0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01e      	beq.n	8008a18 <xTaskCreateStatic+0xb0>
 80089da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01b      	beq.n	8008a18 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089e8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	2202      	movs	r2, #2
 80089ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089f2:	2300      	movs	r3, #0
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	f107 0314 	add.w	r3, r7, #20
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 f850 	bl	8008ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a12:	f000 f8d5 	bl	8008bc0 <prvAddNewTaskToReadyList>
 8008a16:	e001      	b.n	8008a1c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a1c:	697b      	ldr	r3, [r7, #20]
	}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3728      	adds	r7, #40	@ 0x28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08c      	sub	sp, #48	@ 0x30
 8008a2a:	af04      	add	r7, sp, #16
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 fc16 	bl	800a26c <pvPortMalloc>
 8008a40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00e      	beq.n	8008a66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a48:	205c      	movs	r0, #92	@ 0x5c
 8008a4a:	f001 fc0f 	bl	800a26c <pvPortMalloc>
 8008a4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a5c:	e005      	b.n	8008a6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f001 fccc 	bl	800a3fc <vPortFree>
 8008a64:	e001      	b.n	8008a6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d017      	beq.n	8008aa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a78:	88fa      	ldrh	r2, [r7, #6]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f80e 	bl	8008ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a94:	69f8      	ldr	r0, [r7, #28]
 8008a96:	f000 f893 	bl	8008bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e002      	b.n	8008aa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3720      	adds	r7, #32
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	21a5      	movs	r1, #165	@ 0xa5
 8008aca:	f001 fdaf 	bl	800a62c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f023 0307 	bic.w	r3, r3, #7
 8008ae6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	617b      	str	r3, [r7, #20]
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	e7fd      	b.n	8008b06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61fb      	str	r3, [r7, #28]
 8008b0e:	e012      	b.n	8008b36 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4413      	add	r3, r2
 8008b16:	7819      	ldrb	r1, [r3, #0]
 8008b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	3334      	adds	r3, #52	@ 0x34
 8008b20:	460a      	mov	r2, r1
 8008b22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d006      	beq.n	8008b3e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	3301      	adds	r3, #1
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	2b0f      	cmp	r3, #15
 8008b3a:	d9e9      	bls.n	8008b10 <prvInitialiseNewTask+0x60>
 8008b3c:	e000      	b.n	8008b40 <prvInitialiseNewTask+0x90>
		{
			break;
 8008b3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	2b37      	cmp	r3, #55	@ 0x37
 8008b4c:	d901      	bls.n	8008b52 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b4e:	2337      	movs	r3, #55	@ 0x37
 8008b50:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b56:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	2200      	movs	r2, #0
 8008b62:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b66:	3304      	adds	r3, #4
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff f877 	bl	8007c5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	3318      	adds	r3, #24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff f872 	bl	8007c5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	2200      	movs	r2, #0
 8008b92:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	69b8      	ldr	r0, [r7, #24]
 8008ba2:	f001 f90f 	bl	8009dc4 <pxPortInitialiseStack>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bb8:	bf00      	nop
 8008bba:	3720      	adds	r7, #32
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bc8:	f001 fa2e 	bl	800a028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bde:	4a2a      	ldr	r2, [pc, #168]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008be4:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d110      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bec:	f000 fc24 	bl	8009438 <prvInitialiseTaskLists>
 8008bf0:	e00d      	b.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bf2:	4b26      	ldr	r3, [pc, #152]	@ (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d109      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bfa:	4b23      	ldr	r3, [pc, #140]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d802      	bhi.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c08:	4a1f      	ldr	r2, [pc, #124]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c0e:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a1e      	ldr	r2, [pc, #120]	@ (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c18:	4b1d      	ldr	r3, [pc, #116]	@ (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c24:	4b1b      	ldr	r3, [pc, #108]	@ (8008c94 <prvAddNewTaskToReadyList+0xd4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d903      	bls.n	8008c34 <prvAddNewTaskToReadyList+0x74>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c30:	4a18      	ldr	r2, [pc, #96]	@ (8008c94 <prvAddNewTaskToReadyList+0xd4>)
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4a15      	ldr	r2, [pc, #84]	@ (8008c98 <prvAddNewTaskToReadyList+0xd8>)
 8008c42:	441a      	add	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f7ff f813 	bl	8007c76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c50:	f001 fa1c 	bl	800a08c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c54:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00e      	beq.n	8008c7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d207      	bcs.n	8008c7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c9c <prvAddNewTaskToReadyList+0xdc>)
 8008c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000e7c 	.word	0x20000e7c
 8008c88:	200009a8 	.word	0x200009a8
 8008c8c:	20000e88 	.word	0x20000e88
 8008c90:	20000e98 	.word	0x20000e98
 8008c94:	20000e84 	.word	0x20000e84
 8008c98:	200009ac 	.word	0x200009ac
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d018      	beq.n	8008ce4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cb2:	4b14      	ldr	r3, [pc, #80]	@ (8008d04 <vTaskDelay+0x64>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00b      	beq.n	8008cd2 <vTaskDelay+0x32>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60bb      	str	r3, [r7, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	e7fd      	b.n	8008cce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cd2:	f000 f883 	bl	8008ddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fcff 	bl	80096dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cde:	f000 f88b 	bl	8008df8 <xTaskResumeAll>
 8008ce2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d107      	bne.n	8008cfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008cea:	4b07      	ldr	r3, [pc, #28]	@ (8008d08 <vTaskDelay+0x68>)
 8008cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000ea4 	.word	0x20000ea4
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	@ 0x28
 8008d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	1d39      	adds	r1, r7, #4
 8008d1e:	f107 0308 	add.w	r3, r7, #8
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe ff46 	bl	8007bb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	9202      	str	r2, [sp, #8]
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	2300      	movs	r3, #0
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2300      	movs	r3, #0
 8008d38:	460a      	mov	r2, r1
 8008d3a:	4922      	ldr	r1, [pc, #136]	@ (8008dc4 <vTaskStartScheduler+0xb8>)
 8008d3c:	4822      	ldr	r0, [pc, #136]	@ (8008dc8 <vTaskStartScheduler+0xbc>)
 8008d3e:	f7ff fe13 	bl	8008968 <xTaskCreateStatic>
 8008d42:	4603      	mov	r3, r0
 8008d44:	4a21      	ldr	r2, [pc, #132]	@ (8008dcc <vTaskStartScheduler+0xc0>)
 8008d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d48:	4b20      	ldr	r3, [pc, #128]	@ (8008dcc <vTaskStartScheduler+0xc0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d50:	2301      	movs	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e001      	b.n	8008d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d102      	bne.n	8008d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d60:	f000 fd10 	bl	8009784 <xTimerCreateTimerTask>
 8008d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d116      	bne.n	8008d9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	613b      	str	r3, [r7, #16]
}
 8008d7e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d80:	4b13      	ldr	r3, [pc, #76]	@ (8008dd0 <vTaskStartScheduler+0xc4>)
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d88:	4b12      	ldr	r3, [pc, #72]	@ (8008dd4 <vTaskStartScheduler+0xc8>)
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008d8e:	4b12      	ldr	r3, [pc, #72]	@ (8008dd8 <vTaskStartScheduler+0xcc>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d94:	f001 f8a4 	bl	8009ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d98:	e00f      	b.n	8008dba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da0:	d10b      	bne.n	8008dba <vTaskStartScheduler+0xae>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60fb      	str	r3, [r7, #12]
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop
 8008db8:	e7fd      	b.n	8008db6 <vTaskStartScheduler+0xaa>
}
 8008dba:	bf00      	nop
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800a6f0 	.word	0x0800a6f0
 8008dc8:	08009409 	.word	0x08009409
 8008dcc:	20000ea0 	.word	0x20000ea0
 8008dd0:	20000e9c 	.word	0x20000e9c
 8008dd4:	20000e88 	.word	0x20000e88
 8008dd8:	20000e80 	.word	0x20000e80

08008ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008de0:	4b04      	ldr	r3, [pc, #16]	@ (8008df4 <vTaskSuspendAll+0x18>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	4a03      	ldr	r2, [pc, #12]	@ (8008df4 <vTaskSuspendAll+0x18>)
 8008de8:	6013      	str	r3, [r2, #0]
}
 8008dea:	bf00      	nop
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	20000ea4 	.word	0x20000ea4

08008df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e06:	4b42      	ldr	r3, [pc, #264]	@ (8008f10 <xTaskResumeAll+0x118>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10b      	bne.n	8008e26 <xTaskResumeAll+0x2e>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	603b      	str	r3, [r7, #0]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e26:	f001 f8ff 	bl	800a028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e2a:	4b39      	ldr	r3, [pc, #228]	@ (8008f10 <xTaskResumeAll+0x118>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	4a37      	ldr	r2, [pc, #220]	@ (8008f10 <xTaskResumeAll+0x118>)
 8008e32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e34:	4b36      	ldr	r3, [pc, #216]	@ (8008f10 <xTaskResumeAll+0x118>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d162      	bne.n	8008f02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e3c:	4b35      	ldr	r3, [pc, #212]	@ (8008f14 <xTaskResumeAll+0x11c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d05e      	beq.n	8008f02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e44:	e02f      	b.n	8008ea6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008e46:	4b34      	ldr	r3, [pc, #208]	@ (8008f18 <xTaskResumeAll+0x120>)
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3318      	adds	r3, #24
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe ff6c 	bl	8007d30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe ff67 	bl	8007d30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e66:	4b2d      	ldr	r3, [pc, #180]	@ (8008f1c <xTaskResumeAll+0x124>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d903      	bls.n	8008e76 <xTaskResumeAll+0x7e>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e72:	4a2a      	ldr	r2, [pc, #168]	@ (8008f1c <xTaskResumeAll+0x124>)
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4a27      	ldr	r2, [pc, #156]	@ (8008f20 <xTaskResumeAll+0x128>)
 8008e84:	441a      	add	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	f7fe fef2 	bl	8007c76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e96:	4b23      	ldr	r3, [pc, #140]	@ (8008f24 <xTaskResumeAll+0x12c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d302      	bcc.n	8008ea6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008ea0:	4b21      	ldr	r3, [pc, #132]	@ (8008f28 <xTaskResumeAll+0x130>)
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8008f18 <xTaskResumeAll+0x120>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1cb      	bne.n	8008e46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008eb4:	f000 fb5e 	bl	8009574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8008f2c <xTaskResumeAll+0x134>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d010      	beq.n	8008ee6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ec4:	f000 f846 	bl	8008f54 <xTaskIncrementTick>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008ece:	4b16      	ldr	r3, [pc, #88]	@ (8008f28 <xTaskResumeAll+0x130>)
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1f1      	bne.n	8008ec4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008ee0:	4b12      	ldr	r3, [pc, #72]	@ (8008f2c <xTaskResumeAll+0x134>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ee6:	4b10      	ldr	r3, [pc, #64]	@ (8008f28 <xTaskResumeAll+0x130>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d009      	beq.n	8008f02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8008f30 <xTaskResumeAll+0x138>)
 8008ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f02:	f001 f8c3 	bl	800a08c <vPortExitCritical>

	return xAlreadyYielded;
 8008f06:	68bb      	ldr	r3, [r7, #8]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20000ea4 	.word	0x20000ea4
 8008f14:	20000e7c 	.word	0x20000e7c
 8008f18:	20000e3c 	.word	0x20000e3c
 8008f1c:	20000e84 	.word	0x20000e84
 8008f20:	200009ac 	.word	0x200009ac
 8008f24:	200009a8 	.word	0x200009a8
 8008f28:	20000e90 	.word	0x20000e90
 8008f2c:	20000e8c 	.word	0x20000e8c
 8008f30:	e000ed04 	.word	0xe000ed04

08008f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f3a:	4b05      	ldr	r3, [pc, #20]	@ (8008f50 <xTaskGetTickCount+0x1c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f40:	687b      	ldr	r3, [r7, #4]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20000e80 	.word	0x20000e80

08008f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f5e:	4b52      	ldr	r3, [pc, #328]	@ (80090a8 <xTaskIncrementTick+0x154>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f040 808f 	bne.w	8009086 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f68:	4b50      	ldr	r3, [pc, #320]	@ (80090ac <xTaskIncrementTick+0x158>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f70:	4a4e      	ldr	r2, [pc, #312]	@ (80090ac <xTaskIncrementTick+0x158>)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d121      	bne.n	8008fc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80090b0 <xTaskIncrementTick+0x15c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	603b      	str	r3, [r7, #0]
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	e7fd      	b.n	8008f9a <xTaskIncrementTick+0x46>
 8008f9e:	4b44      	ldr	r3, [pc, #272]	@ (80090b0 <xTaskIncrementTick+0x15c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	4b43      	ldr	r3, [pc, #268]	@ (80090b4 <xTaskIncrementTick+0x160>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a41      	ldr	r2, [pc, #260]	@ (80090b0 <xTaskIncrementTick+0x15c>)
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	4a41      	ldr	r2, [pc, #260]	@ (80090b4 <xTaskIncrementTick+0x160>)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	4b41      	ldr	r3, [pc, #260]	@ (80090b8 <xTaskIncrementTick+0x164>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	4a3f      	ldr	r2, [pc, #252]	@ (80090b8 <xTaskIncrementTick+0x164>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	f000 fada 	bl	8009574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80090bc <xTaskIncrementTick+0x168>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d34e      	bcc.n	8009068 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fca:	4b39      	ldr	r3, [pc, #228]	@ (80090b0 <xTaskIncrementTick+0x15c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <xTaskIncrementTick+0x84>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <xTaskIncrementTick+0x86>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fde:	4b37      	ldr	r3, [pc, #220]	@ (80090bc <xTaskIncrementTick+0x168>)
 8008fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe4:	601a      	str	r2, [r3, #0]
					break;
 8008fe6:	e03f      	b.n	8009068 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fe8:	4b31      	ldr	r3, [pc, #196]	@ (80090b0 <xTaskIncrementTick+0x15c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d203      	bcs.n	8009008 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009000:	4a2e      	ldr	r2, [pc, #184]	@ (80090bc <xTaskIncrementTick+0x168>)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6013      	str	r3, [r2, #0]
						break;
 8009006:	e02f      	b.n	8009068 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3304      	adds	r3, #4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fe8f 	bl	8007d30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3318      	adds	r3, #24
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe fe86 	bl	8007d30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009028:	4b25      	ldr	r3, [pc, #148]	@ (80090c0 <xTaskIncrementTick+0x16c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d903      	bls.n	8009038 <xTaskIncrementTick+0xe4>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	4a22      	ldr	r2, [pc, #136]	@ (80090c0 <xTaskIncrementTick+0x16c>)
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4a1f      	ldr	r2, [pc, #124]	@ (80090c4 <xTaskIncrementTick+0x170>)
 8009046:	441a      	add	r2, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	3304      	adds	r3, #4
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f7fe fe11 	bl	8007c76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009058:	4b1b      	ldr	r3, [pc, #108]	@ (80090c8 <xTaskIncrementTick+0x174>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	429a      	cmp	r2, r3
 8009060:	d3b3      	bcc.n	8008fca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009062:	2301      	movs	r3, #1
 8009064:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009066:	e7b0      	b.n	8008fca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009068:	4b17      	ldr	r3, [pc, #92]	@ (80090c8 <xTaskIncrementTick+0x174>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906e:	4915      	ldr	r1, [pc, #84]	@ (80090c4 <xTaskIncrementTick+0x170>)
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d907      	bls.n	8009090 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009080:	2301      	movs	r3, #1
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	e004      	b.n	8009090 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009086:	4b11      	ldr	r3, [pc, #68]	@ (80090cc <xTaskIncrementTick+0x178>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a0f      	ldr	r2, [pc, #60]	@ (80090cc <xTaskIncrementTick+0x178>)
 800908e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009090:	4b0f      	ldr	r3, [pc, #60]	@ (80090d0 <xTaskIncrementTick+0x17c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800909c:	697b      	ldr	r3, [r7, #20]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20000ea4 	.word	0x20000ea4
 80090ac:	20000e80 	.word	0x20000e80
 80090b0:	20000e34 	.word	0x20000e34
 80090b4:	20000e38 	.word	0x20000e38
 80090b8:	20000e94 	.word	0x20000e94
 80090bc:	20000e9c 	.word	0x20000e9c
 80090c0:	20000e84 	.word	0x20000e84
 80090c4:	200009ac 	.word	0x200009ac
 80090c8:	200009a8 	.word	0x200009a8
 80090cc:	20000e8c 	.word	0x20000e8c
 80090d0:	20000e90 	.word	0x20000e90

080090d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090da:	4b28      	ldr	r3, [pc, #160]	@ (800917c <vTaskSwitchContext+0xa8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090e2:	4b27      	ldr	r3, [pc, #156]	@ (8009180 <vTaskSwitchContext+0xac>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090e8:	e042      	b.n	8009170 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80090ea:	4b25      	ldr	r3, [pc, #148]	@ (8009180 <vTaskSwitchContext+0xac>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80090f0:	4b24      	ldr	r3, [pc, #144]	@ (8009184 <vTaskSwitchContext+0xb0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e011      	b.n	800911c <vTaskSwitchContext+0x48>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <vTaskSwitchContext+0x42>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	607b      	str	r3, [r7, #4]
}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	e7fd      	b.n	8009112 <vTaskSwitchContext+0x3e>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3b01      	subs	r3, #1
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	491a      	ldr	r1, [pc, #104]	@ (8009188 <vTaskSwitchContext+0xb4>)
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0e3      	beq.n	80090f8 <vTaskSwitchContext+0x24>
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4a13      	ldr	r2, [pc, #76]	@ (8009188 <vTaskSwitchContext+0xb4>)
 800913c:	4413      	add	r3, r2
 800913e:	60bb      	str	r3, [r7, #8]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	605a      	str	r2, [r3, #4]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	3308      	adds	r3, #8
 8009152:	429a      	cmp	r2, r3
 8009154:	d104      	bne.n	8009160 <vTaskSwitchContext+0x8c>
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	605a      	str	r2, [r3, #4]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	4a09      	ldr	r2, [pc, #36]	@ (800918c <vTaskSwitchContext+0xb8>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	4a06      	ldr	r2, [pc, #24]	@ (8009184 <vTaskSwitchContext+0xb0>)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6013      	str	r3, [r2, #0]
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	20000ea4 	.word	0x20000ea4
 8009180:	20000e90 	.word	0x20000e90
 8009184:	20000e84 	.word	0x20000e84
 8009188:	200009ac 	.word	0x200009ac
 800918c:	200009a8 	.word	0x200009a8

08009190 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10b      	bne.n	80091b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60fb      	str	r3, [r7, #12]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091b8:	4b07      	ldr	r3, [pc, #28]	@ (80091d8 <vTaskPlaceOnEventList+0x48>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3318      	adds	r3, #24
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fe fd7c 	bl	8007cbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091c6:	2101      	movs	r1, #1
 80091c8:	6838      	ldr	r0, [r7, #0]
 80091ca:	f000 fa87 	bl	80096dc <prvAddCurrentTaskToDelayedList>
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	200009a8 	.word	0x200009a8

080091dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	617b      	str	r3, [r7, #20]
}
 8009200:	bf00      	nop
 8009202:	bf00      	nop
 8009204:	e7fd      	b.n	8009202 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009206:	4b0a      	ldr	r3, [pc, #40]	@ (8009230 <vTaskPlaceOnEventListRestricted+0x54>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3318      	adds	r3, #24
 800920c:	4619      	mov	r1, r3
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7fe fd31 	bl	8007c76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800921a:	f04f 33ff 	mov.w	r3, #4294967295
 800921e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009220:	6879      	ldr	r1, [r7, #4]
 8009222:	68b8      	ldr	r0, [r7, #8]
 8009224:	f000 fa5a 	bl	80096dc <prvAddCurrentTaskToDelayedList>
	}
 8009228:	bf00      	nop
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	200009a8 	.word	0x200009a8

08009234 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10b      	bne.n	8009262 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	60fb      	str	r3, [r7, #12]
}
 800925c:	bf00      	nop
 800925e:	bf00      	nop
 8009260:	e7fd      	b.n	800925e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3318      	adds	r3, #24
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fd62 	bl	8007d30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800926c:	4b1d      	ldr	r3, [pc, #116]	@ (80092e4 <xTaskRemoveFromEventList+0xb0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d11d      	bne.n	80092b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	3304      	adds	r3, #4
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fd59 	bl	8007d30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009282:	4b19      	ldr	r3, [pc, #100]	@ (80092e8 <xTaskRemoveFromEventList+0xb4>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d903      	bls.n	8009292 <xTaskRemoveFromEventList+0x5e>
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928e:	4a16      	ldr	r2, [pc, #88]	@ (80092e8 <xTaskRemoveFromEventList+0xb4>)
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4a13      	ldr	r2, [pc, #76]	@ (80092ec <xTaskRemoveFromEventList+0xb8>)
 80092a0:	441a      	add	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3304      	adds	r3, #4
 80092a6:	4619      	mov	r1, r3
 80092a8:	4610      	mov	r0, r2
 80092aa:	f7fe fce4 	bl	8007c76 <vListInsertEnd>
 80092ae:	e005      	b.n	80092bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	3318      	adds	r3, #24
 80092b4:	4619      	mov	r1, r3
 80092b6:	480e      	ldr	r0, [pc, #56]	@ (80092f0 <xTaskRemoveFromEventList+0xbc>)
 80092b8:	f7fe fcdd 	bl	8007c76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c0:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <xTaskRemoveFromEventList+0xc0>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d905      	bls.n	80092d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092ca:	2301      	movs	r3, #1
 80092cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092ce:	4b0a      	ldr	r3, [pc, #40]	@ (80092f8 <xTaskRemoveFromEventList+0xc4>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e001      	b.n	80092da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80092da:	697b      	ldr	r3, [r7, #20]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000ea4 	.word	0x20000ea4
 80092e8:	20000e84 	.word	0x20000e84
 80092ec:	200009ac 	.word	0x200009ac
 80092f0:	20000e3c 	.word	0x20000e3c
 80092f4:	200009a8 	.word	0x200009a8
 80092f8:	20000e90 	.word	0x20000e90

080092fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009304:	4b06      	ldr	r3, [pc, #24]	@ (8009320 <vTaskInternalSetTimeOutState+0x24>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800930c:	4b05      	ldr	r3, [pc, #20]	@ (8009324 <vTaskInternalSetTimeOutState+0x28>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	605a      	str	r2, [r3, #4]
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	20000e94 	.word	0x20000e94
 8009324:	20000e80 	.word	0x20000e80

08009328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10b      	bne.n	8009350 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	613b      	str	r3, [r7, #16]
}
 800934a:	bf00      	nop
 800934c:	bf00      	nop
 800934e:	e7fd      	b.n	800934c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60fb      	str	r3, [r7, #12]
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	e7fd      	b.n	800936a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800936e:	f000 fe5b 	bl	800a028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009372:	4b1d      	ldr	r3, [pc, #116]	@ (80093e8 <xTaskCheckForTimeOut+0xc0>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938a:	d102      	bne.n	8009392 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800938c:	2300      	movs	r3, #0
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e023      	b.n	80093da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b15      	ldr	r3, [pc, #84]	@ (80093ec <xTaskCheckForTimeOut+0xc4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d007      	beq.n	80093ae <xTaskCheckForTimeOut+0x86>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d302      	bcc.n	80093ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	61fb      	str	r3, [r7, #28]
 80093ac:	e015      	b.n	80093da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d20b      	bcs.n	80093d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ff99 	bl	80092fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	e004      	b.n	80093da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093d6:	2301      	movs	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093da:	f000 fe57 	bl	800a08c <vPortExitCritical>

	return xReturn;
 80093de:	69fb      	ldr	r3, [r7, #28]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000e80 	.word	0x20000e80
 80093ec:	20000e94 	.word	0x20000e94

080093f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093f4:	4b03      	ldr	r3, [pc, #12]	@ (8009404 <vTaskMissedYield+0x14>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
}
 80093fa:	bf00      	nop
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	20000e90 	.word	0x20000e90

08009408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009410:	f000 f852 	bl	80094b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009414:	4b06      	ldr	r3, [pc, #24]	@ (8009430 <prvIdleTask+0x28>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d9f9      	bls.n	8009410 <prvIdleTask+0x8>
			{
				taskYIELD();
 800941c:	4b05      	ldr	r3, [pc, #20]	@ (8009434 <prvIdleTask+0x2c>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800942c:	e7f0      	b.n	8009410 <prvIdleTask+0x8>
 800942e:	bf00      	nop
 8009430:	200009ac 	.word	0x200009ac
 8009434:	e000ed04 	.word	0xe000ed04

08009438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800943e:	2300      	movs	r3, #0
 8009440:	607b      	str	r3, [r7, #4]
 8009442:	e00c      	b.n	800945e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4a12      	ldr	r2, [pc, #72]	@ (8009498 <prvInitialiseTaskLists+0x60>)
 8009450:	4413      	add	r3, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fbe2 	bl	8007c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3301      	adds	r3, #1
 800945c:	607b      	str	r3, [r7, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b37      	cmp	r3, #55	@ 0x37
 8009462:	d9ef      	bls.n	8009444 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009464:	480d      	ldr	r0, [pc, #52]	@ (800949c <prvInitialiseTaskLists+0x64>)
 8009466:	f7fe fbd9 	bl	8007c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800946a:	480d      	ldr	r0, [pc, #52]	@ (80094a0 <prvInitialiseTaskLists+0x68>)
 800946c:	f7fe fbd6 	bl	8007c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009470:	480c      	ldr	r0, [pc, #48]	@ (80094a4 <prvInitialiseTaskLists+0x6c>)
 8009472:	f7fe fbd3 	bl	8007c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009476:	480c      	ldr	r0, [pc, #48]	@ (80094a8 <prvInitialiseTaskLists+0x70>)
 8009478:	f7fe fbd0 	bl	8007c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800947c:	480b      	ldr	r0, [pc, #44]	@ (80094ac <prvInitialiseTaskLists+0x74>)
 800947e:	f7fe fbcd 	bl	8007c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009482:	4b0b      	ldr	r3, [pc, #44]	@ (80094b0 <prvInitialiseTaskLists+0x78>)
 8009484:	4a05      	ldr	r2, [pc, #20]	@ (800949c <prvInitialiseTaskLists+0x64>)
 8009486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009488:	4b0a      	ldr	r3, [pc, #40]	@ (80094b4 <prvInitialiseTaskLists+0x7c>)
 800948a:	4a05      	ldr	r2, [pc, #20]	@ (80094a0 <prvInitialiseTaskLists+0x68>)
 800948c:	601a      	str	r2, [r3, #0]
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200009ac 	.word	0x200009ac
 800949c:	20000e0c 	.word	0x20000e0c
 80094a0:	20000e20 	.word	0x20000e20
 80094a4:	20000e3c 	.word	0x20000e3c
 80094a8:	20000e50 	.word	0x20000e50
 80094ac:	20000e68 	.word	0x20000e68
 80094b0:	20000e34 	.word	0x20000e34
 80094b4:	20000e38 	.word	0x20000e38

080094b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094be:	e019      	b.n	80094f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094c0:	f000 fdb2 	bl	800a028 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80094c4:	4b10      	ldr	r3, [pc, #64]	@ (8009508 <prvCheckTasksWaitingTermination+0x50>)
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fc2d 	bl	8007d30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094d6:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <prvCheckTasksWaitingTermination+0x54>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3b01      	subs	r3, #1
 80094dc:	4a0b      	ldr	r2, [pc, #44]	@ (800950c <prvCheckTasksWaitingTermination+0x54>)
 80094de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009510 <prvCheckTasksWaitingTermination+0x58>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009510 <prvCheckTasksWaitingTermination+0x58>)
 80094e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ea:	f000 fdcf 	bl	800a08c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f810 	bl	8009514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094f4:	4b06      	ldr	r3, [pc, #24]	@ (8009510 <prvCheckTasksWaitingTermination+0x58>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e1      	bne.n	80094c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000e50 	.word	0x20000e50
 800950c:	20000e7c 	.word	0x20000e7c
 8009510:	20000e64 	.word	0x20000e64

08009514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009522:	2b00      	cmp	r3, #0
 8009524:	d108      	bne.n	8009538 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800952a:	4618      	mov	r0, r3
 800952c:	f000 ff66 	bl	800a3fc <vPortFree>
				vPortFree( pxTCB );
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 ff63 	bl	800a3fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009536:	e019      	b.n	800956c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800953e:	2b01      	cmp	r3, #1
 8009540:	d103      	bne.n	800954a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 ff5a 	bl	800a3fc <vPortFree>
	}
 8009548:	e010      	b.n	800956c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009550:	2b02      	cmp	r3, #2
 8009552:	d00b      	beq.n	800956c <prvDeleteTCB+0x58>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60fb      	str	r3, [r7, #12]
}
 8009566:	bf00      	nop
 8009568:	bf00      	nop
 800956a:	e7fd      	b.n	8009568 <prvDeleteTCB+0x54>
	}
 800956c:	bf00      	nop
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800957a:	4b0f      	ldr	r3, [pc, #60]	@ (80095b8 <prvResetNextTaskUnblockTime+0x44>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <prvResetNextTaskUnblockTime+0x14>
 8009584:	2301      	movs	r3, #1
 8009586:	e000      	b.n	800958a <prvResetNextTaskUnblockTime+0x16>
 8009588:	2300      	movs	r3, #0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d004      	beq.n	8009598 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800958e:	4b0b      	ldr	r3, [pc, #44]	@ (80095bc <prvResetNextTaskUnblockTime+0x48>)
 8009590:	f04f 32ff 	mov.w	r2, #4294967295
 8009594:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009596:	e008      	b.n	80095aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009598:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <prvResetNextTaskUnblockTime+0x44>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	4a05      	ldr	r2, [pc, #20]	@ (80095bc <prvResetNextTaskUnblockTime+0x48>)
 80095a8:	6013      	str	r3, [r2, #0]
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20000e34 	.word	0x20000e34
 80095bc:	20000e9c 	.word	0x20000e9c

080095c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095c6:	4b0b      	ldr	r3, [pc, #44]	@ (80095f4 <xTaskGetSchedulerState+0x34>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d102      	bne.n	80095d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095ce:	2301      	movs	r3, #1
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	e008      	b.n	80095e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095d4:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <xTaskGetSchedulerState+0x38>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095dc:	2302      	movs	r3, #2
 80095de:	607b      	str	r3, [r7, #4]
 80095e0:	e001      	b.n	80095e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095e2:	2300      	movs	r3, #0
 80095e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095e6:	687b      	ldr	r3, [r7, #4]
	}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	20000e88 	.word	0x20000e88
 80095f8:	20000ea4 	.word	0x20000ea4

080095fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d058      	beq.n	80096c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009612:	4b2f      	ldr	r3, [pc, #188]	@ (80096d0 <xTaskPriorityDisinherit+0xd4>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d00b      	beq.n	8009634 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60fb      	str	r3, [r7, #12]
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10b      	bne.n	8009654 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60bb      	str	r3, [r7, #8]
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009658:	1e5a      	subs	r2, r3, #1
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009666:	429a      	cmp	r2, r3
 8009668:	d02c      	beq.n	80096c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800966e:	2b00      	cmp	r3, #0
 8009670:	d128      	bne.n	80096c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	3304      	adds	r3, #4
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fb5a 	bl	8007d30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009688:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009694:	4b0f      	ldr	r3, [pc, #60]	@ (80096d4 <xTaskPriorityDisinherit+0xd8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d903      	bls.n	80096a4 <xTaskPriorityDisinherit+0xa8>
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	4a0c      	ldr	r2, [pc, #48]	@ (80096d4 <xTaskPriorityDisinherit+0xd8>)
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4a09      	ldr	r2, [pc, #36]	@ (80096d8 <xTaskPriorityDisinherit+0xdc>)
 80096b2:	441a      	add	r2, r3
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fadb 	bl	8007c76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096c0:	2301      	movs	r3, #1
 80096c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096c4:	697b      	ldr	r3, [r7, #20]
	}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	200009a8 	.word	0x200009a8
 80096d4:	20000e84 	.word	0x20000e84
 80096d8:	200009ac 	.word	0x200009ac

080096dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096e6:	4b21      	ldr	r3, [pc, #132]	@ (800976c <prvAddCurrentTaskToDelayedList+0x90>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096ec:	4b20      	ldr	r3, [pc, #128]	@ (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fb1c 	bl	8007d30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d10a      	bne.n	8009716 <prvAddCurrentTaskToDelayedList+0x3a>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009706:	4b1a      	ldr	r3, [pc, #104]	@ (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3304      	adds	r3, #4
 800970c:	4619      	mov	r1, r3
 800970e:	4819      	ldr	r0, [pc, #100]	@ (8009774 <prvAddCurrentTaskToDelayedList+0x98>)
 8009710:	f7fe fab1 	bl	8007c76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009714:	e026      	b.n	8009764 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4413      	add	r3, r2
 800971c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800971e:	4b14      	ldr	r3, [pc, #80]	@ (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	429a      	cmp	r2, r3
 800972c:	d209      	bcs.n	8009742 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972e:	4b12      	ldr	r3, [pc, #72]	@ (8009778 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b0f      	ldr	r3, [pc, #60]	@ (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3304      	adds	r3, #4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe fabf 	bl	8007cbe <vListInsert>
}
 8009740:	e010      	b.n	8009764 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009742:	4b0e      	ldr	r3, [pc, #56]	@ (800977c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4b0a      	ldr	r3, [pc, #40]	@ (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	4610      	mov	r0, r2
 8009750:	f7fe fab5 	bl	8007cbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009754:	4b0a      	ldr	r3, [pc, #40]	@ (8009780 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	429a      	cmp	r2, r3
 800975c:	d202      	bcs.n	8009764 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800975e:	4a08      	ldr	r2, [pc, #32]	@ (8009780 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	6013      	str	r3, [r2, #0]
}
 8009764:	bf00      	nop
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000e80 	.word	0x20000e80
 8009770:	200009a8 	.word	0x200009a8
 8009774:	20000e68 	.word	0x20000e68
 8009778:	20000e38 	.word	0x20000e38
 800977c:	20000e34 	.word	0x20000e34
 8009780:	20000e9c 	.word	0x20000e9c

08009784 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	@ 0x28
 8009788:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800978e:	f000 fad9 	bl	8009d44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009792:	4b1d      	ldr	r3, [pc, #116]	@ (8009808 <xTimerCreateTimerTask+0x84>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d021      	beq.n	80097de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097a2:	1d3a      	adds	r2, r7, #4
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	f107 030c 	add.w	r3, r7, #12
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fa1b 	bl	8007be8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	2302      	movs	r3, #2
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	2300      	movs	r3, #0
 80097c2:	460a      	mov	r2, r1
 80097c4:	4911      	ldr	r1, [pc, #68]	@ (800980c <xTimerCreateTimerTask+0x88>)
 80097c6:	4812      	ldr	r0, [pc, #72]	@ (8009810 <xTimerCreateTimerTask+0x8c>)
 80097c8:	f7ff f8ce 	bl	8008968 <xTaskCreateStatic>
 80097cc:	4603      	mov	r3, r0
 80097ce:	4a11      	ldr	r2, [pc, #68]	@ (8009814 <xTimerCreateTimerTask+0x90>)
 80097d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097d2:	4b10      	ldr	r3, [pc, #64]	@ (8009814 <xTimerCreateTimerTask+0x90>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097da:	2301      	movs	r3, #1
 80097dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	613b      	str	r3, [r7, #16]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097fc:	697b      	ldr	r3, [r7, #20]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3718      	adds	r7, #24
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20000ed8 	.word	0x20000ed8
 800980c:	0800a6f8 	.word	0x0800a6f8
 8009810:	08009939 	.word	0x08009939
 8009814:	20000edc 	.word	0x20000edc

08009818 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	@ 0x28
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009826:	2300      	movs	r3, #0
 8009828:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10b      	bne.n	8009848 <xTimerGenericCommand+0x30>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	623b      	str	r3, [r7, #32]
}
 8009842:	bf00      	nop
 8009844:	bf00      	nop
 8009846:	e7fd      	b.n	8009844 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009848:	4b19      	ldr	r3, [pc, #100]	@ (80098b0 <xTimerGenericCommand+0x98>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d02a      	beq.n	80098a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b05      	cmp	r3, #5
 8009860:	dc18      	bgt.n	8009894 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009862:	f7ff fead 	bl	80095c0 <xTaskGetSchedulerState>
 8009866:	4603      	mov	r3, r0
 8009868:	2b02      	cmp	r3, #2
 800986a:	d109      	bne.n	8009880 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800986c:	4b10      	ldr	r3, [pc, #64]	@ (80098b0 <xTimerGenericCommand+0x98>)
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	f107 0110 	add.w	r1, r7, #16
 8009874:	2300      	movs	r3, #0
 8009876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009878:	f7fe fc3a 	bl	80080f0 <xQueueGenericSend>
 800987c:	6278      	str	r0, [r7, #36]	@ 0x24
 800987e:	e012      	b.n	80098a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009880:	4b0b      	ldr	r3, [pc, #44]	@ (80098b0 <xTimerGenericCommand+0x98>)
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	f107 0110 	add.w	r1, r7, #16
 8009888:	2300      	movs	r3, #0
 800988a:	2200      	movs	r2, #0
 800988c:	f7fe fc30 	bl	80080f0 <xQueueGenericSend>
 8009890:	6278      	str	r0, [r7, #36]	@ 0x24
 8009892:	e008      	b.n	80098a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009894:	4b06      	ldr	r3, [pc, #24]	@ (80098b0 <xTimerGenericCommand+0x98>)
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	f107 0110 	add.w	r1, r7, #16
 800989c:	2300      	movs	r3, #0
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	f7fe fd28 	bl	80082f4 <xQueueGenericSendFromISR>
 80098a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3728      	adds	r7, #40	@ 0x28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20000ed8 	.word	0x20000ed8

080098b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098be:	4b1d      	ldr	r3, [pc, #116]	@ (8009934 <prvProcessExpiredTimer+0x80>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fa2f 	bl	8007d30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d123      	bne.n	8009922 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	18d1      	adds	r1, r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	6978      	ldr	r0, [r7, #20]
 80098e8:	f000 f8cc 	bl	8009a84 <prvInsertTimerInActiveList>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d017      	beq.n	8009922 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098f2:	2300      	movs	r3, #0
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	2300      	movs	r3, #0
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	2100      	movs	r1, #0
 80098fc:	6978      	ldr	r0, [r7, #20]
 80098fe:	f7ff ff8b 	bl	8009818 <xTimerGenericCommand>
 8009902:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	60fb      	str	r3, [r7, #12]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009926:	6978      	ldr	r0, [r7, #20]
 8009928:	4798      	blx	r3
}
 800992a:	bf00      	nop
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000ed0 	.word	0x20000ed0

08009938 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009940:	f107 0308 	add.w	r3, r7, #8
 8009944:	4618      	mov	r0, r3
 8009946:	f000 f859 	bl	80099fc <prvGetNextExpireTime>
 800994a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4619      	mov	r1, r3
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 f805 	bl	8009960 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009956:	f000 f8d7 	bl	8009b08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800995a:	bf00      	nop
 800995c:	e7f0      	b.n	8009940 <prvTimerTask+0x8>
	...

08009960 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800996a:	f7ff fa37 	bl	8008ddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800996e:	f107 0308 	add.w	r3, r7, #8
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f866 	bl	8009a44 <prvSampleTimeNow>
 8009978:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d130      	bne.n	80099e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <prvProcessTimerOrBlockTask+0x3c>
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	429a      	cmp	r2, r3
 800998c:	d806      	bhi.n	800999c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800998e:	f7ff fa33 	bl	8008df8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff ff8d 	bl	80098b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800999a:	e024      	b.n	80099e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d008      	beq.n	80099b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099a2:	4b13      	ldr	r3, [pc, #76]	@ (80099f0 <prvProcessTimerOrBlockTask+0x90>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099b4:	4b0f      	ldr	r3, [pc, #60]	@ (80099f4 <prvProcessTimerOrBlockTask+0x94>)
 80099b6:	6818      	ldr	r0, [r3, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	4619      	mov	r1, r3
 80099c2:	f7fe ff9d 	bl	8008900 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099c6:	f7ff fa17 	bl	8008df8 <xTaskResumeAll>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099d0:	4b09      	ldr	r3, [pc, #36]	@ (80099f8 <prvProcessTimerOrBlockTask+0x98>)
 80099d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
}
 80099e0:	e001      	b.n	80099e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099e2:	f7ff fa09 	bl	8008df8 <xTaskResumeAll>
}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000ed4 	.word	0x20000ed4
 80099f4:	20000ed8 	.word	0x20000ed8
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a04:	4b0e      	ldr	r3, [pc, #56]	@ (8009a40 <prvGetNextExpireTime+0x44>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bf0c      	ite	eq
 8009a0e:	2301      	moveq	r3, #1
 8009a10:	2300      	movne	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	461a      	mov	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d105      	bne.n	8009a2e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a22:	4b07      	ldr	r3, [pc, #28]	@ (8009a40 <prvGetNextExpireTime+0x44>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	e001      	b.n	8009a32 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a32:	68fb      	ldr	r3, [r7, #12]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	20000ed0 	.word	0x20000ed0

08009a44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a4c:	f7ff fa72 	bl	8008f34 <xTaskGetTickCount>
 8009a50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a52:	4b0b      	ldr	r3, [pc, #44]	@ (8009a80 <prvSampleTimeNow+0x3c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d205      	bcs.n	8009a68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a5c:	f000 f910 	bl	8009c80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	e002      	b.n	8009a6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a6e:	4a04      	ldr	r2, [pc, #16]	@ (8009a80 <prvSampleTimeNow+0x3c>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a74:	68fb      	ldr	r3, [r7, #12]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000ee0 	.word	0x20000ee0

08009a84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d812      	bhi.n	8009ad0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	1ad2      	subs	r2, r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d302      	bcc.n	8009abe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e01b      	b.n	8009af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009abe:	4b10      	ldr	r3, [pc, #64]	@ (8009b00 <prvInsertTimerInActiveList+0x7c>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7fe f8f8 	bl	8007cbe <vListInsert>
 8009ace:	e012      	b.n	8009af6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d206      	bcs.n	8009ae6 <prvInsertTimerInActiveList+0x62>
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d302      	bcc.n	8009ae6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	e007      	b.n	8009af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ae6:	4b07      	ldr	r3, [pc, #28]	@ (8009b04 <prvInsertTimerInActiveList+0x80>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3304      	adds	r3, #4
 8009aee:	4619      	mov	r1, r3
 8009af0:	4610      	mov	r0, r2
 8009af2:	f7fe f8e4 	bl	8007cbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009af6:	697b      	ldr	r3, [r7, #20]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000ed4 	.word	0x20000ed4
 8009b04:	20000ed0 	.word	0x20000ed0

08009b08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	@ 0x38
 8009b0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b0e:	e0a5      	b.n	8009c5c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da19      	bge.n	8009b4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b16:	1d3b      	adds	r3, r7, #4
 8009b18:	3304      	adds	r3, #4
 8009b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	61fb      	str	r3, [r7, #28]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b40:	6850      	ldr	r0, [r2, #4]
 8009b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b44:	6892      	ldr	r2, [r2, #8]
 8009b46:	4611      	mov	r1, r2
 8009b48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f2c0 8085 	blt.w	8009c5c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	3304      	adds	r3, #4
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe f8e4 	bl	8007d30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b68:	463b      	mov	r3, r7
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff ff6a 	bl	8009a44 <prvSampleTimeNow>
 8009b70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	d86c      	bhi.n	8009c52 <prvProcessReceivedCommands+0x14a>
 8009b78:	a201      	add	r2, pc, #4	@ (adr r2, 8009b80 <prvProcessReceivedCommands+0x78>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009ba9 	.word	0x08009ba9
 8009b8c:	08009c53 	.word	0x08009c53
 8009b90:	08009c07 	.word	0x08009c07
 8009b94:	08009c41 	.word	0x08009c41
 8009b98:	08009ba9 	.word	0x08009ba9
 8009b9c:	08009ba9 	.word	0x08009ba9
 8009ba0:	08009c53 	.word	0x08009c53
 8009ba4:	08009c07 	.word	0x08009c07
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	18d1      	adds	r1, r2, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bb6:	f7ff ff65 	bl	8009a84 <prvInsertTimerInActiveList>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d04a      	beq.n	8009c56 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d142      	bne.n	8009c56 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	441a      	add	r2, r3
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009be2:	f7ff fe19 	bl	8009818 <xTimerGenericCommand>
 8009be6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d133      	bne.n	8009c56 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	61bb      	str	r3, [r7, #24]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10b      	bne.n	8009c2c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	617b      	str	r3, [r7, #20]
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	e7fd      	b.n	8009c28 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	18d1      	adds	r1, r2, r3
 8009c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c3a:	f7ff ff23 	bl	8009a84 <prvInsertTimerInActiveList>
					break;
 8009c3e:	e00d      	b.n	8009c5c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d107      	bne.n	8009c5a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8009c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c4c:	f000 fbd6 	bl	800a3fc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c50:	e003      	b.n	8009c5a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8009c52:	bf00      	nop
 8009c54:	e002      	b.n	8009c5c <prvProcessReceivedCommands+0x154>
					break;
 8009c56:	bf00      	nop
 8009c58:	e000      	b.n	8009c5c <prvProcessReceivedCommands+0x154>
					break;
 8009c5a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c5c:	4b07      	ldr	r3, [pc, #28]	@ (8009c7c <prvProcessReceivedCommands+0x174>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	1d39      	adds	r1, r7, #4
 8009c62:	2200      	movs	r2, #0
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe fbe1 	bl	800842c <xQueueReceive>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f47f af4f 	bne.w	8009b10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	3730      	adds	r7, #48	@ 0x30
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	20000ed8 	.word	0x20000ed8

08009c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c86:	e046      	b.n	8009d16 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c88:	4b2c      	ldr	r3, [pc, #176]	@ (8009d3c <prvSwitchTimerLists+0xbc>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c92:	4b2a      	ldr	r3, [pc, #168]	@ (8009d3c <prvSwitchTimerLists+0xbc>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe f845 	bl	8007d30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d12f      	bne.n	8009d16 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d90e      	bls.n	8009ce6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cd4:	4b19      	ldr	r3, [pc, #100]	@ (8009d3c <prvSwitchTimerLists+0xbc>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f7fd ffed 	bl	8007cbe <vListInsert>
 8009ce4:	e017      	b.n	8009d16 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	2300      	movs	r3, #0
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	2100      	movs	r1, #0
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff fd91 	bl	8009818 <xTimerGenericCommand>
 8009cf6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10b      	bne.n	8009d16 <prvSwitchTimerLists+0x96>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	603b      	str	r3, [r7, #0]
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	e7fd      	b.n	8009d12 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d16:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <prvSwitchTimerLists+0xbc>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1b3      	bne.n	8009c88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d20:	4b06      	ldr	r3, [pc, #24]	@ (8009d3c <prvSwitchTimerLists+0xbc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d26:	4b06      	ldr	r3, [pc, #24]	@ (8009d40 <prvSwitchTimerLists+0xc0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a04      	ldr	r2, [pc, #16]	@ (8009d3c <prvSwitchTimerLists+0xbc>)
 8009d2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d2e:	4a04      	ldr	r2, [pc, #16]	@ (8009d40 <prvSwitchTimerLists+0xc0>)
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	6013      	str	r3, [r2, #0]
}
 8009d34:	bf00      	nop
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000ed0 	.word	0x20000ed0
 8009d40:	20000ed4 	.word	0x20000ed4

08009d44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d4a:	f000 f96d 	bl	800a028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d4e:	4b15      	ldr	r3, [pc, #84]	@ (8009da4 <prvCheckForValidListAndQueue+0x60>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d120      	bne.n	8009d98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d56:	4814      	ldr	r0, [pc, #80]	@ (8009da8 <prvCheckForValidListAndQueue+0x64>)
 8009d58:	f7fd ff60 	bl	8007c1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d5c:	4813      	ldr	r0, [pc, #76]	@ (8009dac <prvCheckForValidListAndQueue+0x68>)
 8009d5e:	f7fd ff5d 	bl	8007c1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d62:	4b13      	ldr	r3, [pc, #76]	@ (8009db0 <prvCheckForValidListAndQueue+0x6c>)
 8009d64:	4a10      	ldr	r2, [pc, #64]	@ (8009da8 <prvCheckForValidListAndQueue+0x64>)
 8009d66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d68:	4b12      	ldr	r3, [pc, #72]	@ (8009db4 <prvCheckForValidListAndQueue+0x70>)
 8009d6a:	4a10      	ldr	r2, [pc, #64]	@ (8009dac <prvCheckForValidListAndQueue+0x68>)
 8009d6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	4b11      	ldr	r3, [pc, #68]	@ (8009db8 <prvCheckForValidListAndQueue+0x74>)
 8009d74:	4a11      	ldr	r2, [pc, #68]	@ (8009dbc <prvCheckForValidListAndQueue+0x78>)
 8009d76:	2110      	movs	r1, #16
 8009d78:	200a      	movs	r0, #10
 8009d7a:	f7fe f86d 	bl	8007e58 <xQueueGenericCreateStatic>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4a08      	ldr	r2, [pc, #32]	@ (8009da4 <prvCheckForValidListAndQueue+0x60>)
 8009d82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d84:	4b07      	ldr	r3, [pc, #28]	@ (8009da4 <prvCheckForValidListAndQueue+0x60>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <prvCheckForValidListAndQueue+0x60>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	490b      	ldr	r1, [pc, #44]	@ (8009dc0 <prvCheckForValidListAndQueue+0x7c>)
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe fd60 	bl	8008858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d98:	f000 f978 	bl	800a08c <vPortExitCritical>
}
 8009d9c:	bf00      	nop
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000ed8 	.word	0x20000ed8
 8009da8:	20000ea8 	.word	0x20000ea8
 8009dac:	20000ebc 	.word	0x20000ebc
 8009db0:	20000ed0 	.word	0x20000ed0
 8009db4:	20000ed4 	.word	0x20000ed4
 8009db8:	20000f84 	.word	0x20000f84
 8009dbc:	20000ee4 	.word	0x20000ee4
 8009dc0:	0800a700 	.word	0x0800a700

08009dc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3b04      	subs	r3, #4
 8009dd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3b04      	subs	r3, #4
 8009de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f023 0201 	bic.w	r2, r3, #1
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3b04      	subs	r3, #4
 8009df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009df4:	4a0c      	ldr	r2, [pc, #48]	@ (8009e28 <pxPortInitialiseStack+0x64>)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3b14      	subs	r3, #20
 8009dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3b04      	subs	r3, #4
 8009e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f06f 0202 	mvn.w	r2, #2
 8009e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3b20      	subs	r3, #32
 8009e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	08009e2d 	.word	0x08009e2d

08009e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e36:	4b13      	ldr	r3, [pc, #76]	@ (8009e84 <prvTaskExitError+0x58>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d00b      	beq.n	8009e58 <prvTaskExitError+0x2c>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	60fb      	str	r3, [r7, #12]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <prvTaskExitError+0x28>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	60bb      	str	r3, [r7, #8]
}
 8009e6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e6c:	bf00      	nop
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0fc      	beq.n	8009e6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000010 	.word	0x20000010
	...

08009e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e90:	4b07      	ldr	r3, [pc, #28]	@ (8009eb0 <pxCurrentTCBConst2>)
 8009e92:	6819      	ldr	r1, [r3, #0]
 8009e94:	6808      	ldr	r0, [r1, #0]
 8009e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	f380 8809 	msr	PSP, r0
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f04f 0000 	mov.w	r0, #0
 8009ea6:	f380 8811 	msr	BASEPRI, r0
 8009eaa:	4770      	bx	lr
 8009eac:	f3af 8000 	nop.w

08009eb0 <pxCurrentTCBConst2>:
 8009eb0:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop

08009eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009eb8:	4808      	ldr	r0, [pc, #32]	@ (8009edc <prvPortStartFirstTask+0x24>)
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	6800      	ldr	r0, [r0, #0]
 8009ebe:	f380 8808 	msr	MSP, r0
 8009ec2:	f04f 0000 	mov.w	r0, #0
 8009ec6:	f380 8814 	msr	CONTROL, r0
 8009eca:	b662      	cpsie	i
 8009ecc:	b661      	cpsie	f
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	df00      	svc	0
 8009ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eda:	bf00      	nop
 8009edc:	e000ed08 	.word	0xe000ed08

08009ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ee6:	4b47      	ldr	r3, [pc, #284]	@ (800a004 <xPortStartScheduler+0x124>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a47      	ldr	r2, [pc, #284]	@ (800a008 <xPortStartScheduler+0x128>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d10b      	bne.n	8009f08 <xPortStartScheduler+0x28>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	e7fd      	b.n	8009f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f08:	4b3e      	ldr	r3, [pc, #248]	@ (800a004 <xPortStartScheduler+0x124>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800a00c <xPortStartScheduler+0x12c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d10b      	bne.n	8009f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60fb      	str	r3, [r7, #12]
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop
 8009f28:	e7fd      	b.n	8009f26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f2a:	4b39      	ldr	r3, [pc, #228]	@ (800a010 <xPortStartScheduler+0x130>)
 8009f2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	22ff      	movs	r2, #255	@ 0xff
 8009f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	4b31      	ldr	r3, [pc, #196]	@ (800a014 <xPortStartScheduler+0x134>)
 8009f50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f52:	4b31      	ldr	r3, [pc, #196]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f54:	2207      	movs	r2, #7
 8009f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f58:	e009      	b.n	8009f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f5a:	4b2f      	ldr	r3, [pc, #188]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	4a2d      	ldr	r2, [pc, #180]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f76:	2b80      	cmp	r3, #128	@ 0x80
 8009f78:	d0ef      	beq.n	8009f5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f7a:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f1c3 0307 	rsb	r3, r3, #7
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d00b      	beq.n	8009f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	60bb      	str	r3, [r7, #8]
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	e7fd      	b.n	8009f9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f9e:	4b1e      	ldr	r3, [pc, #120]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	4a1c      	ldr	r2, [pc, #112]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fa8:	4b1b      	ldr	r3, [pc, #108]	@ (800a018 <xPortStartScheduler+0x138>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fb0:	4a19      	ldr	r2, [pc, #100]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fbc:	4b17      	ldr	r3, [pc, #92]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fc8:	4b14      	ldr	r3, [pc, #80]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a13      	ldr	r2, [pc, #76]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fd4:	f000 f8da 	bl	800a18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fd8:	4b11      	ldr	r3, [pc, #68]	@ (800a020 <xPortStartScheduler+0x140>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fde:	f000 f8f9 	bl	800a1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fe2:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <xPortStartScheduler+0x144>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a0f      	ldr	r2, [pc, #60]	@ (800a024 <xPortStartScheduler+0x144>)
 8009fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fee:	f7ff ff63 	bl	8009eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ff2:	f7ff f86f 	bl	80090d4 <vTaskSwitchContext>
	prvTaskExitError();
 8009ff6:	f7ff ff19 	bl	8009e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	e000ed00 	.word	0xe000ed00
 800a008:	410fc271 	.word	0x410fc271
 800a00c:	410fc270 	.word	0x410fc270
 800a010:	e000e400 	.word	0xe000e400
 800a014:	20000fd4 	.word	0x20000fd4
 800a018:	20000fd8 	.word	0x20000fd8
 800a01c:	e000ed20 	.word	0xe000ed20
 800a020:	20000010 	.word	0x20000010
 800a024:	e000ef34 	.word	0xe000ef34

0800a028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a042:	4b10      	ldr	r3, [pc, #64]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3301      	adds	r3, #1
 800a048:	4a0e      	ldr	r2, [pc, #56]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a04a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a04c:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d110      	bne.n	800a076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a054:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <vPortEnterCritical+0x60>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <vPortEnterCritical+0x4e>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	603b      	str	r3, [r7, #0]
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	e7fd      	b.n	800a072 <vPortEnterCritical+0x4a>
	}
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20000010 	.word	0x20000010
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a092:	4b12      	ldr	r3, [pc, #72]	@ (800a0dc <vPortExitCritical+0x50>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <vPortExitCritical+0x26>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	607b      	str	r3, [r7, #4]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	4a08      	ldr	r2, [pc, #32]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0bc:	4b07      	ldr	r3, [pc, #28]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d105      	bne.n	800a0d0 <vPortExitCritical+0x44>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	f383 8811 	msr	BASEPRI, r3
}
 800a0ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000010 	.word	0x20000010

0800a0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0e0:	f3ef 8009 	mrs	r0, PSP
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	4b15      	ldr	r3, [pc, #84]	@ (800a140 <pxCurrentTCBConst>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	f01e 0f10 	tst.w	lr, #16
 800a0f0:	bf08      	it	eq
 800a0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	6010      	str	r0, [r2, #0]
 800a0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a104:	f380 8811 	msr	BASEPRI, r0
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f7fe ffe0 	bl	80090d4 <vTaskSwitchContext>
 800a114:	f04f 0000 	mov.w	r0, #0
 800a118:	f380 8811 	msr	BASEPRI, r0
 800a11c:	bc09      	pop	{r0, r3}
 800a11e:	6819      	ldr	r1, [r3, #0]
 800a120:	6808      	ldr	r0, [r1, #0]
 800a122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a126:	f01e 0f10 	tst.w	lr, #16
 800a12a:	bf08      	it	eq
 800a12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a130:	f380 8809 	msr	PSP, r0
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	f3af 8000 	nop.w

0800a140 <pxCurrentTCBConst>:
 800a140:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop

0800a148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	607b      	str	r3, [r7, #4]
}
 800a160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a162:	f7fe fef7 	bl	8008f54 <xTaskIncrementTick>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a16c:	4b06      	ldr	r3, [pc, #24]	@ (800a188 <SysTick_Handler+0x40>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	2300      	movs	r3, #0
 800a176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	f383 8811 	msr	BASEPRI, r3
}
 800a17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	e000ed04 	.word	0xe000ed04

0800a18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a190:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a196:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <vPortSetupTimerInterrupt+0x38>)
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a19c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c8 <vPortSetupTimerInterrupt+0x3c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1cc <vPortSetupTimerInterrupt+0x40>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	099b      	lsrs	r3, r3, #6
 800a1a8:	4a09      	ldr	r2, [pc, #36]	@ (800a1d0 <vPortSetupTimerInterrupt+0x44>)
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1ae:	4b04      	ldr	r3, [pc, #16]	@ (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	601a      	str	r2, [r3, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	e000e010 	.word	0xe000e010
 800a1c4:	e000e018 	.word	0xe000e018
 800a1c8:	20000004 	.word	0x20000004
 800a1cc:	10624dd3 	.word	0x10624dd3
 800a1d0:	e000e014 	.word	0xe000e014

0800a1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1e4 <vPortEnableVFP+0x10>
 800a1d8:	6801      	ldr	r1, [r0, #0]
 800a1da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1de:	6001      	str	r1, [r0, #0]
 800a1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1e2:	bf00      	nop
 800a1e4:	e000ed88 	.word	0xe000ed88

0800a1e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ee:	f3ef 8305 	mrs	r3, IPSR
 800a1f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	d915      	bls.n	800a226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1fa:	4a18      	ldr	r2, [pc, #96]	@ (800a25c <vPortValidateInterruptPriority+0x74>)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a204:	4b16      	ldr	r3, [pc, #88]	@ (800a260 <vPortValidateInterruptPriority+0x78>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	7afa      	ldrb	r2, [r7, #11]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d20b      	bcs.n	800a226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	607b      	str	r3, [r7, #4]
}
 800a220:	bf00      	nop
 800a222:	bf00      	nop
 800a224:	e7fd      	b.n	800a222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a226:	4b0f      	ldr	r3, [pc, #60]	@ (800a264 <vPortValidateInterruptPriority+0x7c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a22e:	4b0e      	ldr	r3, [pc, #56]	@ (800a268 <vPortValidateInterruptPriority+0x80>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d90b      	bls.n	800a24e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	603b      	str	r3, [r7, #0]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <vPortValidateInterruptPriority+0x62>
	}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	e000e3f0 	.word	0xe000e3f0
 800a260:	20000fd4 	.word	0x20000fd4
 800a264:	e000ed0c 	.word	0xe000ed0c
 800a268:	20000fd8 	.word	0x20000fd8

0800a26c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08a      	sub	sp, #40	@ 0x28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a278:	f7fe fdb0 	bl	8008ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a27c:	4b5a      	ldr	r3, [pc, #360]	@ (800a3e8 <pvPortMalloc+0x17c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a284:	f000 f916 	bl	800a4b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a288:	4b58      	ldr	r3, [pc, #352]	@ (800a3ec <pvPortMalloc+0x180>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4013      	ands	r3, r2
 800a290:	2b00      	cmp	r3, #0
 800a292:	f040 8090 	bne.w	800a3b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01e      	beq.n	800a2da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a29c:	2208      	movs	r2, #8
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d015      	beq.n	800a2da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f023 0307 	bic.w	r3, r3, #7
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <pvPortMalloc+0x6e>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	617b      	str	r3, [r7, #20]
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	e7fd      	b.n	800a2d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d06a      	beq.n	800a3b6 <pvPortMalloc+0x14a>
 800a2e0:	4b43      	ldr	r3, [pc, #268]	@ (800a3f0 <pvPortMalloc+0x184>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d865      	bhi.n	800a3b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2ea:	4b42      	ldr	r3, [pc, #264]	@ (800a3f4 <pvPortMalloc+0x188>)
 800a2ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2ee:	4b41      	ldr	r3, [pc, #260]	@ (800a3f4 <pvPortMalloc+0x188>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2f4:	e004      	b.n	800a300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d903      	bls.n	800a312 <pvPortMalloc+0xa6>
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f1      	bne.n	800a2f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a312:	4b35      	ldr	r3, [pc, #212]	@ (800a3e8 <pvPortMalloc+0x17c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a318:	429a      	cmp	r2, r3
 800a31a:	d04c      	beq.n	800a3b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2208      	movs	r2, #8
 800a322:	4413      	add	r3, r2
 800a324:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	1ad2      	subs	r2, r2, r3
 800a336:	2308      	movs	r3, #8
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d920      	bls.n	800a380 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4413      	add	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <pvPortMalloc+0xfc>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	613b      	str	r3, [r7, #16]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	1ad2      	subs	r2, r2, r3
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a37a:	69b8      	ldr	r0, [r7, #24]
 800a37c:	f000 f8fc 	bl	800a578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a380:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f0 <pvPortMalloc+0x184>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	4a19      	ldr	r2, [pc, #100]	@ (800a3f0 <pvPortMalloc+0x184>)
 800a38c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a38e:	4b18      	ldr	r3, [pc, #96]	@ (800a3f0 <pvPortMalloc+0x184>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b19      	ldr	r3, [pc, #100]	@ (800a3f8 <pvPortMalloc+0x18c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	429a      	cmp	r2, r3
 800a398:	d203      	bcs.n	800a3a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a39a:	4b15      	ldr	r3, [pc, #84]	@ (800a3f0 <pvPortMalloc+0x184>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a16      	ldr	r2, [pc, #88]	@ (800a3f8 <pvPortMalloc+0x18c>)
 800a3a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	4b11      	ldr	r3, [pc, #68]	@ (800a3ec <pvPortMalloc+0x180>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3b6:	f7fe fd1f 	bl	8008df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <pvPortMalloc+0x170>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
 800a3da:	e7fd      	b.n	800a3d8 <pvPortMalloc+0x16c>
	return pvReturn;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3728      	adds	r7, #40	@ 0x28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20001d90 	.word	0x20001d90
 800a3ec:	20001d9c 	.word	0x20001d9c
 800a3f0:	20001d94 	.word	0x20001d94
 800a3f4:	20001d88 	.word	0x20001d88
 800a3f8:	20001d98 	.word	0x20001d98

0800a3fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d04a      	beq.n	800a4a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a40e:	2308      	movs	r3, #8
 800a410:	425b      	negs	r3, r3
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	4413      	add	r3, r2
 800a416:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	4b22      	ldr	r3, [pc, #136]	@ (800a4ac <vPortFree+0xb0>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4013      	ands	r3, r2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10b      	bne.n	800a442 <vPortFree+0x46>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	60fb      	str	r3, [r7, #12]
}
 800a43c:	bf00      	nop
 800a43e:	bf00      	nop
 800a440:	e7fd      	b.n	800a43e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00b      	beq.n	800a462 <vPortFree+0x66>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	60bb      	str	r3, [r7, #8]
}
 800a45c:	bf00      	nop
 800a45e:	bf00      	nop
 800a460:	e7fd      	b.n	800a45e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	4b11      	ldr	r3, [pc, #68]	@ (800a4ac <vPortFree+0xb0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4013      	ands	r3, r2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d019      	beq.n	800a4a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d115      	bne.n	800a4a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b0b      	ldr	r3, [pc, #44]	@ (800a4ac <vPortFree+0xb0>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	43db      	mvns	r3, r3
 800a482:	401a      	ands	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a488:	f7fe fca8 	bl	8008ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	4b07      	ldr	r3, [pc, #28]	@ (800a4b0 <vPortFree+0xb4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4413      	add	r3, r2
 800a496:	4a06      	ldr	r2, [pc, #24]	@ (800a4b0 <vPortFree+0xb4>)
 800a498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a49a:	6938      	ldr	r0, [r7, #16]
 800a49c:	f000 f86c 	bl	800a578 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a4a0:	f7fe fcaa 	bl	8008df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4a4:	bf00      	nop
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	20001d9c 	.word	0x20001d9c
 800a4b0:	20001d94 	.word	0x20001d94

0800a4b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4ba:	f640 53ac 	movw	r3, #3500	@ 0xdac
 800a4be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4c0:	4b27      	ldr	r3, [pc, #156]	@ (800a560 <prvHeapInit+0xac>)
 800a4c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00c      	beq.n	800a4e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3307      	adds	r3, #7
 800a4d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0307 	bic.w	r3, r3, #7
 800a4da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a560 <prvHeapInit+0xac>)
 800a4e4:	4413      	add	r3, r2
 800a4e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a564 <prvHeapInit+0xb0>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a564 <prvHeapInit+0xb0>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a500:	2208      	movs	r2, #8
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1a9b      	subs	r3, r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f023 0307 	bic.w	r3, r3, #7
 800a50e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4a15      	ldr	r2, [pc, #84]	@ (800a568 <prvHeapInit+0xb4>)
 800a514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a516:	4b14      	ldr	r3, [pc, #80]	@ (800a568 <prvHeapInit+0xb4>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a51e:	4b12      	ldr	r3, [pc, #72]	@ (800a568 <prvHeapInit+0xb4>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a534:	4b0c      	ldr	r3, [pc, #48]	@ (800a568 <prvHeapInit+0xb4>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4a0a      	ldr	r2, [pc, #40]	@ (800a56c <prvHeapInit+0xb8>)
 800a542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	4a09      	ldr	r2, [pc, #36]	@ (800a570 <prvHeapInit+0xbc>)
 800a54a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a54c:	4b09      	ldr	r3, [pc, #36]	@ (800a574 <prvHeapInit+0xc0>)
 800a54e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a552:	601a      	str	r2, [r3, #0]
}
 800a554:	bf00      	nop
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	20000fdc 	.word	0x20000fdc
 800a564:	20001d88 	.word	0x20001d88
 800a568:	20001d90 	.word	0x20001d90
 800a56c:	20001d98 	.word	0x20001d98
 800a570:	20001d94 	.word	0x20001d94
 800a574:	20001d9c 	.word	0x20001d9c

0800a578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a580:	4b28      	ldr	r3, [pc, #160]	@ (800a624 <prvInsertBlockIntoFreeList+0xac>)
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	e002      	b.n	800a58c <prvInsertBlockIntoFreeList+0x14>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d8f7      	bhi.n	800a586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d108      	bne.n	800a5ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	441a      	add	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d118      	bne.n	800a600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	4b15      	ldr	r3, [pc, #84]	@ (800a628 <prvInsertBlockIntoFreeList+0xb0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d00d      	beq.n	800a5f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	441a      	add	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	e008      	b.n	800a608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a628 <prvInsertBlockIntoFreeList+0xb0>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	e003      	b.n	800a608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d002      	beq.n	800a616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20001d88 	.word	0x20001d88
 800a628:	20001d90 	.word	0x20001d90

0800a62c <memset>:
 800a62c:	4402      	add	r2, r0
 800a62e:	4603      	mov	r3, r0
 800a630:	4293      	cmp	r3, r2
 800a632:	d100      	bne.n	800a636 <memset+0xa>
 800a634:	4770      	bx	lr
 800a636:	f803 1b01 	strb.w	r1, [r3], #1
 800a63a:	e7f9      	b.n	800a630 <memset+0x4>

0800a63c <__libc_init_array>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4d0d      	ldr	r5, [pc, #52]	@ (800a674 <__libc_init_array+0x38>)
 800a640:	4c0d      	ldr	r4, [pc, #52]	@ (800a678 <__libc_init_array+0x3c>)
 800a642:	1b64      	subs	r4, r4, r5
 800a644:	10a4      	asrs	r4, r4, #2
 800a646:	2600      	movs	r6, #0
 800a648:	42a6      	cmp	r6, r4
 800a64a:	d109      	bne.n	800a660 <__libc_init_array+0x24>
 800a64c:	4d0b      	ldr	r5, [pc, #44]	@ (800a67c <__libc_init_array+0x40>)
 800a64e:	4c0c      	ldr	r4, [pc, #48]	@ (800a680 <__libc_init_array+0x44>)
 800a650:	f000 f826 	bl	800a6a0 <_init>
 800a654:	1b64      	subs	r4, r4, r5
 800a656:	10a4      	asrs	r4, r4, #2
 800a658:	2600      	movs	r6, #0
 800a65a:	42a6      	cmp	r6, r4
 800a65c:	d105      	bne.n	800a66a <__libc_init_array+0x2e>
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	f855 3b04 	ldr.w	r3, [r5], #4
 800a664:	4798      	blx	r3
 800a666:	3601      	adds	r6, #1
 800a668:	e7ee      	b.n	800a648 <__libc_init_array+0xc>
 800a66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a66e:	4798      	blx	r3
 800a670:	3601      	adds	r6, #1
 800a672:	e7f2      	b.n	800a65a <__libc_init_array+0x1e>
 800a674:	0800a804 	.word	0x0800a804
 800a678:	0800a804 	.word	0x0800a804
 800a67c:	0800a804 	.word	0x0800a804
 800a680:	0800a808 	.word	0x0800a808

0800a684 <memcpy>:
 800a684:	440a      	add	r2, r1
 800a686:	4291      	cmp	r1, r2
 800a688:	f100 33ff 	add.w	r3, r0, #4294967295
 800a68c:	d100      	bne.n	800a690 <memcpy+0xc>
 800a68e:	4770      	bx	lr
 800a690:	b510      	push	{r4, lr}
 800a692:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a69a:	4291      	cmp	r1, r2
 800a69c:	d1f9      	bne.n	800a692 <memcpy+0xe>
 800a69e:	bd10      	pop	{r4, pc}

0800a6a0 <_init>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf00      	nop
 800a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a6:	bc08      	pop	{r3}
 800a6a8:	469e      	mov	lr, r3
 800a6aa:	4770      	bx	lr

0800a6ac <_fini>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	bf00      	nop
 800a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b2:	bc08      	pop	{r3}
 800a6b4:	469e      	mov	lr, r3
 800a6b6:	4770      	bx	lr
