
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004968  08004968  00005968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a58  08004a58  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004a58  08004a58  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a58  08004a58  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a58  08004a58  00005a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a5c  08004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004a60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a08  20000014  08004a74  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  08004a74  00006a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001542a  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ce  00000000  00000000  0001b467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0001e738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edf  00000000  00000000  0001fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f08  00000000  00000000  00020937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016287  00000000  00000000  0003983f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936c2  00000000  00000000  0004fac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f50  00000000  00000000  000e31cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004950 	.word	0x08004950

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004950 	.word	0x08004950

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED1 */
  LED1Handle = osThreadNew(LED1_T, NULL, &LED1_attributes);
 8000154:	4a10      	ldr	r2, [pc, #64]	@ (8000198 <MX_FREERTOS_Init+0x48>)
 8000156:	2100      	movs	r1, #0
 8000158:	4810      	ldr	r0, [pc, #64]	@ (800019c <MX_FREERTOS_Init+0x4c>)
 800015a:	f001 fe95 	bl	8001e88 <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a0f      	ldr	r2, [pc, #60]	@ (80001a0 <MX_FREERTOS_Init+0x50>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of LED2 */
  LED2Handle = osThreadNew(LED2_T, NULL, &LED2_attributes);
 8000164:	4a0f      	ldr	r2, [pc, #60]	@ (80001a4 <MX_FREERTOS_Init+0x54>)
 8000166:	2100      	movs	r1, #0
 8000168:	480f      	ldr	r0, [pc, #60]	@ (80001a8 <MX_FREERTOS_Init+0x58>)
 800016a:	f001 fe8d 	bl	8001e88 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0e      	ldr	r2, [pc, #56]	@ (80001ac <MX_FREERTOS_Init+0x5c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of LED3 */
  LED3Handle = osThreadNew(LED3_T, NULL, &LED3_attributes);
 8000174:	4a0e      	ldr	r2, [pc, #56]	@ (80001b0 <MX_FREERTOS_Init+0x60>)
 8000176:	2100      	movs	r1, #0
 8000178:	480e      	ldr	r0, [pc, #56]	@ (80001b4 <MX_FREERTOS_Init+0x64>)
 800017a:	f001 fe85 	bl	8001e88 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0d      	ldr	r2, [pc, #52]	@ (80001b8 <MX_FREERTOS_Init+0x68>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of sw_ */
  sw_Handle = osThreadNew(SW_T, NULL, &sw__attributes);
 8000184:	4a0d      	ldr	r2, [pc, #52]	@ (80001bc <MX_FREERTOS_Init+0x6c>)
 8000186:	2100      	movs	r1, #0
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_FREERTOS_Init+0x70>)
 800018a:	f001 fe7d 	bl	8001e88 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0c      	ldr	r2, [pc, #48]	@ (80001c4 <MX_FREERTOS_Init+0x74>)
 8000192:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	0800499c 	.word	0x0800499c
 800019c:	080001c9 	.word	0x080001c9
 80001a0:	20000030 	.word	0x20000030
 80001a4:	080049c0 	.word	0x080049c0
 80001a8:	0800021d 	.word	0x0800021d
 80001ac:	20000034 	.word	0x20000034
 80001b0:	080049e4 	.word	0x080049e4
 80001b4:	08000241 	.word	0x08000241
 80001b8:	20000038 	.word	0x20000038
 80001bc:	08004a08 	.word	0x08004a08
 80001c0:	08000265 	.word	0x08000265
 80001c4:	2000003c 	.word	0x2000003c

080001c8 <LED1_T>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LED1_T */
void LED1_T(void *argument)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED1_T */
  /* Infinite loop */
  TickType_t xLastWakeTime;  /* variable generated  for the VtaskDelayUntil Function  */
  //const TickType_t xFrequency = pdMS_TO_TICKS(500); /* dealy for 500 ms : the function dMS_TO_TICKS convert the ms to ticks */
  /* Get the current system tick count */
  xLastWakeTime = xTaskGetTickCount(); /*The count of ticks since vTaskStartScheduler was called. and it updated inside the kernel*/
 80001d0:	f003 f870 	bl	80032b4 <xTaskGetTickCount>
 80001d4:	4603      	mov	r3, r0
 80001d6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80001d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001dc:	480c      	ldr	r0, [pc, #48]	@ (8000210 <LED1_T+0x48>)
 80001de:	f000 fd7a 	bl	8000cd6 <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&xLastWakeTime,(Speed*100));
 80001e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <LED1_T+0x4c>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	461a      	mov	r2, r3
 80001e8:	2364      	movs	r3, #100	@ 0x64
 80001ea:	fb02 f303 	mul.w	r3, r2, r3
 80001ee:	461a      	mov	r2, r3
 80001f0:	f107 030c 	add.w	r3, r7, #12
 80001f4:	4611      	mov	r1, r2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 fe92 	bl	8002f20 <vTaskDelayUntil>
    HAL_UART_Transmit(&huart1,&Speed,1,HAL_MAX_DELAY);
 80001fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000200:	2201      	movs	r2, #1
 8000202:	4904      	ldr	r1, [pc, #16]	@ (8000214 <LED1_T+0x4c>)
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <LED1_T+0x50>)
 8000206:	f001 fc59 	bl	8001abc <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800020a:	bf00      	nop
 800020c:	e7e4      	b.n	80001d8 <LED1_T+0x10>
 800020e:	bf00      	nop
 8000210:	40011000 	.word	0x40011000
 8000214:	20000000 	.word	0x20000000
 8000218:	20000088 	.word	0x20000088

0800021c <LED2_T>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED2_T */
void LED2_T(void *argument)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED2_T */
  
  TickType_t XlastWakeTime;
  const TickType_t Xfrequency = pdMS_TO_TICKS(1000);
 8000224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000228:	60fb      	str	r3, [r7, #12]
  /*get the current system tick count*/
  XlastWakeTime = xTaskGetTickCount();
 800022a:	f003 f843 	bl	80032b4 <xTaskGetTickCount>
 800022e:	4603      	mov	r3, r0
 8000230:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {

    // HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
     vTaskDelayUntil(&XlastWakeTime,Xfrequency);
 8000232:	f107 0308 	add.w	r3, r7, #8
 8000236:	68f9      	ldr	r1, [r7, #12]
 8000238:	4618      	mov	r0, r3
 800023a:	f002 fe71 	bl	8002f20 <vTaskDelayUntil>
 800023e:	e7f8      	b.n	8000232 <LED2_T+0x16>

08000240 <LED3_T>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED3_T */
void LED3_T(void *argument)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED3_T */
   TickType_t XLastWakeTime ;
   const TickType_t Xfrequency = pdMS_TO_TICKS(500);
 8000248:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800024c:	60fb      	str	r3, [r7, #12]
   XLastWakeTime =xTaskGetTickCount();
 800024e:	f003 f831 	bl	80032b4 <xTaskGetTickCount>
 8000252:	4603      	mov	r3, r0
 8000254:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    // HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
     vTaskDelayUntil(&XLastWakeTime,Xfrequency);
 8000256:	f107 0308 	add.w	r3, r7, #8
 800025a:	68f9      	ldr	r1, [r7, #12]
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fe5f 	bl	8002f20 <vTaskDelayUntil>
 8000262:	e7f8      	b.n	8000256 <LED3_T+0x16>

08000264 <SW_T>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SW_T */
void SW_T(void *argument)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_T */
  uint8_t flag =0;
 800026c:	2300      	movs	r3, #0
 800026e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    if(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)== GPIO_PIN_RESET)
 8000270:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000274:	4810      	ldr	r0, [pc, #64]	@ (80002b8 <SW_T+0x54>)
 8000276:	f000 fcff 	bl	8000c78 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d104      	bne.n	800028a <SW_T+0x26>
    {
      osDelay(50);
 8000280:	2032      	movs	r0, #50	@ 0x32
 8000282:	f001 feab 	bl	8001fdc <osDelay>
      flag = 1;
 8000286:	2301      	movs	r3, #1
 8000288:	73fb      	strb	r3, [r7, #15]
    }
    if(flag ==1)
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d10f      	bne.n	80002b0 <SW_T+0x4c>
    {
    	flag=0;
 8000290:	2300      	movs	r3, #0
 8000292:	73fb      	strb	r3, [r7, #15]
      if(Speed == 1)
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <SW_T+0x58>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d103      	bne.n	80002a4 <SW_T+0x40>
      {
    	  Speed = 9;
 800029c:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <SW_T+0x58>)
 800029e:	2209      	movs	r2, #9
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e005      	b.n	80002b0 <SW_T+0x4c>
      }
      else 
      {
    	  Speed-=1;
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <SW_T+0x58>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b03      	ldr	r3, [pc, #12]	@ (80002bc <SW_T+0x58>)
 80002ae:	701a      	strb	r2, [r3, #0]
      }

    }
    osDelay(100);
 80002b0:	2064      	movs	r0, #100	@ 0x64
 80002b2:	f001 fe93 	bl	8001fdc <osDelay>
    if(HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)== GPIO_PIN_RESET)
 80002b6:	e7db      	b.n	8000270 <SW_T+0xc>
 80002b8:	40010c00 	.word	0x40010c00
 80002bc:	20000000 	.word	0x20000000

080002c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000380 <MX_GPIO_Init+0xc0>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a29      	ldr	r2, [pc, #164]	@ (8000380 <MX_GPIO_Init+0xc0>)
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b27      	ldr	r3, [pc, #156]	@ (8000380 <MX_GPIO_Init+0xc0>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ec:	4b24      	ldr	r3, [pc, #144]	@ (8000380 <MX_GPIO_Init+0xc0>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a23      	ldr	r2, [pc, #140]	@ (8000380 <MX_GPIO_Init+0xc0>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b21      	ldr	r3, [pc, #132]	@ (8000380 <MX_GPIO_Init+0xc0>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0320 	and.w	r3, r3, #32
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b1e      	ldr	r3, [pc, #120]	@ (8000380 <MX_GPIO_Init+0xc0>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1d      	ldr	r2, [pc, #116]	@ (8000380 <MX_GPIO_Init+0xc0>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b1b      	ldr	r3, [pc, #108]	@ (8000380 <MX_GPIO_Init+0xc0>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <MX_GPIO_Init+0xc0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a17      	ldr	r2, [pc, #92]	@ (8000380 <MX_GPIO_Init+0xc0>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b15      	ldr	r3, [pc, #84]	@ (8000380 <MX_GPIO_Init+0xc0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800033a:	4812      	ldr	r0, [pc, #72]	@ (8000384 <MX_GPIO_Init+0xc4>)
 800033c:	f000 fcb3 	bl	8000ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000340:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2302      	movs	r3, #2
 8000350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	480a      	ldr	r0, [pc, #40]	@ (8000384 <MX_GPIO_Init+0xc4>)
 800035a:	f000 fb09 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 800035e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000368:	2301      	movs	r3, #1
 800036a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	4619      	mov	r1, r3
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_GPIO_Init+0xc8>)
 8000374:	f000 fafc 	bl	8000970 <HAL_GPIO_Init>

}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	40011000 	.word	0x40011000
 8000388:	40010c00 	.word	0x40010c00

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 f9dc 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f80c 	bl	80003b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000398:	f7ff ff92 	bl	80002c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800039c:	f000 f93a 	bl	8000614 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003a0:	f001 fd0c 	bl	8001dbc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80003a4:	f7ff fed4 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003a8:	f001 fd3a 	bl	8001e20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <main+0x20>

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b090      	sub	sp, #64	@ 0x40
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	2228      	movs	r2, #40	@ 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f004 fa8c 	bl	80048dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e0:	2301      	movs	r3, #1
 80003e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e4:	2302      	movs	r3, #2
 80003e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	f107 0318 	add.w	r3, r7, #24
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fc85 	bl	8000d08 <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000404:	f000 f82c 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	230f      	movs	r3, #15
 800040a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040c:	2302      	movs	r3, #2
 800040e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fef2 	bl	800120c <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800042e:	f000 f817 	bl	8000460 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3740      	adds	r7, #64	@ 0x40
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d101      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800044e:	f000 f993 	bl	8000778 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40012c00 	.word	0x40012c00

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <Error_Handler+0x8>

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <HAL_MspInit+0x68>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a17      	ldr	r2, [pc, #92]	@ (80004d4 <HAL_MspInit+0x68>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <HAL_MspInit+0x68>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <HAL_MspInit+0x68>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a11      	ldr	r2, [pc, #68]	@ (80004d4 <HAL_MspInit+0x68>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <HAL_MspInit+0x68>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	210f      	movs	r1, #15
 80004a6:	f06f 0001 	mvn.w	r0, #1
 80004aa:	f000 fa36 	bl	800091a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <HAL_MspInit+0x6c>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <HAL_MspInit+0x6c>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	@ 0x30
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80004e4:	2300      	movs	r3, #0
 80004e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004f2:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <HAL_InitTick+0xd0>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a2d      	ldr	r2, [pc, #180]	@ (80005ac <HAL_InitTick+0xd0>)
 80004f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b2b      	ldr	r3, [pc, #172]	@ (80005ac <HAL_InitTick+0xd0>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800050a:	f107 020c 	add.w	r2, r7, #12
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f000 ffe9 	bl	80014ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800051a:	f000 ffd3 	bl	80014c4 <HAL_RCC_GetPCLK2Freq>
 800051e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000522:	4a23      	ldr	r2, [pc, #140]	@ (80005b0 <HAL_InitTick+0xd4>)
 8000524:	fba2 2303 	umull	r2, r3, r2, r3
 8000528:	0c9b      	lsrs	r3, r3, #18
 800052a:	3b01      	subs	r3, #1
 800052c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800052e:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <HAL_InitTick+0xd8>)
 8000530:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <HAL_InitTick+0xdc>)
 8000532:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000534:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <HAL_InitTick+0xd8>)
 8000536:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800053a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800053c:	4a1d      	ldr	r2, [pc, #116]	@ (80005b4 <HAL_InitTick+0xd8>)
 800053e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000540:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000542:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <HAL_InitTick+0xd8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000548:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <HAL_InitTick+0xd8>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054e:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <HAL_InitTick+0xd8>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000554:	4817      	ldr	r0, [pc, #92]	@ (80005b4 <HAL_InitTick+0xd8>)
 8000556:	f001 f817 	bl	8001588 <HAL_TIM_Base_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000564:	2b00      	cmp	r3, #0
 8000566:	d11b      	bne.n	80005a0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000568:	4812      	ldr	r0, [pc, #72]	@ (80005b4 <HAL_InitTick+0xd8>)
 800056a:	f001 f865 	bl	8001638 <HAL_TIM_Base_Start_IT>
 800056e:	4603      	mov	r3, r0
 8000570:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000574:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000578:	2b00      	cmp	r3, #0
 800057a:	d111      	bne.n	80005a0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800057c:	2019      	movs	r0, #25
 800057e:	f000 f9e8 	bl	8000952 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d808      	bhi.n	800059a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	2019      	movs	r0, #25
 800058e:	f000 f9c4 	bl	800091a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000592:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <HAL_InitTick+0xe0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	e002      	b.n	80005a0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80005a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3730      	adds	r7, #48	@ 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	431bde83 	.word	0x431bde83
 80005b4:	20000040 	.word	0x20000040
 80005b8:	40012c00 	.word	0x40012c00
 80005bc:	20000008 	.word	0x20000008

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <NMI_Handler+0x4>

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <MemManage_Handler+0x4>

080005d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <BusFault_Handler+0x4>

080005e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <UsageFault_Handler+0x4>

080005e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005f8:	4802      	ldr	r0, [pc, #8]	@ (8000604 <TIM1_UP_IRQHandler+0x10>)
 80005fa:	f001 f86f 	bl	80016dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000040 	.word	0x20000040

08000608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <MX_USART1_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 8000620:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000624:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_USART1_UART_Init+0x4c>)
 800064c:	f001 f9e6 	bl	8001a1c <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f7ff ff03 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000088 	.word	0x20000088
 8000664:	40013800 	.word	0x40013800

08000668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <HAL_UART_MspInit+0x8c>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d131      	bne.n	80006ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <HAL_UART_MspInit+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a1a      	ldr	r2, [pc, #104]	@ (80006f8 <HAL_UART_MspInit+0x90>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <HAL_UART_MspInit+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <HAL_UART_MspInit+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <HAL_UART_MspInit+0x90>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <HAL_UART_MspInit+0x90>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <HAL_UART_MspInit+0x94>)
 80006ce:	f000 f94f 	bl	8000970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <HAL_UART_MspInit+0x94>)
 80006e8:	f000 f942 	bl	8000970 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013800 	.word	0x40013800
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800

08000700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000700:	f7ff ff82 	bl	8000608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000706:	490c      	ldr	r1, [pc, #48]	@ (8000738 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000708:	4a0c      	ldr	r2, [pc, #48]	@ (800073c <LoopFillZerobss+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a09      	ldr	r2, [pc, #36]	@ (8000740 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800071c:	4c09      	ldr	r4, [pc, #36]	@ (8000744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072a:	f004 f8df 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072e:	f7ff fe2d 	bl	800038c <main>
  bx lr
 8000732:	4770      	bx	lr
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800073c:	08004a60 	.word	0x08004a60
  ldr r2, =_sbss
 8000740:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000744:	20001a1c 	.word	0x20001a1c

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>
	...

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_Init+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <HAL_Init+0x28>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f8d1 	bl	8000904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000762:	200f      	movs	r0, #15
 8000764:	f7ff feba 	bl	80004dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000768:	f7ff fe80 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	@ (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	2000000c 	.word	0x2000000c
 8000798:	200000d0 	.word	0x200000d0

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	@ (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	200000d0 	.word	0x200000d0

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	@ (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	@ (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	@ (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	@ 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	@ 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff4f 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800092c:	f7ff ff64 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff ffb2 	bl	80008a0 <NVIC_EncodePriority>
 800093c:	4602      	mov	r2, r0
 800093e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff81 	bl	800084c <__NVIC_SetPriority>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff57 	bl	8000814 <__NVIC_EnableIRQ>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b08b      	sub	sp, #44	@ 0x2c
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000982:	e169      	b.n	8000c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000984:	2201      	movs	r2, #1
 8000986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	429a      	cmp	r2, r3
 800099e:	f040 8158 	bne.w	8000c52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	4a9a      	ldr	r2, [pc, #616]	@ (8000c10 <HAL_GPIO_Init+0x2a0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d05e      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009ac:	4a98      	ldr	r2, [pc, #608]	@ (8000c10 <HAL_GPIO_Init+0x2a0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d875      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009b2:	4a98      	ldr	r2, [pc, #608]	@ (8000c14 <HAL_GPIO_Init+0x2a4>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d058      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009b8:	4a96      	ldr	r2, [pc, #600]	@ (8000c14 <HAL_GPIO_Init+0x2a4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d86f      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009be:	4a96      	ldr	r2, [pc, #600]	@ (8000c18 <HAL_GPIO_Init+0x2a8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d052      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009c4:	4a94      	ldr	r2, [pc, #592]	@ (8000c18 <HAL_GPIO_Init+0x2a8>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d869      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009ca:	4a94      	ldr	r2, [pc, #592]	@ (8000c1c <HAL_GPIO_Init+0x2ac>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d04c      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009d0:	4a92      	ldr	r2, [pc, #584]	@ (8000c1c <HAL_GPIO_Init+0x2ac>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d863      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009d6:	4a92      	ldr	r2, [pc, #584]	@ (8000c20 <HAL_GPIO_Init+0x2b0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d046      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009dc:	4a90      	ldr	r2, [pc, #576]	@ (8000c20 <HAL_GPIO_Init+0x2b0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d85d      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009e2:	2b12      	cmp	r3, #18
 80009e4:	d82a      	bhi.n	8000a3c <HAL_GPIO_Init+0xcc>
 80009e6:	2b12      	cmp	r3, #18
 80009e8:	d859      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009ea:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <HAL_GPIO_Init+0x80>)
 80009ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f0:	08000a6b 	.word	0x08000a6b
 80009f4:	08000a45 	.word	0x08000a45
 80009f8:	08000a57 	.word	0x08000a57
 80009fc:	08000a99 	.word	0x08000a99
 8000a00:	08000a9f 	.word	0x08000a9f
 8000a04:	08000a9f 	.word	0x08000a9f
 8000a08:	08000a9f 	.word	0x08000a9f
 8000a0c:	08000a9f 	.word	0x08000a9f
 8000a10:	08000a9f 	.word	0x08000a9f
 8000a14:	08000a9f 	.word	0x08000a9f
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000a9f 	.word	0x08000a9f
 8000a20:	08000a9f 	.word	0x08000a9f
 8000a24:	08000a9f 	.word	0x08000a9f
 8000a28:	08000a9f 	.word	0x08000a9f
 8000a2c:	08000a9f 	.word	0x08000a9f
 8000a30:	08000a9f 	.word	0x08000a9f
 8000a34:	08000a4d 	.word	0x08000a4d
 8000a38:	08000a61 	.word	0x08000a61
 8000a3c:	4a79      	ldr	r2, [pc, #484]	@ (8000c24 <HAL_GPIO_Init+0x2b4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d013      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a42:	e02c      	b.n	8000a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e029      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	3304      	adds	r3, #4
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e024      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e01f      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	330c      	adds	r3, #12
 8000a66:	623b      	str	r3, [r7, #32]
          break;
 8000a68:	e01a      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a72:	2304      	movs	r3, #4
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e013      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d105      	bne.n	8000a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a80:	2308      	movs	r3, #8
 8000a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	611a      	str	r2, [r3, #16]
          break;
 8000a8a:	e009      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	615a      	str	r2, [r3, #20]
          break;
 8000a96:	e003      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	e000      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          break;
 8000a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2bff      	cmp	r3, #255	@ 0xff
 8000aa4:	d801      	bhi.n	8000aaa <HAL_GPIO_Init+0x13a>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	e001      	b.n	8000aae <HAL_GPIO_Init+0x13e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3304      	adds	r3, #4
 8000aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	2bff      	cmp	r3, #255	@ 0xff
 8000ab4:	d802      	bhi.n	8000abc <HAL_GPIO_Init+0x14c>
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	e002      	b.n	8000ac2 <HAL_GPIO_Init+0x152>
 8000abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abe:	3b08      	subs	r3, #8
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	210f      	movs	r1, #15
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	6a39      	ldr	r1, [r7, #32]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	431a      	orrs	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 80b1 	beq.w	8000c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af0:	4b4d      	ldr	r3, [pc, #308]	@ (8000c28 <HAL_GPIO_Init+0x2b8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a4c      	ldr	r2, [pc, #304]	@ (8000c28 <HAL_GPIO_Init+0x2b8>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b4a      	ldr	r3, [pc, #296]	@ (8000c28 <HAL_GPIO_Init+0x2b8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b08:	4a48      	ldr	r2, [pc, #288]	@ (8000c2c <HAL_GPIO_Init+0x2bc>)
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3302      	adds	r3, #2
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a40      	ldr	r2, [pc, #256]	@ (8000c30 <HAL_GPIO_Init+0x2c0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1ec>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a3f      	ldr	r2, [pc, #252]	@ (8000c34 <HAL_GPIO_Init+0x2c4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1e8>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c38 <HAL_GPIO_Init+0x2c8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3d      	ldr	r2, [pc, #244]	@ (8000c3c <HAL_GPIO_Init+0x2cc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1e0>
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e006      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b6e:	492f      	ldr	r1, [pc, #188]	@ (8000c2c <HAL_GPIO_Init+0x2bc>)
 8000b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	492c      	ldr	r1, [pc, #176]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	608b      	str	r3, [r1, #8]
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	4928      	ldr	r1, [pc, #160]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	4922      	ldr	r1, [pc, #136]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60cb      	str	r3, [r1, #12]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	491e      	ldr	r1, [pc, #120]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4918      	ldr	r1, [pc, #96]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4914      	ldr	r1, [pc, #80]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d021      	beq.n	8000c44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	490e      	ldr	r1, [pc, #56]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
 8000c0c:	e021      	b.n	8000c52 <HAL_GPIO_Init+0x2e2>
 8000c0e:	bf00      	nop
 8000c10:	10320000 	.word	0x10320000
 8000c14:	10310000 	.word	0x10310000
 8000c18:	10220000 	.word	0x10220000
 8000c1c:	10210000 	.word	0x10210000
 8000c20:	10120000 	.word	0x10120000
 8000c24:	10110000 	.word	0x10110000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40011400 	.word	0x40011400
 8000c40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <HAL_GPIO_Init+0x304>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4909      	ldr	r1, [pc, #36]	@ (8000c74 <HAL_GPIO_Init+0x304>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c54:	3301      	adds	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f47f ae8e 	bne.w	8000984 <HAL_GPIO_Init+0x14>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	372c      	adds	r7, #44	@ 0x2c
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40010400 	.word	0x40010400

08000c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e001      	b.n	8000c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	807b      	strh	r3, [r7, #2]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb6:	787b      	ldrb	r3, [r7, #1]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cbc:	887a      	ldrh	r2, [r7, #2]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cc2:	e003      	b.n	8000ccc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	041a      	lsls	r2, r3, #16
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	611a      	str	r2, [r3, #16]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b085      	sub	sp, #20
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ce8:	887a      	ldrh	r2, [r7, #2]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4013      	ands	r3, r2
 8000cee:	041a      	lsls	r2, r3, #16
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	887b      	ldrh	r3, [r7, #2]
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	611a      	str	r2, [r3, #16]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e272      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8087 	beq.w	8000e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d28:	4b92      	ldr	r3, [pc, #584]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d00c      	beq.n	8000d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d34:	4b8f      	ldr	r3, [pc, #572]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d112      	bne.n	8000d66 <HAL_RCC_OscConfig+0x5e>
 8000d40:	4b8c      	ldr	r3, [pc, #560]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d4c:	d10b      	bne.n	8000d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	4b89      	ldr	r3, [pc, #548]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d06c      	beq.n	8000e34 <HAL_RCC_OscConfig+0x12c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d168      	bne.n	8000e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e24c      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d6e:	d106      	bne.n	8000d7e <HAL_RCC_OscConfig+0x76>
 8000d70:	4b80      	ldr	r3, [pc, #512]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a7f      	ldr	r2, [pc, #508]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	e02e      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x98>
 8000d86:	4b7b      	ldr	r3, [pc, #492]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b78      	ldr	r3, [pc, #480]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a77      	ldr	r2, [pc, #476]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e01d      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xbc>
 8000daa:	4b72      	ldr	r3, [pc, #456]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a71      	ldr	r2, [pc, #452]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a6e      	ldr	r2, [pc, #440]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e00b      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b68      	ldr	r3, [pc, #416]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a67      	ldr	r2, [pc, #412]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fcda 	bl	800079c <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fcd6 	bl	800079c <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	@ 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e200      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0xe4>
 8000e0a:	e014      	b.n	8000e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fcc6 	bl	800079c <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fcc2 	bl	800079c <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	@ 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e1ec      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	4b53      	ldr	r3, [pc, #332]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x10c>
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d063      	beq.n	8000f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e42:	4b4c      	ldr	r3, [pc, #304]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e4e:	4b49      	ldr	r3, [pc, #292]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d11c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x18c>
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d116      	bne.n	8000e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	4b43      	ldr	r3, [pc, #268]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_RCC_OscConfig+0x176>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d001      	beq.n	8000e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e1c0      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4939      	ldr	r1, [pc, #228]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	e03a      	b.n	8000f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d020      	beq.n	8000ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e9c:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fc7b 	bl	800079c <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fc77 	bl	800079c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e1a1      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4927      	ldr	r1, [pc, #156]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e015      	b.n	8000f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fc5a 	bl	800079c <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc56 	bl	800079c <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e180      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d03a      	beq.n	8000f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d019      	beq.n	8000f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_RCC_OscConfig+0x274>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc3a 	bl	800079c <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc36 	bl	800079c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e160      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fafe 	bl	800154c <RCC_Delay>
 8000f50:	e01c      	b.n	8000f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_RCC_OscConfig+0x274>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f58:	f7ff fc20 	bl	800079c <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5e:	e00f      	b.n	8000f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f60:	f7ff fc1c 	bl	800079c <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d908      	bls.n	8000f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e146      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	42420000 	.word	0x42420000
 8000f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f80:	4b92      	ldr	r3, [pc, #584]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1e9      	bne.n	8000f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80a6 	beq.w	80010e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10d      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b88      	ldr	r3, [pc, #544]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a87      	ldr	r2, [pc, #540]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b85      	ldr	r3, [pc, #532]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc6:	4b82      	ldr	r3, [pc, #520]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d118      	bne.n	8001004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fbdd 	bl	800079c <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe6:	f7ff fbd9 	bl	800079c <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	@ 0x64
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e103      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	4b75      	ldr	r3, [pc, #468]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d106      	bne.n	800101a <HAL_RCC_OscConfig+0x312>
 800100c:	4b6f      	ldr	r3, [pc, #444]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a6e      	ldr	r2, [pc, #440]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e02d      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x334>
 8001022:	4b6a      	ldr	r3, [pc, #424]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a69      	ldr	r2, [pc, #420]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b67      	ldr	r3, [pc, #412]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a66      	ldr	r2, [pc, #408]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	e01c      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b05      	cmp	r3, #5
 8001042:	d10c      	bne.n	800105e <HAL_RCC_OscConfig+0x356>
 8001044:	4b61      	ldr	r3, [pc, #388]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a60      	ldr	r2, [pc, #384]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	4b5e      	ldr	r3, [pc, #376]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a5d      	ldr	r2, [pc, #372]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	e00b      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800105e:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a5a      	ldr	r2, [pc, #360]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a57      	ldr	r2, [pc, #348]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d015      	beq.n	80010aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fb8d 	bl	800079c <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001084:	e00a      	b.n	800109c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fb89 	bl	800079c <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001094:	4293      	cmp	r3, r2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e0b1      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109c:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0ee      	beq.n	8001086 <HAL_RCC_OscConfig+0x37e>
 80010a8:	e014      	b.n	80010d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010aa:	f7ff fb77 	bl	800079c <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff fb73 	bl	800079c <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e09b      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c8:	4b40      	ldr	r3, [pc, #256]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1ee      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d105      	bne.n	80010e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010da:	4b3c      	ldr	r3, [pc, #240]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a3b      	ldr	r2, [pc, #236]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8087 	beq.w	80011fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d061      	beq.n	80011c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d146      	bne.n	8001192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001104:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fb47 	bl	800079c <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001112:	f7ff fb43 	bl	800079c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e06d      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001138:	d108      	bne.n	800114c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4921      	ldr	r1, [pc, #132]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a19      	ldr	r1, [r3, #32]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	430b      	orrs	r3, r1
 800115e:	491b      	ldr	r1, [pc, #108]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fb17 	bl	800079c <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff fb13 	bl	800079c <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e03d      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x46a>
 8001190:	e035      	b.n	80011fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fb00 	bl	800079c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a0:	f7ff fafc 	bl	800079c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e026      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x498>
 80011be:	e01e      	b.n	80011fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d107      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e019      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40007000 	.word	0x40007000
 80011d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_RCC_OscConfig+0x500>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0d0      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b6a      	ldr	r3, [pc, #424]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d910      	bls.n	8001250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b67      	ldr	r3, [pc, #412]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 0207 	bic.w	r2, r3, #7
 8001236:	4965      	ldr	r1, [pc, #404]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123e:	4b63      	ldr	r3, [pc, #396]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d001      	beq.n	8001250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e0b8      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001268:	4b59      	ldr	r3, [pc, #356]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a58      	ldr	r2, [pc, #352]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001280:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800128a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128c:	4b50      	ldr	r3, [pc, #320]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	494d      	ldr	r1, [pc, #308]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d040      	beq.n	800132c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d115      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e07f      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e073      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b3d      	ldr	r3, [pc, #244]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e06b      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f023 0203 	bic.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4936      	ldr	r1, [pc, #216]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fa4e 	bl	800079c <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fa4a 	bl	800079c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e053      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1eb      	bne.n	8001304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d210      	bcs.n	800135c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	4922      	ldr	r1, [pc, #136]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e032      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4916      	ldr	r1, [pc, #88]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	490e      	ldr	r1, [pc, #56]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800139a:	f000 f821 	bl	80013e0 <HAL_RCC_GetSysClockFreq>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	490a      	ldr	r1, [pc, #40]	@ (80013d4 <HAL_RCC_ClockConfig+0x1c8>)
 80013ac:	5ccb      	ldrb	r3, [r1, r3]
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <HAL_RCC_ClockConfig+0x1cc>)
 80013b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_RCC_ClockConfig+0x1d0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f88e 	bl	80004dc <HAL_InitTick>

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40021000 	.word	0x40021000
 80013d4:	08004a2c 	.word	0x08004a2c
 80013d8:	20000004 	.word	0x20000004
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_RCC_GetSysClockFreq+0x94>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d002      	beq.n	8001410 <HAL_RCC_GetSysClockFreq+0x30>
 800140a:	2b08      	cmp	r3, #8
 800140c:	d003      	beq.n	8001416 <HAL_RCC_GetSysClockFreq+0x36>
 800140e:	e027      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x98>)
 8001412:	613b      	str	r3, [r7, #16]
      break;
 8001414:	e027      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4a17      	ldr	r2, [pc, #92]	@ (800147c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d010      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_RCC_GetSysClockFreq+0x94>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0c5b      	lsrs	r3, r3, #17
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	4a11      	ldr	r2, [pc, #68]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xa0>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x98>)
 8001442:	fb03 f202 	mul.w	r2, r3, r2
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e004      	b.n	800145a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0c      	ldr	r2, [pc, #48]	@ (8001484 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	613b      	str	r3, [r7, #16]
      break;
 800145e:	e002      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x98>)
 8001462:	613b      	str	r3, [r7, #16]
      break;
 8001464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001466:	693b      	ldr	r3, [r7, #16]
}
 8001468:	4618      	mov	r0, r3
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	007a1200 	.word	0x007a1200
 800147c:	08004a44 	.word	0x08004a44
 8001480:	08004a54 	.word	0x08004a54
 8001484:	003d0900 	.word	0x003d0900

08001488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800148c:	4b02      	ldr	r3, [pc, #8]	@ (8001498 <HAL_RCC_GetHCLKFreq+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014a0:	f7ff fff2 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	4903      	ldr	r1, [pc, #12]	@ (80014c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	08004a3c 	.word	0x08004a3c

080014c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014c8:	f7ff ffde 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0adb      	lsrs	r3, r3, #11
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	4903      	ldr	r1, [pc, #12]	@ (80014e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	08004a3c 	.word	0x08004a3c

080014ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	220f      	movs	r2, #15
 80014fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_RCC_GetClockConfig+0x58>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_RCC_GetClockConfig+0x58>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_RCC_GetClockConfig+0x58>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_RCC_GetClockConfig+0x58>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_RCC_GetClockConfig+0x5c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40022000 	.word	0x40022000

0800154c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <RCC_Delay+0x34>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <RCC_Delay+0x38>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0a5b      	lsrs	r3, r3, #9
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001568:	bf00      	nop
  }
  while (Delay --);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	60fa      	str	r2, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f9      	bne.n	8001568 <RCC_Delay+0x1c>
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000004 	.word	0x20000004
 8001584:	10624dd3 	.word	0x10624dd3

08001588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e041      	b.n	800161e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f839 	bl	8001626 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3304      	adds	r3, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f000 f9b4 	bl	8001934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d001      	beq.n	8001650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e03a      	b.n	80016c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	@ (80016d0 <HAL_TIM_Base_Start_IT+0x98>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00e      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x58>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800167a:	d009      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x58>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d004      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x58>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d010      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b2:	e007      	b.n	80016c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40012c00 	.word	0x40012c00
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40000800 	.word	0x40000800

080016dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d122      	bne.n	8001738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d11b      	bne.n	8001738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0202 	mvn.w	r2, #2
 8001708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8ed 	bl	80018fe <HAL_TIM_IC_CaptureCallback>
 8001724:	e005      	b.n	8001732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f8e0 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8ef 	bl	8001910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b04      	cmp	r3, #4
 8001744:	d122      	bne.n	800178c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b04      	cmp	r3, #4
 8001752:	d11b      	bne.n	800178c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0204 	mvn.w	r2, #4
 800175c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2202      	movs	r2, #2
 8001762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f8c3 	bl	80018fe <HAL_TIM_IC_CaptureCallback>
 8001778:	e005      	b.n	8001786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8b6 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8c5 	bl	8001910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b08      	cmp	r3, #8
 8001798:	d122      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d11b      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f06f 0208 	mvn.w	r2, #8
 80017b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2204      	movs	r2, #4
 80017b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f899 	bl	80018fe <HAL_TIM_IC_CaptureCallback>
 80017cc:	e005      	b.n	80017da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f88c 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f89b 	bl	8001910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d122      	bne.n	8001834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	d11b      	bne.n	8001834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0210 	mvn.w	r2, #16
 8001804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2208      	movs	r2, #8
 800180a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f86f 	bl	80018fe <HAL_TIM_IC_CaptureCallback>
 8001820:	e005      	b.n	800182e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f862 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f871 	bl	8001910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d107      	bne.n	8001860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0201 	mvn.w	r2, #1
 8001858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe fdee 	bl	800043c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	2b80      	cmp	r3, #128	@ 0x80
 800186c:	d10e      	bne.n	800188c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001878:	2b80      	cmp	r3, #128	@ 0x80
 800187a:	d107      	bne.n	800188c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8bf 	bl	8001a0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001896:	2b40      	cmp	r3, #64	@ 0x40
 8001898:	d10e      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a4:	2b40      	cmp	r3, #64	@ 0x40
 80018a6:	d107      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f835 	bl	8001922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d107      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0220 	mvn.w	r2, #32
 80018dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f88a 	bl	80019f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a29      	ldr	r2, [pc, #164]	@ (80019ec <TIM_Base_SetConfig+0xb8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00b      	beq.n	8001964 <TIM_Base_SetConfig+0x30>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001952:	d007      	beq.n	8001964 <TIM_Base_SetConfig+0x30>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <TIM_Base_SetConfig+0xbc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d003      	beq.n	8001964 <TIM_Base_SetConfig+0x30>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a25      	ldr	r2, [pc, #148]	@ (80019f4 <TIM_Base_SetConfig+0xc0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d108      	bne.n	8001976 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800196a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <TIM_Base_SetConfig+0xb8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00b      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001984:	d007      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a19      	ldr	r2, [pc, #100]	@ (80019f0 <TIM_Base_SetConfig+0xbc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d003      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <TIM_Base_SetConfig+0xc0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d108      	bne.n	80019a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800199c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <TIM_Base_SetConfig+0xb8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d103      	bne.n	80019dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	615a      	str	r2, [r3, #20]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40000400 	.word	0x40000400
 80019f4:	40000800 	.word	0x40000800

080019f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e042      	b.n	8001ab4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe fe10 	bl	8000668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	@ 0x24
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f91d 	bl	8001ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d16d      	bne.n	8001bb8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_UART_Transmit+0x2c>
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e066      	b.n	8001bba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2221      	movs	r2, #33	@ 0x21
 8001af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001afa:	f7fe fe4f 	bl	800079c <HAL_GetTick>
 8001afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	88fa      	ldrh	r2, [r7, #6]
 8001b0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b14:	d108      	bne.n	8001b28 <HAL_UART_Transmit+0x6c>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d104      	bne.n	8001b28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	e003      	b.n	8001b30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b30:	e02a      	b.n	8001b88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f840 	bl	8001bc2 <UART_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e036      	b.n	8001bba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10b      	bne.n	8001b6a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	3302      	adds	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e007      	b.n	8001b7a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	3301      	adds	r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1cf      	bne.n	8001b32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2140      	movs	r1, #64	@ 0x40
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f810 	bl	8001bc2 <UART_WaitOnFlagUntilTimeout>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e006      	b.n	8001bba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bb8:	2302      	movs	r3, #2
  }
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b090      	sub	sp, #64	@ 0x40
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bd2:	e050      	b.n	8001c76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bda:	d04c      	beq.n	8001c76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001be2:	f7fe fddb 	bl	800079c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d241      	bcs.n	8001c76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfc:	e853 3f00 	ldrex	r3, [r3]
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c12:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c14:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c1a:	e841 2300 	strex	r3, r2, [r1]
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1e5      	bne.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	e853 3f00 	ldrex	r3, [r3]
 8001c34:	613b      	str	r3, [r7, #16]
   return(result);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3314      	adds	r3, #20
 8001c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c46:	623a      	str	r2, [r7, #32]
 8001c48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4a:	69f9      	ldr	r1, [r7, #28]
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	e841 2300 	strex	r3, r2, [r1]
 8001c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e5      	bne.n	8001c26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e00f      	b.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d09f      	beq.n	8001bd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3740      	adds	r7, #64	@ 0x40
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001cda:	f023 030c 	bic.w	r3, r3, #12
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2c      	ldr	r2, [pc, #176]	@ (8001db4 <UART_SetConfig+0x114>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d08:	f7ff fbdc 	bl	80014c4 <HAL_RCC_GetPCLK2Freq>
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	e002      	b.n	8001d16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d10:	f7ff fbc4 	bl	800149c <HAL_RCC_GetPCLK1Freq>
 8001d14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009a      	lsls	r2, r3, #2
 8001d20:	441a      	add	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4a22      	ldr	r2, [pc, #136]	@ (8001db8 <UART_SetConfig+0x118>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	0119      	lsls	r1, r3, #4
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009a      	lsls	r2, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <UART_SetConfig+0x118>)
 8001d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2064      	movs	r0, #100	@ 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	3332      	adds	r3, #50	@ 0x32
 8001d60:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <UART_SetConfig+0x118>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d6c:	4419      	add	r1, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009a      	lsls	r2, r3, #2
 8001d78:	441a      	add	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <UART_SetConfig+0x118>)
 8001d86:	fba3 0302 	umull	r0, r3, r3, r2
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2064      	movs	r0, #100	@ 0x64
 8001d8e:	fb00 f303 	mul.w	r3, r0, r3
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	3332      	adds	r3, #50	@ 0x32
 8001d98:	4a07      	ldr	r2, [pc, #28]	@ (8001db8 <UART_SetConfig+0x118>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	440a      	add	r2, r1
 8001daa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40013800 	.word	0x40013800
 8001db8:	51eb851f 	.word	0x51eb851f

08001dbc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dc2:	f3ef 8305 	mrs	r3, IPSR
 8001dc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dce:	f3ef 8310 	mrs	r3, PRIMASK
 8001dd2:	607b      	str	r3, [r7, #4]
  return(result);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <osKernelInitialize+0x32>
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <osKernelInitialize+0x60>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d109      	bne.n	8001df6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001de2:	f3ef 8311 	mrs	r3, BASEPRI
 8001de6:	603b      	str	r3, [r7, #0]
  return(result);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001dee:	f06f 0305 	mvn.w	r3, #5
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e00c      	b.n	8001e10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <osKernelInitialize+0x60>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <osKernelInitialize+0x60>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e002      	b.n	8001e10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e10:	68fb      	ldr	r3, [r7, #12]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	200000d4 	.word	0x200000d4

08001e20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e26:	f3ef 8305 	mrs	r3, IPSR
 8001e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10f      	bne.n	8001e52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e32:	f3ef 8310 	mrs	r3, PRIMASK
 8001e36:	607b      	str	r3, [r7, #4]
  return(result);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <osKernelStart+0x32>
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <osKernelStart+0x64>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d109      	bne.n	8001e5a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e46:	f3ef 8311 	mrs	r3, BASEPRI
 8001e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e52:	f06f 0305 	mvn.w	r3, #5
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e00e      	b.n	8001e78 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <osKernelStart+0x64>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d107      	bne.n	8001e72 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <osKernelStart+0x64>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001e68:	f001 f910 	bl	800308c <vTaskStartScheduler>
      stat = osOK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e002      	b.n	8001e78 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e78:	68fb      	ldr	r3, [r7, #12]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200000d4 	.word	0x200000d4

08001e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b092      	sub	sp, #72	@ 0x48
 8001e8c:	af04      	add	r7, sp, #16
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e98:	f3ef 8305 	mrs	r3, IPSR
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 8094 	bne.w	8001fce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eaa:	623b      	str	r3, [r7, #32]
  return(result);
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 808d 	bne.w	8001fce <osThreadNew+0x146>
 8001eb4:	4b48      	ldr	r3, [pc, #288]	@ (8001fd8 <osThreadNew+0x150>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d106      	bne.n	8001eca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8001ec0:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 8082 	bne.w	8001fce <osThreadNew+0x146>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d07e      	beq.n	8001fce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001ed4:	2318      	movs	r3, #24
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001ed8:	2300      	movs	r3, #0
 8001eda:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001edc:	f107 031b 	add.w	r3, r7, #27
 8001ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d045      	beq.n	8001f7a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <osThreadNew+0x74>
        name = attr->name;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <osThreadNew+0x9a>
 8001f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f12:	2b38      	cmp	r3, #56	@ 0x38
 8001f14:	d805      	bhi.n	8001f22 <osThreadNew+0x9a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <osThreadNew+0x9e>
        return (NULL);
 8001f22:	2300      	movs	r3, #0
 8001f24:	e054      	b.n	8001fd0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <osThreadNew+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f44:	d90a      	bls.n	8001f5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <osThreadNew+0xd4>
        mem = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f5a:	e010      	b.n	8001f7e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10c      	bne.n	8001f7e <osThreadNew+0xf6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d108      	bne.n	8001f7e <osThreadNew+0xf6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d104      	bne.n	8001f7e <osThreadNew+0xf6>
          mem = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f78:	e001      	b.n	8001f7e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d110      	bne.n	8001fa6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f8c:	9202      	str	r2, [sp, #8]
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fe24 	bl	8002be8 <xTaskCreateStatic>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e013      	b.n	8001fce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d110      	bne.n	8001fce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fe71 	bl	8002ca6 <xTaskCreate>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <osThreadNew+0x146>
          hTask = NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fce:	697b      	ldr	r3, [r7, #20]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3738      	adds	r7, #56	@ 0x38
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200000d4 	.word	0x200000d4

08001fdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fe4:	f3ef 8305 	mrs	r3, IPSR
 8001fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8001fea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <osDelay+0x34>
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <osDelay+0x58>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d109      	bne.n	8002018 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002004:	f3ef 8311 	mrs	r3, BASEPRI
 8002008:	60bb      	str	r3, [r7, #8]
  return(result);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <osDelay+0x3c>
    stat = osErrorISR;
 8002010:	f06f 0305 	mvn.w	r3, #5
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e007      	b.n	8002028 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fffc 	bl	8003020 <vTaskDelay>
    }
  }

  return (stat);
 8002028:	697b      	ldr	r3, [r7, #20]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200000d4 	.word	0x200000d4

08002038 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <vApplicationGetIdleTaskMemory+0x28>)
 8002048:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <vApplicationGetIdleTaskMemory+0x2c>)
 800204e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	200000d8 	.word	0x200000d8
 8002064:	20000134 	.word	0x20000134

08002068 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a07      	ldr	r2, [pc, #28]	@ (8002094 <vApplicationGetTimerTaskMemory+0x2c>)
 8002078:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <vApplicationGetTimerTaskMemory+0x30>)
 800207e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000334 	.word	0x20000334
 8002098:	20000390 	.word	0x20000390

0800209c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 0208 	add.w	r2, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f103 0208 	add.w	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f103 0208 	add.w	r2, r3, #8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214e:	d103      	bne.n	8002158 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e00c      	b.n	8002172 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3308      	adds	r3, #8
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	e002      	b.n	8002166 <vListInsert+0x2e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	d2f6      	bcs.n	8002160 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6892      	ldr	r2, [r2, #8]
 80021be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6852      	ldr	r2, [r2, #4]
 80021c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d103      	bne.n	80021dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	1e5a      	subs	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002228:	f002 f878 	bl	800431c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	441a      	add	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	3b01      	subs	r3, #1
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	441a      	add	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	22ff      	movs	r2, #255	@ 0xff
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	22ff      	movs	r2, #255	@ 0xff
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d114      	bne.n	80022a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01a      	beq.n	80022bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3310      	adds	r3, #16
 800228a:	4618      	mov	r0, r3
 800228c:	f001 f990 	bl	80035b0 <xTaskRemoveFromEventList>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <xQueueGenericReset+0xd0>)
 8002298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	e009      	b.n	80022bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3310      	adds	r3, #16
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fef5 	bl	800209c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3324      	adds	r3, #36	@ 0x24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fef0 	bl	800209c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022bc:	f002 f85e 	bl	800437c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022c0:	2301      	movs	r3, #1
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	e000ed04 	.word	0xe000ed04

080022d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	@ 0x38
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80022e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10b      	bne.n	800231a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	e7fd      	b.n	8002316 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <xQueueGenericCreateStatic+0x56>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <xQueueGenericCreateStatic+0x5a>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <xQueueGenericCreateStatic+0x5c>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	623b      	str	r3, [r7, #32]
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <xQueueGenericCreateStatic+0x84>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <xQueueGenericCreateStatic+0x88>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <xQueueGenericCreateStatic+0x8a>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10b      	bne.n	8002376 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800235e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	61fb      	str	r3, [r7, #28]
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	e7fd      	b.n	8002372 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002376:	2350      	movs	r3, #80	@ 0x50
 8002378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b50      	cmp	r3, #80	@ 0x50
 800237e:	d00b      	beq.n	8002398 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	61bb      	str	r3, [r7, #24]
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00d      	beq.n	80023be <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023aa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f805 	bl	80023c8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	@ 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e002      	b.n	80023ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023f6:	2101      	movs	r1, #1
 80023f8:	69b8      	ldr	r0, [r7, #24]
 80023fa:	f7ff feff 	bl	80021fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08e      	sub	sp, #56	@ 0x38
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <xQueueGenericSend+0x34>
	__asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <xQueueGenericSend+0x42>
 800244a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <xQueueGenericSend+0x46>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <xQueueGenericSend+0x48>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <xQueueGenericSend+0x64>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d103      	bne.n	8002482 <xQueueGenericSend+0x72>
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <xQueueGenericSend+0x76>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueGenericSend+0x78>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <xQueueGenericSend+0x94>
	__asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	623b      	str	r3, [r7, #32]
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a4:	f001 fa48 	bl	8003938 <xTaskGetSchedulerState>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <xQueueGenericSend+0xa4>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <xQueueGenericSend+0xa8>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <xQueueGenericSend+0xaa>
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	61fb      	str	r3, [r7, #28]
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	e7fd      	b.n	80024d2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024d6:	f001 ff21 	bl	800431c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <xQueueGenericSend+0xdc>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d129      	bne.n	8002540 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024f2:	f000 fa0d 	bl	8002910 <prvCopyDataToQueue>
 80024f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	3324      	adds	r3, #36	@ 0x24
 8002504:	4618      	mov	r0, r3
 8002506:	f001 f853 	bl	80035b0 <xTaskRemoveFromEventList>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002510:	4b3f      	ldr	r3, [pc, #252]	@ (8002610 <xQueueGenericSend+0x200>)
 8002512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	e00a      	b.n	8002538 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002528:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <xQueueGenericSend+0x200>)
 800252a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002538:	f001 ff20 	bl	800437c <vPortExitCritical>
				return pdPASS;
 800253c:	2301      	movs	r3, #1
 800253e:	e063      	b.n	8002608 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002546:	f001 ff19 	bl	800437c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800254a:	2300      	movs	r3, #0
 800254c:	e05c      	b.n	8002608 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4618      	mov	r0, r3
 800255a:	f001 f88d 	bl	8003678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800255e:	2301      	movs	r3, #1
 8002560:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002562:	f001 ff0b 	bl	800437c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002566:	f000 fdf9 	bl	800315c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800256a:	f001 fed7 	bl	800431c <vPortEnterCritical>
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002574:	b25b      	sxtb	r3, r3
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d103      	bne.n	8002584 <xQueueGenericSend+0x174>
 800257c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800258a:	b25b      	sxtb	r3, r3
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d103      	bne.n	800259a <xQueueGenericSend+0x18a>
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800259a:	f001 feef 	bl	800437c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800259e:	1d3a      	adds	r2, r7, #4
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 f87c 	bl	80036a4 <xTaskCheckForTimeOut>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d124      	bne.n	80025fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025b4:	f000 faa4 	bl	8002b00 <prvIsQueueFull>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d018      	beq.n	80025f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	3310      	adds	r3, #16
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 ffa0 	bl	800350c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ce:	f000 fa2f 	bl	8002a30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025d2:	f000 fdd1 	bl	8003178 <xTaskResumeAll>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f af7c 	bne.w	80024d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <xQueueGenericSend+0x200>)
 80025e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	e772      	b.n	80024d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025f2:	f000 fa1d 	bl	8002a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025f6:	f000 fdbf 	bl	8003178 <xTaskResumeAll>
 80025fa:	e76c      	b.n	80024d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025fe:	f000 fa17 	bl	8002a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002602:	f000 fdb9 	bl	8003178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002606:	2300      	movs	r3, #0
		}
	}
}
 8002608:	4618      	mov	r0, r3
 800260a:	3738      	adds	r7, #56	@ 0x38
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	e000ed04 	.word	0xe000ed04

08002614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	@ 0x38
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <xQueueGenericSendFromISR+0x3e>
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <xQueueGenericSendFromISR+0x42>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <xQueueGenericSendFromISR+0x44>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	623b      	str	r3, [r7, #32]
}
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d103      	bne.n	8002682 <xQueueGenericSendFromISR+0x6e>
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <xQueueGenericSendFromISR+0x72>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSendFromISR+0x74>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	61fb      	str	r3, [r7, #28]
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026a4:	f001 fefc 	bl	80044a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026a8:	f3ef 8211 	mrs	r2, BASEPRI
 80026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	61ba      	str	r2, [r7, #24]
 80026be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <xQueueGenericSendFromISR+0xc2>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d12c      	bne.n	8002730 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026e6:	f000 f913 	bl	8002910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d112      	bne.n	800271a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d016      	beq.n	800272a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	3324      	adds	r3, #36	@ 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f000 ff55 	bl	80035b0 <xTaskRemoveFromEventList>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e007      	b.n	800272a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800271a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800271e:	3301      	adds	r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	b25a      	sxtb	r2, r3
 8002724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800272a:	2301      	movs	r3, #1
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800272e:	e001      	b.n	8002734 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002736:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800273e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002742:	4618      	mov	r0, r3
 8002744:	3738      	adds	r7, #56	@ 0x38
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	@ 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <xQueueReceive+0x32>
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	623b      	str	r3, [r7, #32]
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	e7fd      	b.n	800277a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <xQueueReceive+0x40>
 8002784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <xQueueReceive+0x44>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <xQueueReceive+0x46>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <xQueueReceive+0x62>
	__asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	61fb      	str	r3, [r7, #28]
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	e7fd      	b.n	80027aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ae:	f001 f8c3 	bl	8003938 <xTaskGetSchedulerState>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <xQueueReceive+0x72>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <xQueueReceive+0x76>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <xQueueReceive+0x78>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <xQueueReceive+0x94>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	61bb      	str	r3, [r7, #24]
}
 80027da:	bf00      	nop
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80027e0:	f001 fd9c 	bl	800431c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01f      	beq.n	8002830 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027f4:	f000 f8f6 	bl	80029e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00f      	beq.n	8002828 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	3310      	adds	r3, #16
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fecf 	bl	80035b0 <xTaskRemoveFromEventList>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002818:	4b3c      	ldr	r3, [pc, #240]	@ (800290c <xQueueReceive+0x1c0>)
 800281a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002828:	f001 fda8 	bl	800437c <vPortExitCritical>
				return pdPASS;
 800282c:	2301      	movs	r3, #1
 800282e:	e069      	b.n	8002904 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002836:	f001 fda1 	bl	800437c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800283a:	2300      	movs	r3, #0
 800283c:	e062      	b.n	8002904 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	4618      	mov	r0, r3
 800284a:	f000 ff15 	bl	8003678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002852:	f001 fd93 	bl	800437c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002856:	f000 fc81 	bl	800315c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800285a:	f001 fd5f 	bl	800431c <vPortEnterCritical>
 800285e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002864:	b25b      	sxtb	r3, r3
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d103      	bne.n	8002874 <xQueueReceive+0x128>
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800287a:	b25b      	sxtb	r3, r3
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d103      	bne.n	800288a <xQueueReceive+0x13e>
 8002882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800288a:	f001 fd77 	bl	800437c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800288e:	1d3a      	adds	r2, r7, #4
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f000 ff04 	bl	80036a4 <xTaskCheckForTimeOut>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d123      	bne.n	80028ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028a4:	f000 f916 	bl	8002ad4 <prvIsQueueEmpty>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d017      	beq.n	80028de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	3324      	adds	r3, #36	@ 0x24
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fe28 	bl	800350c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028be:	f000 f8b7 	bl	8002a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028c2:	f000 fc59 	bl	8003178 <xTaskResumeAll>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d189      	bne.n	80027e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80028cc:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <xQueueReceive+0x1c0>)
 80028ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	e780      	b.n	80027e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028e0:	f000 f8a6 	bl	8002a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028e4:	f000 fc48 	bl	8003178 <xTaskResumeAll>
 80028e8:	e77a      	b.n	80027e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028ec:	f000 f8a0 	bl	8002a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028f0:	f000 fc42 	bl	8003178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028f6:	f000 f8ed 	bl	8002ad4 <prvIsQueueEmpty>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f43f af6f 	beq.w	80027e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002902:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002904:	4618      	mov	r0, r3
 8002906:	3730      	adds	r7, #48	@ 0x30
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	e000ed04 	.word	0xe000ed04

08002910 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d14d      	bne.n	80029d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4618      	mov	r0, r3
 800293c:	f001 f81a 	bl	8003974 <xTaskPriorityDisinherit>
 8002940:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e043      	b.n	80029d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d119      	bne.n	8002984 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6898      	ldr	r0, [r3, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	461a      	mov	r2, r3
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	f001 ffea 	bl	8004934 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d32b      	bcc.n	80029d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	e026      	b.n	80029d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68d8      	ldr	r0, [r3, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	461a      	mov	r2, r3
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	f001 ffd0 	bl	8004934 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	425b      	negs	r3, r3
 800299e:	441a      	add	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	425b      	negs	r3, r3
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d105      	bne.n	80029d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80029da:	697b      	ldr	r3, [r7, #20]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d018      	beq.n	8002a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	441a      	add	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d303      	bcc.n	8002a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	461a      	mov	r2, r3
 8002a22:	6838      	ldr	r0, [r7, #0]
 8002a24:	f001 ff86 	bl	8004934 <memcpy>
	}
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a38:	f001 fc70 	bl	800431c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a44:	e011      	b.n	8002a6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3324      	adds	r3, #36	@ 0x24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fdac 	bl	80035b0 <xTaskRemoveFromEventList>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a5e:	f000 fe85 	bl	800376c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	dce9      	bgt.n	8002a46 <prvUnlockQueue+0x16>
 8002a72:	e000      	b.n	8002a76 <prvUnlockQueue+0x46>
					break;
 8002a74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	22ff      	movs	r2, #255	@ 0xff
 8002a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002a7e:	f001 fc7d 	bl	800437c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a82:	f001 fc4b 	bl	800431c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a8e:	e011      	b.n	8002ab4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fd87 	bl	80035b0 <xTaskRemoveFromEventList>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002aa8:	f000 fe60 	bl	800376c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	dce9      	bgt.n	8002a90 <prvUnlockQueue+0x60>
 8002abc:	e000      	b.n	8002ac0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002abe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	22ff      	movs	r2, #255	@ 0xff
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002ac8:	f001 fc58 	bl	800437c <vPortExitCritical>
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002adc:	f001 fc1e 	bl	800431c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e001      	b.n	8002af2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002af2:	f001 fc43 	bl	800437c <vPortExitCritical>

	return xReturn;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b08:	f001 fc08 	bl	800431c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d102      	bne.n	8002b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e001      	b.n	8002b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b22:	f001 fc2b 	bl	800437c <vPortExitCritical>

	return xReturn;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e014      	b.n	8002b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b40:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <vQueueAddToRegistry+0x4c>)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b4c:	490b      	ldr	r1, [pc, #44]	@ (8002b7c <vQueueAddToRegistry+0x4c>)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b56:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <vQueueAddToRegistry+0x4c>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b62:	e006      	b.n	8002b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b07      	cmp	r3, #7
 8002b6e:	d9e7      	bls.n	8002b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	20000790 	.word	0x20000790

08002b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b90:	f001 fbc4 	bl	800431c <vPortEnterCritical>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d103      	bne.n	8002baa <vQueueWaitForMessageRestricted+0x2a>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d103      	bne.n	8002bc0 <vQueueWaitForMessageRestricted+0x40>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bc0:	f001 fbdc 	bl	800437c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3324      	adds	r3, #36	@ 0x24
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fcbf 	bl	8003558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bda:	6978      	ldr	r0, [r7, #20]
 8002bdc:	f7ff ff28 	bl	8002a30 <prvUnlockQueue>
	}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	@ 0x38
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	623b      	str	r3, [r7, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	61fb      	str	r3, [r7, #28]
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	e7fd      	b.n	8002c2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c32:	235c      	movs	r3, #92	@ 0x5c
 8002c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b5c      	cmp	r3, #92	@ 0x5c
 8002c3a:	d00b      	beq.n	8002c54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	61bb      	str	r3, [r7, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01e      	beq.n	8002c98 <xTaskCreateStatic+0xb0>
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c72:	2300      	movs	r3, #0
 8002c74:	9303      	str	r3, [sp, #12]
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	9302      	str	r3, [sp, #8]
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f850 	bl	8002d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c92:	f000 f8d5 	bl	8002e40 <prvAddNewTaskToReadyList>
 8002c96:	e001      	b.n	8002c9c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c9c:	697b      	ldr	r3, [r7, #20]
	}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3728      	adds	r7, #40	@ 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b08c      	sub	sp, #48	@ 0x30
 8002caa:	af04      	add	r7, sp, #16
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 fc30 	bl	8004520 <pvPortMalloc>
 8002cc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00e      	beq.n	8002ce6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002cc8:	205c      	movs	r0, #92	@ 0x5c
 8002cca:	f001 fc29 	bl	8004520 <pvPortMalloc>
 8002cce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cdc:	e005      	b.n	8002cea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f001 fce6 	bl	80046b0 <vPortFree>
 8002ce4:	e001      	b.n	8002cea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d017      	beq.n	8002d20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	9302      	str	r3, [sp, #8]
 8002d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f80e 	bl	8002d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d14:	69f8      	ldr	r0, [r7, #28]
 8002d16:	f000 f893 	bl	8002e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	e002      	b.n	8002d26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d26:	69bb      	ldr	r3, [r7, #24]
	}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	461a      	mov	r2, r3
 8002d48:	21a5      	movs	r1, #165	@ 0xa5
 8002d4a:	f001 fdc7 	bl	80048dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f023 0307 	bic.w	r3, r3, #7
 8002d66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	617b      	str	r3, [r7, #20]
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	e7fd      	b.n	8002d86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e012      	b.n	8002db6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	7819      	ldrb	r1, [r3, #0]
 8002d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3334      	adds	r3, #52	@ 0x34
 8002da0:	460a      	mov	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b0f      	cmp	r3, #15
 8002dba:	d9e9      	bls.n	8002d90 <prvInitialiseNewTask+0x60>
 8002dbc:	e000      	b.n	8002dc0 <prvInitialiseNewTask+0x90>
		{
			break;
 8002dbe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	2b37      	cmp	r3, #55	@ 0x37
 8002dcc:	d901      	bls.n	8002dd2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dce:	2337      	movs	r3, #55	@ 0x37
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	3304      	adds	r3, #4
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f976 	bl	80020da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	3318      	adds	r3, #24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f971 	bl	80020da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	2200      	movs	r2, #0
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	69b8      	ldr	r0, [r7, #24]
 8002e22:	f001 f98b 	bl	800413c <pxPortInitialiseStack>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e38:	bf00      	nop
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e48:	f001 fa68 	bl	800431c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e56:	4b2c      	ldr	r3, [pc, #176]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e64:	4b27      	ldr	r3, [pc, #156]	@ (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d110      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e6c:	f000 fca2 	bl	80037b4 <prvInitialiseTaskLists>
 8002e70:	e00d      	b.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e72:	4b26      	ldr	r3, [pc, #152]	@ (8002f0c <prvAddNewTaskToReadyList+0xcc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e7a:	4b23      	ldr	r3, [pc, #140]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d802      	bhi.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e88:	4a1f      	ldr	r2, [pc, #124]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <prvAddNewTaskToReadyList+0xd4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d903      	bls.n	8002eb4 <prvAddNewTaskToReadyList+0x74>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <prvAddNewTaskToReadyList+0xd4>)
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4a15      	ldr	r2, [pc, #84]	@ (8002f18 <prvAddNewTaskToReadyList+0xd8>)
 8002ec2:	441a      	add	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff f911 	bl	80020f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ed0:	f001 fa54 	bl	800437c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <prvAddNewTaskToReadyList+0xcc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00e      	beq.n	8002efa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d207      	bcs.n	8002efa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <prvAddNewTaskToReadyList+0xdc>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000ca4 	.word	0x20000ca4
 8002f08:	200007d0 	.word	0x200007d0
 8002f0c:	20000cb0 	.word	0x20000cb0
 8002f10:	20000cc0 	.word	0x20000cc0
 8002f14:	20000cac 	.word	0x20000cac
 8002f18:	200007d4 	.word	0x200007d4
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <vTaskDelayUntil+0x2c>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	617b      	str	r3, [r7, #20]
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <vTaskDelayUntil+0x4a>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	613b      	str	r3, [r7, #16]
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	e7fd      	b.n	8002f66 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <vTaskDelayUntil+0xf4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <vTaskDelayUntil+0x6a>
	__asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60fb      	str	r3, [r7, #12]
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8002f8a:	f000 f8e7 	bl	800315c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002f8e:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <vTaskDelayUntil+0xf8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a3a      	ldr	r2, [r7, #32]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d20b      	bcs.n	8002fc0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d211      	bcs.n	8002fd6 <vTaskDelayUntil+0xb6>
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d90d      	bls.n	8002fd6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	e00a      	b.n	8002fd6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d303      	bcc.n	8002fd2 <vTaskDelayUntil+0xb2>
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d901      	bls.n	8002fd6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fd32 	bl	8003a54 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002ff0:	f000 f8c2 	bl	8003178 <xTaskResumeAll>
 8002ff4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8002ffc:	4b07      	ldr	r3, [pc, #28]	@ (800301c <vTaskDelayUntil+0xfc>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800300c:	bf00      	nop
 800300e:	3728      	adds	r7, #40	@ 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000ccc 	.word	0x20000ccc
 8003018:	20000ca8 	.word	0x20000ca8
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d018      	beq.n	8003064 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003032:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <vTaskDelay+0x64>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <vTaskDelay+0x32>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	60bb      	str	r3, [r7, #8]
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	e7fd      	b.n	800304e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003052:	f000 f883 	bl	800315c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fcfb 	bl	8003a54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800305e:	f000 f88b 	bl	8003178 <xTaskResumeAll>
 8003062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800306a:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <vTaskDelay+0x68>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000ccc 	.word	0x20000ccc
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800309a:	463a      	mov	r2, r7
 800309c:	1d39      	adds	r1, r7, #4
 800309e:	f107 0308 	add.w	r3, r7, #8
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe ffc8 	bl	8002038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	9202      	str	r2, [sp, #8]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2300      	movs	r3, #0
 80030b8:	460a      	mov	r2, r1
 80030ba:	4922      	ldr	r1, [pc, #136]	@ (8003144 <vTaskStartScheduler+0xb8>)
 80030bc:	4822      	ldr	r0, [pc, #136]	@ (8003148 <vTaskStartScheduler+0xbc>)
 80030be:	f7ff fd93 	bl	8002be8 <xTaskCreateStatic>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4a21      	ldr	r2, [pc, #132]	@ (800314c <vTaskStartScheduler+0xc0>)
 80030c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030c8:	4b20      	ldr	r3, [pc, #128]	@ (800314c <vTaskStartScheduler+0xc0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030d0:	2301      	movs	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e001      	b.n	80030da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d102      	bne.n	80030e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030e0:	f000 fd0c 	bl	8003afc <xTimerCreateTimerTask>
 80030e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d116      	bne.n	800311a <vTaskStartScheduler+0x8e>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	613b      	str	r3, [r7, #16]
}
 80030fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003100:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <vTaskStartScheduler+0xc4>)
 8003102:	f04f 32ff 	mov.w	r2, #4294967295
 8003106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <vTaskStartScheduler+0xc8>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800310e:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <vTaskStartScheduler+0xcc>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003114:	f001 f890 	bl	8004238 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003118:	e00f      	b.n	800313a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d10b      	bne.n	800313a <vTaskStartScheduler+0xae>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60fb      	str	r3, [r7, #12]
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <vTaskStartScheduler+0xaa>
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	08004984 	.word	0x08004984
 8003148:	08003785 	.word	0x08003785
 800314c:	20000cc8 	.word	0x20000cc8
 8003150:	20000cc4 	.word	0x20000cc4
 8003154:	20000cb0 	.word	0x20000cb0
 8003158:	20000ca8 	.word	0x20000ca8

0800315c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <vTaskSuspendAll+0x18>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	4a03      	ldr	r2, [pc, #12]	@ (8003174 <vTaskSuspendAll+0x18>)
 8003168:	6013      	str	r3, [r2, #0]
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000ccc 	.word	0x20000ccc

08003178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003186:	4b42      	ldr	r3, [pc, #264]	@ (8003290 <xTaskResumeAll+0x118>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	603b      	str	r3, [r7, #0]
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	e7fd      	b.n	80031a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031a6:	f001 f8b9 	bl	800431c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031aa:	4b39      	ldr	r3, [pc, #228]	@ (8003290 <xTaskResumeAll+0x118>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a37      	ldr	r2, [pc, #220]	@ (8003290 <xTaskResumeAll+0x118>)
 80031b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b4:	4b36      	ldr	r3, [pc, #216]	@ (8003290 <xTaskResumeAll+0x118>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d162      	bne.n	8003282 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031bc:	4b35      	ldr	r3, [pc, #212]	@ (8003294 <xTaskResumeAll+0x11c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05e      	beq.n	8003282 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031c4:	e02f      	b.n	8003226 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031c6:	4b34      	ldr	r3, [pc, #208]	@ (8003298 <xTaskResumeAll+0x120>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3318      	adds	r3, #24
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe ffe8 	bl	80021a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3304      	adds	r3, #4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe ffe3 	bl	80021a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e6:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <xTaskResumeAll+0x124>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d903      	bls.n	80031f6 <xTaskResumeAll+0x7e>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	4a2a      	ldr	r2, [pc, #168]	@ (800329c <xTaskResumeAll+0x124>)
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4a27      	ldr	r2, [pc, #156]	@ (80032a0 <xTaskResumeAll+0x128>)
 8003204:	441a      	add	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3304      	adds	r3, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f7fe ff70 	bl	80020f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003216:	4b23      	ldr	r3, [pc, #140]	@ (80032a4 <xTaskResumeAll+0x12c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	429a      	cmp	r2, r3
 800321e:	d302      	bcc.n	8003226 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003220:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <xTaskResumeAll+0x130>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <xTaskResumeAll+0x120>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1cb      	bne.n	80031c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003234:	f000 fb5c 	bl	80038f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003238:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <xTaskResumeAll+0x134>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003244:	f000 f844 	bl	80032d0 <xTaskIncrementTick>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800324e:	4b16      	ldr	r3, [pc, #88]	@ (80032a8 <xTaskResumeAll+0x130>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f1      	bne.n	8003244 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003260:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <xTaskResumeAll+0x134>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003266:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <xTaskResumeAll+0x130>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003272:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <xTaskResumeAll+0x138>)
 8003274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003282:	f001 f87b 	bl	800437c <vPortExitCritical>

	return xAlreadyYielded;
 8003286:	68bb      	ldr	r3, [r7, #8]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000ccc 	.word	0x20000ccc
 8003294:	20000ca4 	.word	0x20000ca4
 8003298:	20000c64 	.word	0x20000c64
 800329c:	20000cac 	.word	0x20000cac
 80032a0:	200007d4 	.word	0x200007d4
 80032a4:	200007d0 	.word	0x200007d0
 80032a8:	20000cb8 	.word	0x20000cb8
 80032ac:	20000cb4 	.word	0x20000cb4
 80032b0:	e000ed04 	.word	0xe000ed04

080032b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032ba:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <xTaskGetTickCount+0x18>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032c0:	687b      	ldr	r3, [r7, #4]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	20000ca8 	.word	0x20000ca8

080032d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032da:	4b52      	ldr	r3, [pc, #328]	@ (8003424 <xTaskIncrementTick+0x154>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 808f 	bne.w	8003402 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032e4:	4b50      	ldr	r3, [pc, #320]	@ (8003428 <xTaskIncrementTick+0x158>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003428 <xTaskIncrementTick+0x158>)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d121      	bne.n	800333c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80032f8:	4b4c      	ldr	r3, [pc, #304]	@ (800342c <xTaskIncrementTick+0x15c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	603b      	str	r3, [r7, #0]
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	e7fd      	b.n	8003316 <xTaskIncrementTick+0x46>
 800331a:	4b44      	ldr	r3, [pc, #272]	@ (800342c <xTaskIncrementTick+0x15c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	4b43      	ldr	r3, [pc, #268]	@ (8003430 <xTaskIncrementTick+0x160>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a41      	ldr	r2, [pc, #260]	@ (800342c <xTaskIncrementTick+0x15c>)
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4a41      	ldr	r2, [pc, #260]	@ (8003430 <xTaskIncrementTick+0x160>)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4b41      	ldr	r3, [pc, #260]	@ (8003434 <xTaskIncrementTick+0x164>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	4a3f      	ldr	r2, [pc, #252]	@ (8003434 <xTaskIncrementTick+0x164>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	f000 fada 	bl	80038f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800333c:	4b3e      	ldr	r3, [pc, #248]	@ (8003438 <xTaskIncrementTick+0x168>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	429a      	cmp	r2, r3
 8003344:	d34e      	bcc.n	80033e4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003346:	4b39      	ldr	r3, [pc, #228]	@ (800342c <xTaskIncrementTick+0x15c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <xTaskIncrementTick+0x84>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <xTaskIncrementTick+0x86>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335a:	4b37      	ldr	r3, [pc, #220]	@ (8003438 <xTaskIncrementTick+0x168>)
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	601a      	str	r2, [r3, #0]
					break;
 8003362:	e03f      	b.n	80033e4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003364:	4b31      	ldr	r3, [pc, #196]	@ (800342c <xTaskIncrementTick+0x15c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d203      	bcs.n	8003384 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800337c:	4a2e      	ldr	r2, [pc, #184]	@ (8003438 <xTaskIncrementTick+0x168>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6013      	str	r3, [r2, #0]
						break;
 8003382:	e02f      	b.n	80033e4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	3304      	adds	r3, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe ff0d 	bl	80021a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3318      	adds	r3, #24
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe ff04 	bl	80021a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	4b25      	ldr	r3, [pc, #148]	@ (800343c <xTaskIncrementTick+0x16c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d903      	bls.n	80033b4 <xTaskIncrementTick+0xe4>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4a22      	ldr	r2, [pc, #136]	@ (800343c <xTaskIncrementTick+0x16c>)
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <xTaskIncrementTick+0x170>)
 80033c2:	441a      	add	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fe fe91 	bl	80020f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <xTaskIncrementTick+0x174>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3b3      	bcc.n	8003346 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80033de:	2301      	movs	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e2:	e7b0      	b.n	8003346 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033e4:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <xTaskIncrementTick+0x174>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ea:	4915      	ldr	r1, [pc, #84]	@ (8003440 <xTaskIncrementTick+0x170>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d907      	bls.n	800340c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e004      	b.n	800340c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <xTaskIncrementTick+0x178>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <xTaskIncrementTick+0x178>)
 800340a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <xTaskIncrementTick+0x17c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003418:	697b      	ldr	r3, [r7, #20]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000ccc 	.word	0x20000ccc
 8003428:	20000ca8 	.word	0x20000ca8
 800342c:	20000c5c 	.word	0x20000c5c
 8003430:	20000c60 	.word	0x20000c60
 8003434:	20000cbc 	.word	0x20000cbc
 8003438:	20000cc4 	.word	0x20000cc4
 800343c:	20000cac 	.word	0x20000cac
 8003440:	200007d4 	.word	0x200007d4
 8003444:	200007d0 	.word	0x200007d0
 8003448:	20000cb4 	.word	0x20000cb4
 800344c:	20000cb8 	.word	0x20000cb8

08003450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003456:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <vTaskSwitchContext+0xa8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800345e:	4b27      	ldr	r3, [pc, #156]	@ (80034fc <vTaskSwitchContext+0xac>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003464:	e042      	b.n	80034ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003466:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <vTaskSwitchContext+0xac>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800346c:	4b24      	ldr	r3, [pc, #144]	@ (8003500 <vTaskSwitchContext+0xb0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e011      	b.n	8003498 <vTaskSwitchContext+0x48>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <vTaskSwitchContext+0x42>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	607b      	str	r3, [r7, #4]
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	e7fd      	b.n	800348e <vTaskSwitchContext+0x3e>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3b01      	subs	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	491a      	ldr	r1, [pc, #104]	@ (8003504 <vTaskSwitchContext+0xb4>)
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0e3      	beq.n	8003474 <vTaskSwitchContext+0x24>
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <vTaskSwitchContext+0xb4>)
 80034b8:	4413      	add	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3308      	adds	r3, #8
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d104      	bne.n	80034dc <vTaskSwitchContext+0x8c>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <vTaskSwitchContext+0xb8>)
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4a06      	ldr	r2, [pc, #24]	@ (8003500 <vTaskSwitchContext+0xb0>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000ccc 	.word	0x20000ccc
 80034fc:	20000cb8 	.word	0x20000cb8
 8003500:	20000cac 	.word	0x20000cac
 8003504:	200007d4 	.word	0x200007d4
 8003508:	200007d0 	.word	0x200007d0

0800350c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60fb      	str	r3, [r7, #12]
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003534:	4b07      	ldr	r3, [pc, #28]	@ (8003554 <vTaskPlaceOnEventList+0x48>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3318      	adds	r3, #24
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fe fdfb 	bl	8002138 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003542:	2101      	movs	r1, #1
 8003544:	6838      	ldr	r0, [r7, #0]
 8003546:	f000 fa85 	bl	8003a54 <prvAddCurrentTaskToDelayedList>
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200007d0 	.word	0x200007d0

08003558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	617b      	str	r3, [r7, #20]
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	e7fd      	b.n	800357e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003582:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <vTaskPlaceOnEventListRestricted+0x54>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3318      	adds	r3, #24
 8003588:	4619      	mov	r1, r3
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7fe fdb1 	bl	80020f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	68b8      	ldr	r0, [r7, #8]
 80035a0:	f000 fa58 	bl	8003a54 <prvAddCurrentTaskToDelayedList>
	}
 80035a4:	bf00      	nop
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200007d0 	.word	0x200007d0

080035b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	60fb      	str	r3, [r7, #12]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3318      	adds	r3, #24
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fde0 	bl	80021a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <xTaskRemoveFromEventList+0xb0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11d      	bne.n	800362c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fdd7 	bl	80021a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fe:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <xTaskRemoveFromEventList+0xb4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d903      	bls.n	800360e <xTaskRemoveFromEventList+0x5e>
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <xTaskRemoveFromEventList+0xb4>)
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4a13      	ldr	r2, [pc, #76]	@ (8003668 <xTaskRemoveFromEventList+0xb8>)
 800361c:	441a      	add	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	3304      	adds	r3, #4
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7fe fd64 	bl	80020f2 <vListInsertEnd>
 800362a:	e005      	b.n	8003638 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3318      	adds	r3, #24
 8003630:	4619      	mov	r1, r3
 8003632:	480e      	ldr	r0, [pc, #56]	@ (800366c <xTaskRemoveFromEventList+0xbc>)
 8003634:	f7fe fd5d 	bl	80020f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363c:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <xTaskRemoveFromEventList+0xc0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	429a      	cmp	r2, r3
 8003644:	d905      	bls.n	8003652 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <xTaskRemoveFromEventList+0xc4>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e001      	b.n	8003656 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003656:	697b      	ldr	r3, [r7, #20]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000ccc 	.word	0x20000ccc
 8003664:	20000cac 	.word	0x20000cac
 8003668:	200007d4 	.word	0x200007d4
 800366c:	20000c64 	.word	0x20000c64
 8003670:	200007d0 	.word	0x200007d0
 8003674:	20000cb8 	.word	0x20000cb8

08003678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <vTaskInternalSetTimeOutState+0x24>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <vTaskInternalSetTimeOutState+0x28>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	605a      	str	r2, [r3, #4]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000cbc 	.word	0x20000cbc
 80036a0:	20000ca8 	.word	0x20000ca8

080036a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	613b      	str	r3, [r7, #16]
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60fb      	str	r3, [r7, #12]
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	e7fd      	b.n	80036e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80036ea:	f000 fe17 	bl	800431c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <xTaskCheckForTimeOut+0xc0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d102      	bne.n	800370e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	e023      	b.n	8003756 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <xTaskCheckForTimeOut+0xc4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d007      	beq.n	800372a <xTaskCheckForTimeOut+0x86>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e015      	b.n	8003756 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	d20b      	bcs.n	800374c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff99 	bl	8003678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	e004      	b.n	8003756 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003756:	f000 fe11 	bl	800437c <vPortExitCritical>

	return xReturn;
 800375a:	69fb      	ldr	r3, [r7, #28]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000ca8 	.word	0x20000ca8
 8003768:	20000cbc 	.word	0x20000cbc

0800376c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003770:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <vTaskMissedYield+0x14>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000cb8 	.word	0x20000cb8

08003784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800378c:	f000 f852 	bl	8003834 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <prvIdleTask+0x28>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d9f9      	bls.n	800378c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <prvIdleTask+0x2c>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037a8:	e7f0      	b.n	800378c <prvIdleTask+0x8>
 80037aa:	bf00      	nop
 80037ac:	200007d4 	.word	0x200007d4
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	e00c      	b.n	80037da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4a12      	ldr	r2, [pc, #72]	@ (8003814 <prvInitialiseTaskLists+0x60>)
 80037cc:	4413      	add	r3, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fc64 	bl	800209c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3301      	adds	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b37      	cmp	r3, #55	@ 0x37
 80037de:	d9ef      	bls.n	80037c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037e0:	480d      	ldr	r0, [pc, #52]	@ (8003818 <prvInitialiseTaskLists+0x64>)
 80037e2:	f7fe fc5b 	bl	800209c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037e6:	480d      	ldr	r0, [pc, #52]	@ (800381c <prvInitialiseTaskLists+0x68>)
 80037e8:	f7fe fc58 	bl	800209c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037ec:	480c      	ldr	r0, [pc, #48]	@ (8003820 <prvInitialiseTaskLists+0x6c>)
 80037ee:	f7fe fc55 	bl	800209c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037f2:	480c      	ldr	r0, [pc, #48]	@ (8003824 <prvInitialiseTaskLists+0x70>)
 80037f4:	f7fe fc52 	bl	800209c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037f8:	480b      	ldr	r0, [pc, #44]	@ (8003828 <prvInitialiseTaskLists+0x74>)
 80037fa:	f7fe fc4f 	bl	800209c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <prvInitialiseTaskLists+0x78>)
 8003800:	4a05      	ldr	r2, [pc, #20]	@ (8003818 <prvInitialiseTaskLists+0x64>)
 8003802:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <prvInitialiseTaskLists+0x7c>)
 8003806:	4a05      	ldr	r2, [pc, #20]	@ (800381c <prvInitialiseTaskLists+0x68>)
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200007d4 	.word	0x200007d4
 8003818:	20000c34 	.word	0x20000c34
 800381c:	20000c48 	.word	0x20000c48
 8003820:	20000c64 	.word	0x20000c64
 8003824:	20000c78 	.word	0x20000c78
 8003828:	20000c90 	.word	0x20000c90
 800382c:	20000c5c 	.word	0x20000c5c
 8003830:	20000c60 	.word	0x20000c60

08003834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800383a:	e019      	b.n	8003870 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800383c:	f000 fd6e 	bl	800431c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003840:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <prvCheckTasksWaitingTermination+0x50>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fcab 	bl	80021a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003852:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <prvCheckTasksWaitingTermination+0x54>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	4a0b      	ldr	r2, [pc, #44]	@ (8003888 <prvCheckTasksWaitingTermination+0x54>)
 800385a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <prvCheckTasksWaitingTermination+0x58>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <prvCheckTasksWaitingTermination+0x58>)
 8003864:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003866:	f000 fd89 	bl	800437c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f810 	bl	8003890 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <prvCheckTasksWaitingTermination+0x58>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e1      	bne.n	800383c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000c78 	.word	0x20000c78
 8003888:	20000ca4 	.word	0x20000ca4
 800388c:	20000c8c 	.word	0x20000c8c

08003890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 ff02 	bl	80046b0 <vPortFree>
				vPortFree( pxTCB );
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 feff 	bl	80046b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038b2:	e019      	b.n	80038e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d103      	bne.n	80038c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fef6 	bl	80046b0 <vPortFree>
	}
 80038c4:	e010      	b.n	80038e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d00b      	beq.n	80038e8 <prvDeleteTCB+0x58>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	60fb      	str	r3, [r7, #12]
}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <prvDeleteTCB+0x54>
	}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <prvResetNextTaskUnblockTime+0x40>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <prvResetNextTaskUnblockTime+0x14>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <prvResetNextTaskUnblockTime+0x16>
 8003904:	2300      	movs	r3, #0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <prvResetNextTaskUnblockTime+0x44>)
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003912:	e008      	b.n	8003926 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003914:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <prvResetNextTaskUnblockTime+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <prvResetNextTaskUnblockTime+0x44>)
 8003924:	6013      	str	r3, [r2, #0]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	20000c5c 	.word	0x20000c5c
 8003934:	20000cc4 	.word	0x20000cc4

08003938 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <xTaskGetSchedulerState+0x34>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003946:	2301      	movs	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	e008      	b.n	800395e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <xTaskGetSchedulerState+0x38>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003954:	2302      	movs	r3, #2
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	e001      	b.n	800395e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800395e:	687b      	ldr	r3, [r7, #4]
	}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000cb0 	.word	0x20000cb0
 8003970:	20000ccc 	.word	0x20000ccc

08003974 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d058      	beq.n	8003a3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800398a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a48 <xTaskPriorityDisinherit+0xd4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d00b      	beq.n	80039ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	60fb      	str	r3, [r7, #12]
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60bb      	str	r3, [r7, #8]
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d02c      	beq.n	8003a3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d128      	bne.n	8003a3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fbda 	bl	80021a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <xTaskPriorityDisinherit+0xd8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d903      	bls.n	8003a1c <xTaskPriorityDisinherit+0xa8>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <xTaskPriorityDisinherit+0xd8>)
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4a09      	ldr	r2, [pc, #36]	@ (8003a50 <xTaskPriorityDisinherit+0xdc>)
 8003a2a:	441a      	add	r2, r3
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f7fe fb5d 	bl	80020f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a3c:	697b      	ldr	r3, [r7, #20]
	}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200007d0 	.word	0x200007d0
 8003a4c:	20000cac 	.word	0x20000cac
 8003a50:	200007d4 	.word	0x200007d4

08003a54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a5e:	4b21      	ldr	r3, [pc, #132]	@ (8003ae4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a64:	4b20      	ldr	r3, [pc, #128]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fb9c 	bl	80021a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d10a      	bne.n	8003a8e <prvAddCurrentTaskToDelayedList+0x3a>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4819      	ldr	r0, [pc, #100]	@ (8003aec <prvAddCurrentTaskToDelayedList+0x98>)
 8003a88:	f7fe fb33 	bl	80020f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a8c:	e026      	b.n	8003adc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4413      	add	r3, r2
 8003a94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a96:	4b14      	ldr	r3, [pc, #80]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d209      	bcs.n	8003aba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa6:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7fe fb40 	bl	8002138 <vListInsert>
}
 8003ab8:	e010      	b.n	8003adc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aba:	4b0e      	ldr	r3, [pc, #56]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe fb36 	bl	8002138 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d202      	bcs.n	8003adc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000ca8 	.word	0x20000ca8
 8003ae8:	200007d0 	.word	0x200007d0
 8003aec:	20000c90 	.word	0x20000c90
 8003af0:	20000c60 	.word	0x20000c60
 8003af4:	20000c5c 	.word	0x20000c5c
 8003af8:	20000cc4 	.word	0x20000cc4

08003afc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b06:	f000 fad9 	bl	80040bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b80 <xTimerCreateTimerTask+0x84>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d021      	beq.n	8003b56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b1a:	1d3a      	adds	r2, r7, #4
 8003b1c:	f107 0108 	add.w	r1, r7, #8
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fa9f 	bl	8002068 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	9202      	str	r2, [sp, #8]
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	2302      	movs	r3, #2
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	4911      	ldr	r1, [pc, #68]	@ (8003b84 <xTimerCreateTimerTask+0x88>)
 8003b3e:	4812      	ldr	r0, [pc, #72]	@ (8003b88 <xTimerCreateTimerTask+0x8c>)
 8003b40:	f7ff f852 	bl	8002be8 <xTaskCreateStatic>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4a11      	ldr	r2, [pc, #68]	@ (8003b8c <xTimerCreateTimerTask+0x90>)
 8003b48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <xTimerCreateTimerTask+0x90>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b52:	2301      	movs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	613b      	str	r3, [r7, #16]
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	e7fd      	b.n	8003b70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b74:	697b      	ldr	r3, [r7, #20]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000d00 	.word	0x20000d00
 8003b84:	0800498c 	.word	0x0800498c
 8003b88:	08003cb1 	.word	0x08003cb1
 8003b8c:	20000d04 	.word	0x20000d04

08003b90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <xTimerGenericCommand+0x30>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	623b      	str	r3, [r7, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <xTimerGenericCommand+0x98>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d02a      	beq.n	8003c1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	dc18      	bgt.n	8003c0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bda:	f7ff fead 	bl	8003938 <xTaskGetSchedulerState>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d109      	bne.n	8003bf8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003be4:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <xTimerGenericCommand+0x98>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f107 0110 	add.w	r1, r7, #16
 8003bec:	2300      	movs	r3, #0
 8003bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf0:	f7fe fc0e 	bl	8002410 <xQueueGenericSend>
 8003bf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bf6:	e012      	b.n	8003c1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <xTimerGenericCommand+0x98>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 0110 	add.w	r1, r7, #16
 8003c00:	2300      	movs	r3, #0
 8003c02:	2200      	movs	r2, #0
 8003c04:	f7fe fc04 	bl	8002410 <xQueueGenericSend>
 8003c08:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c0a:	e008      	b.n	8003c1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c0c:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <xTimerGenericCommand+0x98>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f107 0110 	add.w	r1, r7, #16
 8003c14:	2300      	movs	r3, #0
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	f7fe fcfc 	bl	8002614 <xQueueGenericSendFromISR>
 8003c1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3728      	adds	r7, #40	@ 0x28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000d00 	.word	0x20000d00

08003c2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c36:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <prvProcessExpiredTimer+0x80>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe faaf 	bl	80021a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d123      	bne.n	8003c9a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	18d1      	adds	r1, r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	f000 f8cc 	bl	8003dfc <prvInsertTimerInActiveList>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d017      	beq.n	8003c9a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	2100      	movs	r1, #0
 8003c74:	6978      	ldr	r0, [r7, #20]
 8003c76:	f7ff ff8b 	bl	8003b90 <xTimerGenericCommand>
 8003c7a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10b      	bne.n	8003c9a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60fb      	str	r3, [r7, #12]
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	e7fd      	b.n	8003c96 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	4798      	blx	r3
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000cf8 	.word	0x20000cf8

08003cb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cb8:	f107 0308 	add.w	r3, r7, #8
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 f859 	bl	8003d74 <prvGetNextExpireTime>
 8003cc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f805 	bl	8003cd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003cce:	f000 f8d7 	bl	8003e80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cd2:	bf00      	nop
 8003cd4:	e7f0      	b.n	8003cb8 <prvTimerTask+0x8>
	...

08003cd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ce2:	f7ff fa3b 	bl	800315c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f866 	bl	8003dbc <prvSampleTimeNow>
 8003cf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d130      	bne.n	8003d5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <prvProcessTimerOrBlockTask+0x3c>
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d806      	bhi.n	8003d14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d06:	f7ff fa37 	bl	8003178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff8d 	bl	8003c2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d12:	e024      	b.n	8003d5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d1a:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <prvProcessTimerOrBlockTask+0x90>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <prvProcessTimerOrBlockTask+0x94>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fe ff21 	bl	8002b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d3e:	f7ff fa1b 	bl	8003178 <xTaskResumeAll>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <prvProcessTimerOrBlockTask+0x98>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
}
 8003d58:	e001      	b.n	8003d5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d5a:	f7ff fa0d 	bl	8003178 <xTaskResumeAll>
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000cfc 	.word	0x20000cfc
 8003d6c:	20000d00 	.word	0x20000d00
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003db8 <prvGetNextExpireTime+0x44>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d9a:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <prvGetNextExpireTime+0x44>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	e001      	b.n	8003daa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000cf8 	.word	0x20000cf8

08003dbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dc4:	f7ff fa76 	bl	80032b4 <xTaskGetTickCount>
 8003dc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003dca:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <prvSampleTimeNow+0x3c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d205      	bcs.n	8003de0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003dd4:	f000 f910 	bl	8003ff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e002      	b.n	8003de6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003de6:	4a04      	ldr	r2, [pc, #16]	@ (8003df8 <prvSampleTimeNow+0x3c>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000d08 	.word	0x20000d08

08003dfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d812      	bhi.n	8003e48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e01b      	b.n	8003e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e36:	4b10      	ldr	r3, [pc, #64]	@ (8003e78 <prvInsertTimerInActiveList+0x7c>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fe f979 	bl	8002138 <vListInsert>
 8003e46:	e012      	b.n	8003e6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d206      	bcs.n	8003e5e <prvInsertTimerInActiveList+0x62>
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e007      	b.n	8003e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e5e:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <prvInsertTimerInActiveList+0x80>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f7fe f965 	bl	8002138 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e6e:	697b      	ldr	r3, [r7, #20]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000cfc 	.word	0x20000cfc
 8003e7c:	20000cf8 	.word	0x20000cf8

08003e80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08e      	sub	sp, #56	@ 0x38
 8003e84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e86:	e0a5      	b.n	8003fd4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da19      	bge.n	8003ec2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	3304      	adds	r3, #4
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	61fb      	str	r3, [r7, #28]
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	e7fd      	b.n	8003eae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eb8:	6850      	ldr	r0, [r2, #4]
 8003eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ebc:	6892      	ldr	r2, [r2, #8]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f2c0 8085 	blt.w	8003fd4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f964 	bl	80021a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff6a 	bl	8003dbc <prvSampleTimeNow>
 8003ee8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d86c      	bhi.n	8003fca <prvProcessReceivedCommands+0x14a>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <prvProcessReceivedCommands+0x78>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f21 	.word	0x08003f21
 8003f00:	08003f21 	.word	0x08003f21
 8003f04:	08003fcb 	.word	0x08003fcb
 8003f08:	08003f7f 	.word	0x08003f7f
 8003f0c:	08003fb9 	.word	0x08003fb9
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f21 	.word	0x08003f21
 8003f18:	08003fcb 	.word	0x08003fcb
 8003f1c:	08003f7f 	.word	0x08003f7f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	18d1      	adds	r1, r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f2e:	f7ff ff65 	bl	8003dfc <prvInsertTimerInActiveList>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d04a      	beq.n	8003fce <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f3e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d142      	bne.n	8003fce <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	441a      	add	r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2300      	movs	r3, #0
 8003f56:	2100      	movs	r1, #0
 8003f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f5a:	f7ff fe19 	bl	8003b90 <xTimerGenericCommand>
 8003f5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d133      	bne.n	8003fce <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	61bb      	str	r3, [r7, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	e7fd      	b.n	8003f7a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	617b      	str	r3, [r7, #20]
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	18d1      	adds	r1, r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb2:	f7ff ff23 	bl	8003dfc <prvInsertTimerInActiveList>
					break;
 8003fb6:	e00d      	b.n	8003fd4 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc4:	f000 fb74 	bl	80046b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fc8:	e003      	b.n	8003fd2 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8003fca:	bf00      	nop
 8003fcc:	e002      	b.n	8003fd4 <prvProcessReceivedCommands+0x154>
					break;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <prvProcessReceivedCommands+0x154>
					break;
 8003fd2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd4:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <prvProcessReceivedCommands+0x174>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	1d39      	adds	r1, r7, #4
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe fbb5 	bl	800274c <xQueueReceive>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f af4f 	bne.w	8003e88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	3730      	adds	r7, #48	@ 0x30
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000d00 	.word	0x20000d00

08003ff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ffe:	e046      	b.n	800408e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004000:	4b2c      	ldr	r3, [pc, #176]	@ (80040b4 <prvSwitchTimerLists+0xbc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800400a:	4b2a      	ldr	r3, [pc, #168]	@ (80040b4 <prvSwitchTimerLists+0xbc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe f8c5 	bl	80021a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d12f      	bne.n	800408e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d90e      	bls.n	800405e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800404c:	4b19      	ldr	r3, [pc, #100]	@ (80040b4 <prvSwitchTimerLists+0xbc>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7fe f86e 	bl	8002138 <vListInsert>
 800405c:	e017      	b.n	800408e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	2100      	movs	r1, #0
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff fd91 	bl	8003b90 <xTimerGenericCommand>
 800406e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <prvSwitchTimerLists+0x96>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	603b      	str	r3, [r7, #0]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800408e:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <prvSwitchTimerLists+0xbc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1b3      	bne.n	8004000 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004098:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <prvSwitchTimerLists+0xbc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <prvSwitchTimerLists+0xc0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <prvSwitchTimerLists+0xbc>)
 80040a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80040a6:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <prvSwitchTimerLists+0xc0>)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000cf8 	.word	0x20000cf8
 80040b8:	20000cfc 	.word	0x20000cfc

080040bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040c2:	f000 f92b 	bl	800431c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040c6:	4b15      	ldr	r3, [pc, #84]	@ (800411c <prvCheckForValidListAndQueue+0x60>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d120      	bne.n	8004110 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040ce:	4814      	ldr	r0, [pc, #80]	@ (8004120 <prvCheckForValidListAndQueue+0x64>)
 80040d0:	f7fd ffe4 	bl	800209c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040d4:	4813      	ldr	r0, [pc, #76]	@ (8004124 <prvCheckForValidListAndQueue+0x68>)
 80040d6:	f7fd ffe1 	bl	800209c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <prvCheckForValidListAndQueue+0x6c>)
 80040dc:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <prvCheckForValidListAndQueue+0x64>)
 80040de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <prvCheckForValidListAndQueue+0x70>)
 80040e2:	4a10      	ldr	r2, [pc, #64]	@ (8004124 <prvCheckForValidListAndQueue+0x68>)
 80040e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <prvCheckForValidListAndQueue+0x74>)
 80040ec:	4a11      	ldr	r2, [pc, #68]	@ (8004134 <prvCheckForValidListAndQueue+0x78>)
 80040ee:	2110      	movs	r1, #16
 80040f0:	200a      	movs	r0, #10
 80040f2:	f7fe f8ed 	bl	80022d0 <xQueueGenericCreateStatic>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4a08      	ldr	r2, [pc, #32]	@ (800411c <prvCheckForValidListAndQueue+0x60>)
 80040fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040fc:	4b07      	ldr	r3, [pc, #28]	@ (800411c <prvCheckForValidListAndQueue+0x60>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004104:	4b05      	ldr	r3, [pc, #20]	@ (800411c <prvCheckForValidListAndQueue+0x60>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	490b      	ldr	r1, [pc, #44]	@ (8004138 <prvCheckForValidListAndQueue+0x7c>)
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fd10 	bl	8002b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004110:	f000 f934 	bl	800437c <vPortExitCritical>
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000d00 	.word	0x20000d00
 8004120:	20000cd0 	.word	0x20000cd0
 8004124:	20000ce4 	.word	0x20000ce4
 8004128:	20000cf8 	.word	0x20000cf8
 800412c:	20000cfc 	.word	0x20000cfc
 8004130:	20000dac 	.word	0x20000dac
 8004134:	20000d0c 	.word	0x20000d0c
 8004138:	08004994 	.word	0x08004994

0800413c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b04      	subs	r3, #4
 800414c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b04      	subs	r3, #4
 800415a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3b04      	subs	r3, #4
 800416a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800416c:	4a08      	ldr	r2, [pc, #32]	@ (8004190 <pxPortInitialiseStack+0x54>)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3b14      	subs	r3, #20
 8004176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3b20      	subs	r3, #32
 8004182:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	08004195 	.word	0x08004195

08004194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800419e:	4b12      	ldr	r3, [pc, #72]	@ (80041e8 <prvTaskExitError+0x54>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d00b      	beq.n	80041c0 <prvTaskExitError+0x2c>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <prvTaskExitError+0x28>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	60bb      	str	r3, [r7, #8]
}
 80041d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041d4:	bf00      	nop
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0fc      	beq.n	80041d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	20000010 	.word	0x20000010
 80041ec:	00000000 	.word	0x00000000

080041f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041f0:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <pxCurrentTCBConst2>)
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6808      	ldr	r0, [r1, #0]
 80041f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041fa:	f380 8809 	msr	PSP, r0
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8811 	msr	BASEPRI, r0
 800420a:	f04e 0e0d 	orr.w	lr, lr, #13
 800420e:	4770      	bx	lr

08004210 <pxCurrentTCBConst2>:
 8004210:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop

08004218 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004218:	4806      	ldr	r0, [pc, #24]	@ (8004234 <prvPortStartFirstTask+0x1c>)
 800421a:	6800      	ldr	r0, [r0, #0]
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f380 8808 	msr	MSP, r0
 8004222:	b662      	cpsie	i
 8004224:	b661      	cpsie	f
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	df00      	svc	0
 8004230:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004232:	bf00      	nop
 8004234:	e000ed08 	.word	0xe000ed08

08004238 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800423e:	4b32      	ldr	r3, [pc, #200]	@ (8004308 <xPortStartScheduler+0xd0>)
 8004240:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	22ff      	movs	r2, #255	@ 0xff
 800424e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004260:	b2da      	uxtb	r2, r3
 8004262:	4b2a      	ldr	r3, [pc, #168]	@ (800430c <xPortStartScheduler+0xd4>)
 8004264:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004266:	4b2a      	ldr	r3, [pc, #168]	@ (8004310 <xPortStartScheduler+0xd8>)
 8004268:	2207      	movs	r2, #7
 800426a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800426c:	e009      	b.n	8004282 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800426e:	4b28      	ldr	r3, [pc, #160]	@ (8004310 <xPortStartScheduler+0xd8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3b01      	subs	r3, #1
 8004274:	4a26      	ldr	r2, [pc, #152]	@ (8004310 <xPortStartScheduler+0xd8>)
 8004276:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d0ef      	beq.n	800426e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800428e:	4b20      	ldr	r3, [pc, #128]	@ (8004310 <xPortStartScheduler+0xd8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1c3 0307 	rsb	r3, r3, #7
 8004296:	2b04      	cmp	r3, #4
 8004298:	d00b      	beq.n	80042b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60bb      	str	r3, [r7, #8]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042b2:	4b17      	ldr	r3, [pc, #92]	@ (8004310 <xPortStartScheduler+0xd8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <xPortStartScheduler+0xd8>)
 80042ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042bc:	4b14      	ldr	r3, [pc, #80]	@ (8004310 <xPortStartScheduler+0xd8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042c4:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <xPortStartScheduler+0xd8>)
 80042c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042d0:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <xPortStartScheduler+0xdc>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004314 <xPortStartScheduler+0xdc>)
 80042d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <xPortStartScheduler+0xdc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <xPortStartScheduler+0xdc>)
 80042e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80042e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042e8:	f000 f8b8 	bl	800445c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <xPortStartScheduler+0xe0>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042f2:	f7ff ff91 	bl	8004218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042f6:	f7ff f8ab 	bl	8003450 <vTaskSwitchContext>
	prvTaskExitError();
 80042fa:	f7ff ff4b 	bl	8004194 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000e400 	.word	0xe000e400
 800430c:	20000dfc 	.word	0x20000dfc
 8004310:	20000e00 	.word	0x20000e00
 8004314:	e000ed20 	.word	0xe000ed20
 8004318:	20000010 	.word	0x20000010

0800431c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	607b      	str	r3, [r7, #4]
}
 8004334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004336:	4b0f      	ldr	r3, [pc, #60]	@ (8004374 <vPortEnterCritical+0x58>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	4a0d      	ldr	r2, [pc, #52]	@ (8004374 <vPortEnterCritical+0x58>)
 800433e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <vPortEnterCritical+0x58>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d110      	bne.n	800436a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004348:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <vPortEnterCritical+0x5c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <vPortEnterCritical+0x4e>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	603b      	str	r3, [r7, #0]
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	e7fd      	b.n	8004366 <vPortEnterCritical+0x4a>
	}
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	20000010 	.word	0x20000010
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004382:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <vPortExitCritical+0x50>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <vPortExitCritical+0x26>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043a2:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <vPortExitCritical+0x50>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <vPortExitCritical+0x50>)
 80043aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <vPortExitCritical+0x50>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <vPortExitCritical+0x44>
 80043b4:	2300      	movs	r3, #0
 80043b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f383 8811 	msr	BASEPRI, r3
}
 80043be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000010 	.word	0x20000010

080043d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043d0:	f3ef 8009 	mrs	r0, PSP
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <pxCurrentTCBConst>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043e0:	6010      	str	r0, [r2, #0]
 80043e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80043e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043ea:	f380 8811 	msr	BASEPRI, r0
 80043ee:	f7ff f82f 	bl	8003450 <vTaskSwitchContext>
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f380 8811 	msr	BASEPRI, r0
 80043fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004406:	f380 8809 	msr	PSP, r0
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	4770      	bx	lr

08004410 <pxCurrentTCBConst>:
 8004410:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop

08004418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	607b      	str	r3, [r7, #4]
}
 8004430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004432:	f7fe ff4d 	bl	80032d0 <xTaskIncrementTick>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800443c:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <SysTick_Handler+0x40>)
 800443e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f383 8811 	msr	BASEPRI, r3
}
 800444e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004460:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <vPortSetupTimerInterrupt+0x30>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <vPortSetupTimerInterrupt+0x34>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800446c:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <vPortSetupTimerInterrupt+0x38>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a09      	ldr	r2, [pc, #36]	@ (8004498 <vPortSetupTimerInterrupt+0x3c>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	4a08      	ldr	r2, [pc, #32]	@ (800449c <vPortSetupTimerInterrupt+0x40>)
 800447a:	3b01      	subs	r3, #1
 800447c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800447e:	4b03      	ldr	r3, [pc, #12]	@ (800448c <vPortSetupTimerInterrupt+0x30>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	e000e010 	.word	0xe000e010
 8004490:	e000e018 	.word	0xe000e018
 8004494:	20000004 	.word	0x20000004
 8004498:	10624dd3 	.word	0x10624dd3
 800449c:	e000e014 	.word	0xe000e014

080044a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044a6:	f3ef 8305 	mrs	r3, IPSR
 80044aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	d915      	bls.n	80044de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044b2:	4a17      	ldr	r2, [pc, #92]	@ (8004510 <vPortValidateInterruptPriority+0x70>)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044bc:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <vPortValidateInterruptPriority+0x74>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	7afa      	ldrb	r2, [r7, #11]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d20b      	bcs.n	80044de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	607b      	str	r3, [r7, #4]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044de:	4b0e      	ldr	r3, [pc, #56]	@ (8004518 <vPortValidateInterruptPriority+0x78>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <vPortValidateInterruptPriority+0x7c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d90b      	bls.n	8004506 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	603b      	str	r3, [r7, #0]
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <vPortValidateInterruptPriority+0x62>
	}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	e000e3f0 	.word	0xe000e3f0
 8004514:	20000dfc 	.word	0x20000dfc
 8004518:	e000ed0c 	.word	0xe000ed0c
 800451c:	20000e00 	.word	0x20000e00

08004520 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	@ 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800452c:	f7fe fe16 	bl	800315c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004530:	4b5a      	ldr	r3, [pc, #360]	@ (800469c <pvPortMalloc+0x17c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004538:	f000 f916 	bl	8004768 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800453c:	4b58      	ldr	r3, [pc, #352]	@ (80046a0 <pvPortMalloc+0x180>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 8090 	bne.w	800466a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01e      	beq.n	800458e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004550:	2208      	movs	r2, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	3308      	adds	r3, #8
 800456a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <pvPortMalloc+0x6e>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	617b      	str	r3, [r7, #20]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d06a      	beq.n	800466a <pvPortMalloc+0x14a>
 8004594:	4b43      	ldr	r3, [pc, #268]	@ (80046a4 <pvPortMalloc+0x184>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d865      	bhi.n	800466a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800459e:	4b42      	ldr	r3, [pc, #264]	@ (80046a8 <pvPortMalloc+0x188>)
 80045a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045a2:	4b41      	ldr	r3, [pc, #260]	@ (80046a8 <pvPortMalloc+0x188>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045a8:	e004      	b.n	80045b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d903      	bls.n	80045c6 <pvPortMalloc+0xa6>
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f1      	bne.n	80045aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045c6:	4b35      	ldr	r3, [pc, #212]	@ (800469c <pvPortMalloc+0x17c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d04c      	beq.n	800466a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2208      	movs	r2, #8
 80045d6:	4413      	add	r3, r2
 80045d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	1ad2      	subs	r2, r2, r3
 80045ea:	2308      	movs	r3, #8
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d920      	bls.n	8004634 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <pvPortMalloc+0xfc>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	613b      	str	r3, [r7, #16]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800462e:	69b8      	ldr	r0, [r7, #24]
 8004630:	f000 f8fc 	bl	800482c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004634:	4b1b      	ldr	r3, [pc, #108]	@ (80046a4 <pvPortMalloc+0x184>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	4a19      	ldr	r2, [pc, #100]	@ (80046a4 <pvPortMalloc+0x184>)
 8004640:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004642:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <pvPortMalloc+0x184>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b19      	ldr	r3, [pc, #100]	@ (80046ac <pvPortMalloc+0x18c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d203      	bcs.n	8004656 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800464e:	4b15      	ldr	r3, [pc, #84]	@ (80046a4 <pvPortMalloc+0x184>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a16      	ldr	r2, [pc, #88]	@ (80046ac <pvPortMalloc+0x18c>)
 8004654:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <pvPortMalloc+0x180>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	431a      	orrs	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800466a:	f7fe fd85 	bl	8003178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <pvPortMalloc+0x170>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	60fb      	str	r3, [r7, #12]
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <pvPortMalloc+0x16c>
	return pvReturn;
 8004690:	69fb      	ldr	r3, [r7, #28]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	@ 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20001a0c 	.word	0x20001a0c
 80046a0:	20001a18 	.word	0x20001a18
 80046a4:	20001a10 	.word	0x20001a10
 80046a8:	20001a04 	.word	0x20001a04
 80046ac:	20001a14 	.word	0x20001a14

080046b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04a      	beq.n	8004758 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046c2:	2308      	movs	r3, #8
 80046c4:	425b      	negs	r3, r3
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	4b22      	ldr	r3, [pc, #136]	@ (8004760 <vPortFree+0xb0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <vPortFree+0x46>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	60fb      	str	r3, [r7, #12]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <vPortFree+0x66>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60bb      	str	r3, [r7, #8]
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	e7fd      	b.n	8004712 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <vPortFree+0xb0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d019      	beq.n	8004758 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d115      	bne.n	8004758 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <vPortFree+0xb0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	43db      	mvns	r3, r3
 8004736:	401a      	ands	r2, r3
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800473c:	f7fe fd0e 	bl	800315c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b07      	ldr	r3, [pc, #28]	@ (8004764 <vPortFree+0xb4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4413      	add	r3, r2
 800474a:	4a06      	ldr	r2, [pc, #24]	@ (8004764 <vPortFree+0xb4>)
 800474c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800474e:	6938      	ldr	r0, [r7, #16]
 8004750:	f000 f86c 	bl	800482c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004754:	f7fe fd10 	bl	8003178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004758:	bf00      	nop
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20001a18 	.word	0x20001a18
 8004764:	20001a10 	.word	0x20001a10

08004768 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800476e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004772:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004774:	4b27      	ldr	r3, [pc, #156]	@ (8004814 <prvHeapInit+0xac>)
 8004776:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3307      	adds	r3, #7
 8004786:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0307 	bic.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	4a1f      	ldr	r2, [pc, #124]	@ (8004814 <prvHeapInit+0xac>)
 8004798:	4413      	add	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004818 <prvHeapInit+0xb0>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004818 <prvHeapInit+0xb0>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4413      	add	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047b4:	2208      	movs	r2, #8
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a15      	ldr	r2, [pc, #84]	@ (800481c <prvHeapInit+0xb4>)
 80047c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047ca:	4b14      	ldr	r3, [pc, #80]	@ (800481c <prvHeapInit+0xb4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047d2:	4b12      	ldr	r3, [pc, #72]	@ (800481c <prvHeapInit+0xb4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047e8:	4b0c      	ldr	r3, [pc, #48]	@ (800481c <prvHeapInit+0xb4>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004820 <prvHeapInit+0xb8>)
 80047f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a09      	ldr	r2, [pc, #36]	@ (8004824 <prvHeapInit+0xbc>)
 80047fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004800:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <prvHeapInit+0xc0>)
 8004802:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004806:	601a      	str	r2, [r3, #0]
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000e04 	.word	0x20000e04
 8004818:	20001a04 	.word	0x20001a04
 800481c:	20001a0c 	.word	0x20001a0c
 8004820:	20001a14 	.word	0x20001a14
 8004824:	20001a10 	.word	0x20001a10
 8004828:	20001a18 	.word	0x20001a18

0800482c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004834:	4b27      	ldr	r3, [pc, #156]	@ (80048d4 <prvInsertBlockIntoFreeList+0xa8>)
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e002      	b.n	8004840 <prvInsertBlockIntoFreeList+0x14>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d8f7      	bhi.n	800483a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4413      	add	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d108      	bne.n	800486e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	441a      	add	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	441a      	add	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d118      	bne.n	80048b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4b14      	ldr	r3, [pc, #80]	@ (80048d8 <prvInsertBlockIntoFreeList+0xac>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d00d      	beq.n	80048aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e008      	b.n	80048bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048aa:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <prvInsertBlockIntoFreeList+0xac>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e003      	b.n	80048bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d002      	beq.n	80048ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	20001a04 	.word	0x20001a04
 80048d8:	20001a0c 	.word	0x20001a0c

080048dc <memset>:
 80048dc:	4603      	mov	r3, r0
 80048de:	4402      	add	r2, r0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d100      	bne.n	80048e6 <memset+0xa>
 80048e4:	4770      	bx	lr
 80048e6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ea:	e7f9      	b.n	80048e0 <memset+0x4>

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	2600      	movs	r6, #0
 80048f0:	4d0c      	ldr	r5, [pc, #48]	@ (8004924 <__libc_init_array+0x38>)
 80048f2:	4c0d      	ldr	r4, [pc, #52]	@ (8004928 <__libc_init_array+0x3c>)
 80048f4:	1b64      	subs	r4, r4, r5
 80048f6:	10a4      	asrs	r4, r4, #2
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	f000 f828 	bl	8004950 <_init>
 8004900:	2600      	movs	r6, #0
 8004902:	4d0a      	ldr	r5, [pc, #40]	@ (800492c <__libc_init_array+0x40>)
 8004904:	4c0a      	ldr	r4, [pc, #40]	@ (8004930 <__libc_init_array+0x44>)
 8004906:	1b64      	subs	r4, r4, r5
 8004908:	10a4      	asrs	r4, r4, #2
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	08004a58 	.word	0x08004a58
 8004928:	08004a58 	.word	0x08004a58
 800492c:	08004a58 	.word	0x08004a58
 8004930:	08004a5c 	.word	0x08004a5c

08004934 <memcpy>:
 8004934:	440a      	add	r2, r1
 8004936:	4291      	cmp	r1, r2
 8004938:	f100 33ff 	add.w	r3, r0, #4294967295
 800493c:	d100      	bne.n	8004940 <memcpy+0xc>
 800493e:	4770      	bx	lr
 8004940:	b510      	push	{r4, lr}
 8004942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004946:	4291      	cmp	r1, r2
 8004948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800494c:	d1f9      	bne.n	8004942 <memcpy+0xe>
 800494e:	bd10      	pop	{r4, pc}

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
