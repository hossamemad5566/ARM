
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005520  08005520  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005528  08005528  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005528  08005528  00006528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005530  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a18  2000001c  0800554c  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a34  0800554c  00007a34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015680  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ff  00000000  00000000  0001c6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0001f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edd  00000000  00000000  00020ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001995c  00000000  00000000  00021bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001648e  00000000  00000000  0003b519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d38  00000000  00000000  000519a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e56df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f50  00000000  00000000  000e5724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ea674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005340 	.word	0x08005340

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08005340 	.word	0x08005340

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PasswordSemaphore */
  PasswordSemaphoreHandle = osSemaphoreNew(1, 0, &PasswordSemaphore_attributes);
 8000168:	4a14      	ldr	r2, [pc, #80]	@ (80001bc <MX_FREERTOS_Init+0x58>)
 800016a:	2100      	movs	r1, #0
 800016c:	2001      	movs	r0, #1
 800016e:	f002 f88f 	bl	8002290 <osSemaphoreNew>
 8000172:	4603      	mov	r3, r0
 8000174:	4a12      	ldr	r2, [pc, #72]	@ (80001c0 <MX_FREERTOS_Init+0x5c>)
 8000176:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of PasswordQueue */
  PasswordQueueHandle = osMessageQueueNew(10, sizeof(uint8_t), &PasswordQueue_attributes);
 8000178:	4a12      	ldr	r2, [pc, #72]	@ (80001c4 <MX_FREERTOS_Init+0x60>)
 800017a:	2101      	movs	r1, #1
 800017c:	200a      	movs	r0, #10
 800017e:	f002 f923 	bl	80023c8 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a10      	ldr	r2, [pc, #64]	@ (80001c8 <MX_FREERTOS_Init+0x64>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Confirmation */
  ConfirmationHandle = osThreadNew(Confirmation_T, NULL, &Confirmation_attributes);
 8000188:	4a10      	ldr	r2, [pc, #64]	@ (80001cc <MX_FREERTOS_Init+0x68>)
 800018a:	2100      	movs	r1, #0
 800018c:	4810      	ldr	r0, [pc, #64]	@ (80001d0 <MX_FREERTOS_Init+0x6c>)
 800018e:	f001 ffa7 	bl	80020e0 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0f      	ldr	r2, [pc, #60]	@ (80001d4 <MX_FREERTOS_Init+0x70>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(Display_T, NULL, &Display_attributes);
 8000198:	4a0f      	ldr	r2, [pc, #60]	@ (80001d8 <MX_FREERTOS_Init+0x74>)
 800019a:	2100      	movs	r1, #0
 800019c:	480f      	ldr	r0, [pc, #60]	@ (80001dc <MX_FREERTOS_Init+0x78>)
 800019e:	f001 ff9f 	bl	80020e0 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a0e      	ldr	r2, [pc, #56]	@ (80001e0 <MX_FREERTOS_Init+0x7c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of Input */
  InputHandle = osThreadNew(Input_T, NULL, &Input_attributes);
 80001a8:	4a0e      	ldr	r2, [pc, #56]	@ (80001e4 <MX_FREERTOS_Init+0x80>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	480e      	ldr	r0, [pc, #56]	@ (80001e8 <MX_FREERTOS_Init+0x84>)
 80001ae:	f001 ff97 	bl	80020e0 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a0d      	ldr	r2, [pc, #52]	@ (80001ec <MX_FREERTOS_Init+0x88>)
 80001b6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	080054e4 	.word	0x080054e4
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080054cc 	.word	0x080054cc
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08005460 	.word	0x08005460
 80001d0:	080001f1 	.word	0x080001f1
 80001d4:	20000044 	.word	0x20000044
 80001d8:	08005484 	.word	0x08005484
 80001dc:	080002b1 	.word	0x080002b1
 80001e0:	20000048 	.word	0x20000048
 80001e4:	080054a8 	.word	0x080054a8
 80001e8:	080003fd 	.word	0x080003fd
 80001ec:	2000004c 	.word	0x2000004c

080001f0 <Confirmation_T>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Confirmation_T */
void Confirmation_T(void *argument)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Confirmation_T */
  uint8_t reenterCount = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(PasswordSemaphoreHandle, 1000);
 80001fc:	4b23      	ldr	r3, [pc, #140]	@ (800028c <Confirmation_T+0x9c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fe7d 	bl	8002f04 <xQueueSemaphoreTake>
  // HAL_UART_Transmit(&huart1, (uint8_t *)"check ok\r\n", 11, 200);
  /* Infinite loop */
  for (;;)
  {
    xSemaphoreTake(PasswordSemaphoreHandle, HAL_MAX_DELAY);
 800020a:	4b20      	ldr	r3, [pc, #128]	@ (800028c <Confirmation_T+0x9c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f04f 31ff 	mov.w	r1, #4294967295
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fe76 	bl	8002f04 <xQueueSemaphoreTake>
    if (strcmp((char *)Password_Ch, (char *)Password_In) == 0)
 8000218:	491d      	ldr	r1, [pc, #116]	@ (8000290 <Confirmation_T+0xa0>)
 800021a:	481e      	ldr	r0, [pc, #120]	@ (8000294 <Confirmation_T+0xa4>)
 800021c:	f7ff ff98 	bl	8000150 <strcmp>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d10f      	bne.n	8000246 <Confirmation_T+0x56>
    {
      HAL_UART_Transmit(&huart1, (uint8_t *)"Access granted\t LED ON \r\n", 27, 300);
 8000226:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800022a:	221b      	movs	r2, #27
 800022c:	491a      	ldr	r1, [pc, #104]	@ (8000298 <Confirmation_T+0xa8>)
 800022e:	481b      	ldr	r0, [pc, #108]	@ (800029c <Confirmation_T+0xac>)
 8000230:	f001 fcde 	bl	8001bf0 <HAL_UART_Transmit>
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800023a:	4819      	ldr	r0, [pc, #100]	@ (80002a0 <Confirmation_T+0xb0>)
 800023c:	f000 fde6 	bl	8000e0c <HAL_GPIO_WritePin>
      reenterCount = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]
 8000244:	e7e1      	b.n	800020a <Confirmation_T+0x1a>
    }
    else
    {
      if(BlockFlag == 0)
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <Confirmation_T+0xb4>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1dd      	bne.n	800020a <Confirmation_T+0x1a>
      {
        reenterCount++;
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	3301      	adds	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, (uint8_t *)"Access denied\t LED OFF\r\n", 24, 250);
 8000254:	23fa      	movs	r3, #250	@ 0xfa
 8000256:	2218      	movs	r2, #24
 8000258:	4913      	ldr	r1, [pc, #76]	@ (80002a8 <Confirmation_T+0xb8>)
 800025a:	4810      	ldr	r0, [pc, #64]	@ (800029c <Confirmation_T+0xac>)
 800025c:	f001 fcc8 	bl	8001bf0 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000266:	480e      	ldr	r0, [pc, #56]	@ (80002a0 <Confirmation_T+0xb0>)
 8000268:	f000 fdd0 	bl	8000e0c <HAL_GPIO_WritePin>
        if (reenterCount == BLOCKING_CHANCES)
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	2b04      	cmp	r3, #4
 8000270:	d1cb      	bne.n	800020a <Confirmation_T+0x1a>
        {
          HAL_UART_Transmit(&huart1, (uint8_t *)"you are blocked\r\n", 18, 300);
 8000272:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000276:	2212      	movs	r2, #18
 8000278:	490c      	ldr	r1, [pc, #48]	@ (80002ac <Confirmation_T+0xbc>)
 800027a:	4808      	ldr	r0, [pc, #32]	@ (800029c <Confirmation_T+0xac>)
 800027c:	f001 fcb8 	bl	8001bf0 <HAL_UART_Transmit>
          BlockFlag = 1;
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <Confirmation_T+0xb4>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
          reenterCount =0;
 8000286:	2300      	movs	r3, #0
 8000288:	73fb      	strb	r3, [r7, #15]
    xSemaphoreTake(PasswordSemaphoreHandle, HAL_MAX_DELAY);
 800028a:	e7be      	b.n	800020a <Confirmation_T+0x1a>
 800028c:	20000054 	.word	0x20000054
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	0800539c 	.word	0x0800539c
 800029c:	200000a0 	.word	0x200000a0
 80002a0:	40011000 	.word	0x40011000
 80002a4:	20000042 	.word	0x20000042
 80002a8:	080053b8 	.word	0x080053b8
 80002ac:	080053d4 	.word	0x080053d4

080002b0 <Display_T>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Display_T */
void Display_T(void *argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_T */
  DisplayState_t CurrentState = welcome;
 80002b8:	2300      	movs	r3, #0
 80002ba:	75fb      	strb	r3, [r7, #23]
  osStatus queueState = pdFALSE;
 80002bc:	2300      	movs	r3, #0
 80002be:	613b      	str	r3, [r7, #16]
  uint8_t inputKey = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]
  uint8_t passwordIndex = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	75bb      	strb	r3, [r7, #22]
  // HAL_UART_Transmit(&huart1, (uint8_t *)"Display start\r\n", 16, 200);
  /* Infinite loop */
  for (;;)
  {
    queueState = xQueueReceive(PasswordQueueHandle, &inputKey, 5000);
 80002c8:	4b43      	ldr	r3, [pc, #268]	@ (80003d8 <Display_T+0x128>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f107 010f 	add.w	r1, r7, #15
 80002d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd33 	bl	8002d40 <xQueueReceive>
 80002da:	6138      	str	r0, [r7, #16]
    if (queueState == pdPASS)
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d153      	bne.n	800038a <Display_T+0xda>
    {
      switch (CurrentState)
 80002e2:	7dfb      	ldrb	r3, [r7, #23]
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d035      	beq.n	8000354 <Display_T+0xa4>
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	dc6c      	bgt.n	80003c6 <Display_T+0x116>
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <Display_T+0x46>
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d00c      	beq.n	800030e <Display_T+0x5e>
        {
         HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);       
        }
        break;
      default:
        break;
 80002f4:	e067      	b.n	80003c6 <Display_T+0x116>
        if (inputKey == '#')
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	2b23      	cmp	r3, #35	@ 0x23
 80002fa:	d166      	bne.n	80003ca <Display_T+0x11a>
          CurrentState = receive;
 80002fc:	2301      	movs	r3, #1
 80002fe:	75fb      	strb	r3, [r7, #23]
          HAL_UART_Transmit(&huart1, (void *)"\r\nPassword:\t", 13, 200);
 8000300:	23c8      	movs	r3, #200	@ 0xc8
 8000302:	220d      	movs	r2, #13
 8000304:	4935      	ldr	r1, [pc, #212]	@ (80003dc <Display_T+0x12c>)
 8000306:	4836      	ldr	r0, [pc, #216]	@ (80003e0 <Display_T+0x130>)
 8000308:	f001 fc72 	bl	8001bf0 <HAL_UART_Transmit>
        break;
 800030c:	e05d      	b.n	80003ca <Display_T+0x11a>
        if (inputKey == '#')
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	2b23      	cmp	r3, #35	@ 0x23
 8000312:	d102      	bne.n	800031a <Display_T+0x6a>
          CurrentState = submit;
 8000314:	2302      	movs	r3, #2
 8000316:	75fb      	strb	r3, [r7, #23]
        break;
 8000318:	e059      	b.n	80003ce <Display_T+0x11e>
          if (passwordIndex < 9)
 800031a:	7dbb      	ldrb	r3, [r7, #22]
 800031c:	2b08      	cmp	r3, #8
 800031e:	d856      	bhi.n	80003ce <Display_T+0x11e>
            Password_In[passwordIndex] = inputKey;
 8000320:	7dbb      	ldrb	r3, [r7, #22]
 8000322:	7bf9      	ldrb	r1, [r7, #15]
 8000324:	4a2f      	ldr	r2, [pc, #188]	@ (80003e4 <Display_T+0x134>)
 8000326:	54d1      	strb	r1, [r2, r3]
            passwordIndex++;
 8000328:	7dbb      	ldrb	r3, [r7, #22]
 800032a:	3301      	adds	r3, #1
 800032c:	75bb      	strb	r3, [r7, #22]
            HAL_UART_Transmit(&huart1, (uint8_t *)"*", 2, 100);
 800032e:	2364      	movs	r3, #100	@ 0x64
 8000330:	2202      	movs	r2, #2
 8000332:	492d      	ldr	r1, [pc, #180]	@ (80003e8 <Display_T+0x138>)
 8000334:	482a      	ldr	r0, [pc, #168]	@ (80003e0 <Display_T+0x130>)
 8000336:	f001 fc5b 	bl	8001bf0 <HAL_UART_Transmit>
            if(passwordIndex == 9)
 800033a:	7dbb      	ldrb	r3, [r7, #22]
 800033c:	2b09      	cmp	r3, #9
 800033e:	d146      	bne.n	80003ce <Display_T+0x11e>
              CurrentState = submit;
 8000340:	2302      	movs	r3, #2
 8000342:	75fb      	strb	r3, [r7, #23]
              HAL_UART_Transmit(&huart1, (uint8_t *)"\r\nPress # to confirm \r\n", 24, 500);
 8000344:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000348:	2218      	movs	r2, #24
 800034a:	4928      	ldr	r1, [pc, #160]	@ (80003ec <Display_T+0x13c>)
 800034c:	4824      	ldr	r0, [pc, #144]	@ (80003e0 <Display_T+0x130>)
 800034e:	f001 fc4f 	bl	8001bf0 <HAL_UART_Transmit>
        break;
 8000352:	e03c      	b.n	80003ce <Display_T+0x11e>
        Password_In[passwordIndex] = '\0'; /*add null to the string*/
 8000354:	7dbb      	ldrb	r3, [r7, #22]
 8000356:	4a23      	ldr	r2, [pc, #140]	@ (80003e4 <Display_T+0x134>)
 8000358:	2100      	movs	r1, #0
 800035a:	54d1      	strb	r1, [r2, r3]
        passwordIndex = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	75bb      	strb	r3, [r7, #22]
        CurrentState = welcome;
 8000360:	2300      	movs	r3, #0
 8000362:	75fb      	strb	r3, [r7, #23]
        xSemaphoreGive(PasswordSemaphoreHandle);
 8000364:	4b22      	ldr	r3, [pc, #136]	@ (80003f0 <Display_T+0x140>)
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	2300      	movs	r3, #0
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fb49 	bl	8002a04 <xQueueGenericSend>
        if(BlockFlag == 0)
 8000372:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <Display_T+0x144>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d12b      	bne.n	80003d2 <Display_T+0x122>
         HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);       
 800037a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800037e:	2232      	movs	r2, #50	@ 0x32
 8000380:	491d      	ldr	r1, [pc, #116]	@ (80003f8 <Display_T+0x148>)
 8000382:	4817      	ldr	r0, [pc, #92]	@ (80003e0 <Display_T+0x130>)
 8000384:	f001 fc34 	bl	8001bf0 <HAL_UART_Transmit>
        break;
 8000388:	e023      	b.n	80003d2 <Display_T+0x122>
      }
    }
    else if (passwordIndex > 0)
 800038a:	7dbb      	ldrb	r3, [r7, #22]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d09b      	beq.n	80002c8 <Display_T+0x18>
    {
      /*time out*/
        Password_In[passwordIndex] = '\0'; /*add null to the string*/
 8000390:	7dbb      	ldrb	r3, [r7, #22]
 8000392:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <Display_T+0x134>)
 8000394:	2100      	movs	r1, #0
 8000396:	54d1      	strb	r1, [r2, r3]
        passwordIndex = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	75bb      	strb	r3, [r7, #22]
        CurrentState = welcome;
 800039c:	2300      	movs	r3, #0
 800039e:	75fb      	strb	r3, [r7, #23]
        /*release the semaphore to fire the confirmation task*/
        xSemaphoreGive(PasswordSemaphoreHandle);
 80003a0:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <Display_T+0x140>)
 80003a2:	6818      	ldr	r0, [r3, #0]
 80003a4:	2300      	movs	r3, #0
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	f002 fb2b 	bl	8002a04 <xQueueGenericSend>
        if(BlockFlag == 0)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <Display_T+0x144>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d188      	bne.n	80002c8 <Display_T+0x18>
        {
         HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);       
 80003b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003ba:	2232      	movs	r2, #50	@ 0x32
 80003bc:	490e      	ldr	r1, [pc, #56]	@ (80003f8 <Display_T+0x148>)
 80003be:	4808      	ldr	r0, [pc, #32]	@ (80003e0 <Display_T+0x130>)
 80003c0:	f001 fc16 	bl	8001bf0 <HAL_UART_Transmit>
 80003c4:	e780      	b.n	80002c8 <Display_T+0x18>
        break;
 80003c6:	bf00      	nop
 80003c8:	e77e      	b.n	80002c8 <Display_T+0x18>
        break;
 80003ca:	bf00      	nop
 80003cc:	e77c      	b.n	80002c8 <Display_T+0x18>
        break;
 80003ce:	bf00      	nop
 80003d0:	e77a      	b.n	80002c8 <Display_T+0x18>
        break;
 80003d2:	bf00      	nop
    queueState = xQueueReceive(PasswordQueueHandle, &inputKey, 5000);
 80003d4:	e778      	b.n	80002c8 <Display_T+0x18>
 80003d6:	bf00      	nop
 80003d8:	20000050 	.word	0x20000050
 80003dc:	080053e8 	.word	0x080053e8
 80003e0:	200000a0 	.word	0x200000a0
 80003e4:	20000038 	.word	0x20000038
 80003e8:	080053f8 	.word	0x080053f8
 80003ec:	080053fc 	.word	0x080053fc
 80003f0:	20000054 	.word	0x20000054
 80003f4:	20000042 	.word	0x20000042
 80003f8:	08005414 	.word	0x08005414

080003fc <Input_T>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Input_T */
void Input_T(void *argument)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Input_T */
  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,SET);
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040a:	4819      	ldr	r0, [pc, #100]	@ (8000470 <Input_T+0x74>)
 800040c:	f000 fcfe 	bl	8000e0c <HAL_GPIO_WritePin>
  uint8_t inputKey = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	73bb      	strb	r3, [r7, #14]
  uint8_t uartReturnState = HAL_BUSY;
 8000414:	2302      	movs	r3, #2
 8000416:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);
 8000418:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800041c:	2232      	movs	r2, #50	@ 0x32
 800041e:	4915      	ldr	r1, [pc, #84]	@ (8000474 <Input_T+0x78>)
 8000420:	4815      	ldr	r0, [pc, #84]	@ (8000478 <Input_T+0x7c>)
 8000422:	f001 fbe5 	bl	8001bf0 <HAL_UART_Transmit>
  /* Infinite loop */
  for (;;)
  {
    uartReturnState = HAL_UART_Receive(&huart1, &inputKey, 1, 5000);
 8000426:	f107 010e 	add.w	r1, r7, #14
 800042a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800042e:	2201      	movs	r2, #1
 8000430:	4811      	ldr	r0, [pc, #68]	@ (8000478 <Input_T+0x7c>)
 8000432:	f001 fc60 	bl	8001cf6 <HAL_UART_Receive>
 8000436:	4603      	mov	r3, r0
 8000438:	73fb      	strb	r3, [r7, #15]
    if( uartReturnState == HAL_OK   )
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f2      	bne.n	8000426 <Input_T+0x2a>
    {
      if (BlockFlag == 0)
 8000440:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <Input_T+0x80>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d10b      	bne.n	8000460 <Input_T+0x64>
      {
        xQueueSend(PasswordQueueHandle, (void *)&inputKey, 0); /*message send to queue*/
 8000448:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <Input_T+0x84>)
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	f107 010e 	add.w	r1, r7, #14
 8000450:	2300      	movs	r3, #0
 8000452:	2200      	movs	r2, #0
 8000454:	f002 fad6 	bl	8002a04 <xQueueGenericSend>
        osDelay(50);                                           /*the 50 ms is min value for human i/p*/
 8000458:	2032      	movs	r0, #50	@ 0x32
 800045a:	f001 feeb 	bl	8002234 <osDelay>
 800045e:	e7e2      	b.n	8000426 <Input_T+0x2a>
      }
      else
      {
        HAL_UART_Transmit(&huart1, (uint8_t *)"you are blocked\r\n", 18, 200);
 8000460:	23c8      	movs	r3, #200	@ 0xc8
 8000462:	2212      	movs	r2, #18
 8000464:	4907      	ldr	r1, [pc, #28]	@ (8000484 <Input_T+0x88>)
 8000466:	4804      	ldr	r0, [pc, #16]	@ (8000478 <Input_T+0x7c>)
 8000468:	f001 fbc2 	bl	8001bf0 <HAL_UART_Transmit>
    uartReturnState = HAL_UART_Receive(&huart1, &inputKey, 1, 5000);
 800046c:	e7db      	b.n	8000426 <Input_T+0x2a>
 800046e:	bf00      	nop
 8000470:	40011000 	.word	0x40011000
 8000474:	08005414 	.word	0x08005414
 8000478:	200000a0 	.word	0x200000a0
 800047c:	20000042 	.word	0x20000042
 8000480:	20000050 	.word	0x20000050
 8000484:	080053d4 	.word	0x080053d4

08000488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	4b1e      	ldr	r3, [pc, #120]	@ (8000518 <MX_GPIO_Init+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0310 	and.w	r3, r3, #16
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	4b18      	ldr	r3, [pc, #96]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a17      	ldr	r2, [pc, #92]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0320 	and.w	r3, r3, #32
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a11      	ldr	r2, [pc, #68]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ea:	480c      	ldr	r0, [pc, #48]	@ (800051c <MX_GPIO_Init+0x94>)
 80004ec:	f000 fc8e 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2302      	movs	r3, #2
 8000500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	4804      	ldr	r0, [pc, #16]	@ (800051c <MX_GPIO_Init+0x94>)
 800050a:	f000 fafb 	bl	8000b04 <HAL_GPIO_Init>

}
 800050e:	bf00      	nop
 8000510:	3720      	adds	r7, #32
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40011000 	.word	0x40011000

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 f9dc 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f80c 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f7ff ffac 	bl	8000488 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000530:	f000 f93a 	bl	80007a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f001 fd6e 	bl	8002014 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000538:	f7ff fe14 	bl	8000164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800053c:	f001 fd9c 	bl	8002078 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <main+0x20>

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b090      	sub	sp, #64	@ 0x40
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2228      	movs	r2, #40	@ 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 feba 	bl	80052cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000582:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fc55 	bl	8000e3c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000598:	f000 f82c 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fec2 	bl	8001340 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005c2:	f000 f817 	bl	80005f4 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3740      	adds	r7, #64	@ 0x40
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d101      	bne.n	80005e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005e2:	f000 f993 	bl	800090c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40012c00 	.word	0x40012c00

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x8>

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <HAL_MspInit+0x68>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a17      	ldr	r2, [pc, #92]	@ (8000668 <HAL_MspInit+0x68>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <HAL_MspInit+0x68>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <HAL_MspInit+0x68>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <HAL_MspInit+0x68>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <HAL_MspInit+0x68>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	210f      	movs	r1, #15
 800063a:	f06f 0001 	mvn.w	r0, #1
 800063e:	f000 fa36 	bl	8000aae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000642:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <HAL_MspInit+0x6c>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	4a04      	ldr	r2, [pc, #16]	@ (800066c <HAL_MspInit+0x6c>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	40010000 	.word	0x40010000

08000670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	@ 0x30
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000678:	2300      	movs	r3, #0
 800067a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000680:	2300      	movs	r3, #0
 8000682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000686:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <HAL_InitTick+0xd0>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a2d      	ldr	r2, [pc, #180]	@ (8000740 <HAL_InitTick+0xd0>)
 800068c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <HAL_InitTick+0xd0>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800069e:	f107 020c 	add.w	r2, r7, #12
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 ffb9 	bl	8001620 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006ae:	f000 ffa3 	bl	80015f8 <HAL_RCC_GetPCLK2Freq>
 80006b2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b6:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <HAL_InitTick+0xd4>)
 80006b8:	fba2 2303 	umull	r2, r3, r2, r3
 80006bc:	0c9b      	lsrs	r3, r3, #18
 80006be:	3b01      	subs	r3, #1
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <HAL_InitTick+0xd8>)
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <HAL_InitTick+0xdc>)
 80006c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <HAL_InitTick+0xd8>)
 80006ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ce:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000748 <HAL_InitTick+0xd8>)
 80006d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_InitTick+0xd8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <HAL_InitTick+0xd8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <HAL_InitTick+0xd8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006e8:	4817      	ldr	r0, [pc, #92]	@ (8000748 <HAL_InitTick+0xd8>)
 80006ea:	f000 ffe7 	bl	80016bc <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80006f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d11b      	bne.n	8000734 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006fc:	4812      	ldr	r0, [pc, #72]	@ (8000748 <HAL_InitTick+0xd8>)
 80006fe:	f001 f835 	bl	800176c <HAL_TIM_Base_Start_IT>
 8000702:	4603      	mov	r3, r0
 8000704:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800070c:	2b00      	cmp	r3, #0
 800070e:	d111      	bne.n	8000734 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000710:	2019      	movs	r0, #25
 8000712:	f000 f9e8 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d808      	bhi.n	800072e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800071c:	2200      	movs	r2, #0
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	2019      	movs	r0, #25
 8000722:	f000 f9c4 	bl	8000aae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <HAL_InitTick+0xe0>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e002      	b.n	8000734 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000738:	4618      	mov	r0, r3
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	431bde83 	.word	0x431bde83
 8000748:	20000058 	.word	0x20000058
 800074c:	40012c00 	.word	0x40012c00
 8000750:	20000010 	.word	0x20000010

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <NMI_Handler+0x4>

0800075c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <HardFault_Handler+0x4>

08000764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <MemManage_Handler+0x4>

0800076c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <UsageFault_Handler+0x4>

0800077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <TIM1_UP_IRQHandler+0x10>)
 800078e:	f001 f83f 	bl	8001810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000058 	.word	0x20000058

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <MX_USART1_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f001 f9b6 	bl	8001b50 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f7ff ff03 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000a0 	.word	0x200000a0
 80007f8:	40013800 	.word	0x40013800

080007fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <HAL_UART_MspInit+0x8c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d131      	bne.n	8000880 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <HAL_UART_MspInit+0x90>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a1a      	ldr	r2, [pc, #104]	@ (800088c <HAL_UART_MspInit+0x90>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_UART_MspInit+0x90>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_UART_MspInit+0x90>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a14      	ldr	r2, [pc, #80]	@ (800088c <HAL_UART_MspInit+0x90>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_UART_MspInit+0x90>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800084c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4619      	mov	r1, r3
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <HAL_UART_MspInit+0x94>)
 8000862:	f000 f94f 	bl	8000b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <HAL_UART_MspInit+0x94>)
 800087c:	f000 f942 	bl	8000b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40013800 	.word	0x40013800
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800

08000894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff ff82 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800089a:	490c      	ldr	r1, [pc, #48]	@ (80008cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800089c:	4a0c      	ldr	r2, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a09      	ldr	r2, [pc, #36]	@ (80008d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b0:	4c09      	ldr	r4, [pc, #36]	@ (80008d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f004 fd0d 	bl	80052dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c2:	f7ff fe2d 	bl	8000520 <main>
  bx lr
 80008c6:	4770      	bx	lr
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80008d0:	08005530 	.word	0x08005530
  ldr r2, =_sbss
 80008d4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80008d8:	20001a34 	.word	0x20001a34

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x28>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f8d1 	bl	8000a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff feba 	bl	8000670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fe80 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_IncTick+0x1c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_IncTick+0x20>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a03      	ldr	r2, [pc, #12]	@ (800092c <HAL_IncTick+0x20>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	20000014 	.word	0x20000014
 800092c:	200000e8 	.word	0x200000e8

08000930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b02      	ldr	r3, [pc, #8]	@ (8000940 <HAL_GetTick+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	200000e8 	.word	0x200000e8

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4906      	ldr	r1, [pc, #24]	@ (80009dc <__NVIC_EnableIRQ+0x34>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	@ (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	@ 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	@ 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff4f 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac0:	f7ff ff64 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	6978      	ldr	r0, [r7, #20]
 8000acc:	f7ff ffb2 	bl	8000a34 <NVIC_EncodePriority>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff81 	bl	80009e0 <__NVIC_SetPriority>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff57 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b08b      	sub	sp, #44	@ 0x2c
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e169      	b.n	8000dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f040 8158 	bne.w	8000de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	4a9a      	ldr	r2, [pc, #616]	@ (8000da4 <HAL_GPIO_Init+0x2a0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d05e      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b40:	4a98      	ldr	r2, [pc, #608]	@ (8000da4 <HAL_GPIO_Init+0x2a0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d875      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b46:	4a98      	ldr	r2, [pc, #608]	@ (8000da8 <HAL_GPIO_Init+0x2a4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d058      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b4c:	4a96      	ldr	r2, [pc, #600]	@ (8000da8 <HAL_GPIO_Init+0x2a4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d86f      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b52:	4a96      	ldr	r2, [pc, #600]	@ (8000dac <HAL_GPIO_Init+0x2a8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d052      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b58:	4a94      	ldr	r2, [pc, #592]	@ (8000dac <HAL_GPIO_Init+0x2a8>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d869      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b5e:	4a94      	ldr	r2, [pc, #592]	@ (8000db0 <HAL_GPIO_Init+0x2ac>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d04c      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b64:	4a92      	ldr	r2, [pc, #584]	@ (8000db0 <HAL_GPIO_Init+0x2ac>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d863      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b6a:	4a92      	ldr	r2, [pc, #584]	@ (8000db4 <HAL_GPIO_Init+0x2b0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d046      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b70:	4a90      	ldr	r2, [pc, #576]	@ (8000db4 <HAL_GPIO_Init+0x2b0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d85d      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b76:	2b12      	cmp	r3, #18
 8000b78:	d82a      	bhi.n	8000bd0 <HAL_GPIO_Init+0xcc>
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d859      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <HAL_GPIO_Init+0x80>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000bff 	.word	0x08000bff
 8000b88:	08000bd9 	.word	0x08000bd9
 8000b8c:	08000beb 	.word	0x08000beb
 8000b90:	08000c2d 	.word	0x08000c2d
 8000b94:	08000c33 	.word	0x08000c33
 8000b98:	08000c33 	.word	0x08000c33
 8000b9c:	08000c33 	.word	0x08000c33
 8000ba0:	08000c33 	.word	0x08000c33
 8000ba4:	08000c33 	.word	0x08000c33
 8000ba8:	08000c33 	.word	0x08000c33
 8000bac:	08000c33 	.word	0x08000c33
 8000bb0:	08000c33 	.word	0x08000c33
 8000bb4:	08000c33 	.word	0x08000c33
 8000bb8:	08000c33 	.word	0x08000c33
 8000bbc:	08000c33 	.word	0x08000c33
 8000bc0:	08000c33 	.word	0x08000c33
 8000bc4:	08000c33 	.word	0x08000c33
 8000bc8:	08000be1 	.word	0x08000be1
 8000bcc:	08000bf5 	.word	0x08000bf5
 8000bd0:	4a79      	ldr	r2, [pc, #484]	@ (8000db8 <HAL_GPIO_Init+0x2b4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bd6:	e02c      	b.n	8000c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e029      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	3304      	adds	r3, #4
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e024      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e01f      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	330c      	adds	r3, #12
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e01a      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c06:	2304      	movs	r3, #4
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e013      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d105      	bne.n	8000c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c14:	2308      	movs	r3, #8
 8000c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	611a      	str	r2, [r3, #16]
          break;
 8000c1e:	e009      	b.n	8000c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	615a      	str	r2, [r3, #20]
          break;
 8000c2a:	e003      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e000      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          break;
 8000c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	2bff      	cmp	r3, #255	@ 0xff
 8000c38:	d801      	bhi.n	8000c3e <HAL_GPIO_Init+0x13a>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	e001      	b.n	8000c42 <HAL_GPIO_Init+0x13e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3304      	adds	r3, #4
 8000c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	@ 0xff
 8000c48:	d802      	bhi.n	8000c50 <HAL_GPIO_Init+0x14c>
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c52:	3b08      	subs	r3, #8
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	6a39      	ldr	r1, [r7, #32]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 80b1 	beq.w	8000de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c84:	4b4d      	ldr	r3, [pc, #308]	@ (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a4c      	ldr	r2, [pc, #304]	@ (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b4a      	ldr	r3, [pc, #296]	@ (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c9c:	4a48      	ldr	r2, [pc, #288]	@ (8000dc0 <HAL_GPIO_Init+0x2bc>)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a40      	ldr	r2, [pc, #256]	@ (8000dc4 <HAL_GPIO_Init+0x2c0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d013      	beq.n	8000cf0 <HAL_GPIO_Init+0x1ec>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3f      	ldr	r2, [pc, #252]	@ (8000dc8 <HAL_GPIO_Init+0x2c4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d00d      	beq.n	8000cec <HAL_GPIO_Init+0x1e8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dcc <HAL_GPIO_Init+0x2c8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <HAL_GPIO_Init+0x1e0>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e004      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cf4:	f002 0203 	and.w	r2, r2, #3
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d02:	492f      	ldr	r1, [pc, #188]	@ (8000dc0 <HAL_GPIO_Init+0x2bc>)
 8000d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	492c      	ldr	r1, [pc, #176]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	608b      	str	r3, [r1, #8]
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4928      	ldr	r1, [pc, #160]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d44:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	4922      	ldr	r1, [pc, #136]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60cb      	str	r3, [r1, #12]
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	491e      	ldr	r1, [pc, #120]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d6c:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4918      	ldr	r1, [pc, #96]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4914      	ldr	r1, [pc, #80]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d021      	beq.n	8000dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	490e      	ldr	r1, [pc, #56]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	600b      	str	r3, [r1, #0]
 8000da0:	e021      	b.n	8000de6 <HAL_GPIO_Init+0x2e2>
 8000da2:	bf00      	nop
 8000da4:	10320000 	.word	0x10320000
 8000da8:	10310000 	.word	0x10310000
 8000dac:	10220000 	.word	0x10220000
 8000db0:	10210000 	.word	0x10210000
 8000db4:	10120000 	.word	0x10120000
 8000db8:	10110000 	.word	0x10110000
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	40011400 	.word	0x40011400
 8000dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4909      	ldr	r1, [pc, #36]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	3301      	adds	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	fa22 f303 	lsr.w	r3, r2, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f ae8e 	bne.w	8000b18 <HAL_GPIO_Init+0x14>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	372c      	adds	r7, #44	@ 0x2c
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e28:	e003      	b.n	8000e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	611a      	str	r2, [r3, #16]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e272      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8087 	beq.w	8000f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e5c:	4b92      	ldr	r3, [pc, #584]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d00c      	beq.n	8000e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e68:	4b8f      	ldr	r3, [pc, #572]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d112      	bne.n	8000e9a <HAL_RCC_OscConfig+0x5e>
 8000e74:	4b8c      	ldr	r3, [pc, #560]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e80:	d10b      	bne.n	8000e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	4b89      	ldr	r3, [pc, #548]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d06c      	beq.n	8000f68 <HAL_RCC_OscConfig+0x12c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d168      	bne.n	8000f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e24c      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea2:	d106      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x76>
 8000ea4:	4b80      	ldr	r3, [pc, #512]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a7f      	ldr	r2, [pc, #508]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e02e      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x98>
 8000eba:	4b7b      	ldr	r3, [pc, #492]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b78      	ldr	r3, [pc, #480]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a77      	ldr	r2, [pc, #476]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e01d      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0xbc>
 8000ede:	4b72      	ldr	r3, [pc, #456]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a71      	ldr	r2, [pc, #452]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b6f      	ldr	r3, [pc, #444]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6e      	ldr	r2, [pc, #440]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a6a      	ldr	r2, [pc, #424]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b68      	ldr	r3, [pc, #416]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a67      	ldr	r2, [pc, #412]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fd0a 	bl	8000930 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fd06 	bl	8000930 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	@ 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e200      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	4b5d      	ldr	r3, [pc, #372]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xe4>
 8000f3e:	e014      	b.n	8000f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fcf6 	bl	8000930 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fcf2 	bl	8000930 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	@ 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e1ec      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	4b53      	ldr	r3, [pc, #332]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x10c>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d063      	beq.n	800103e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f76:	4b4c      	ldr	r3, [pc, #304]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f82:	4b49      	ldr	r3, [pc, #292]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d11c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x18c>
 8000f8e:	4b46      	ldr	r3, [pc, #280]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d116      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	4b43      	ldr	r3, [pc, #268]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x176>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e1c0      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4939      	ldr	r1, [pc, #228]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc6:	e03a      	b.n	800103e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d020      	beq.n	8001012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	4b36      	ldr	r3, [pc, #216]	@ (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fcab 	bl	8000930 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fca7 	bl	8000930 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1a1      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4927      	ldr	r1, [pc, #156]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
 8001010:	e015      	b.n	800103e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <HAL_RCC_OscConfig+0x270>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc8a 	bl	8000930 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fc86 	bl	8000930 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e180      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d03a      	beq.n	80010c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d019      	beq.n	8001086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_RCC_OscConfig+0x274>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fc6a 	bl	8000930 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001060:	f7ff fc66 	bl	8000930 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e160      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f000 fafe 	bl	8001680 <RCC_Delay>
 8001084:	e01c      	b.n	80010c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_RCC_OscConfig+0x274>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc50 	bl	8000930 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001092:	e00f      	b.n	80010b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc4c 	bl	8000930 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d908      	bls.n	80010b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e146      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	42420000 	.word	0x42420000
 80010b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b4:	4b92      	ldr	r3, [pc, #584]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e9      	bne.n	8001094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80a6 	beq.w	800121a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b88      	ldr	r3, [pc, #544]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a87      	ldr	r2, [pc, #540]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b85      	ldr	r3, [pc, #532]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f6:	2301      	movs	r3, #1
 80010f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fa:	4b82      	ldr	r3, [pc, #520]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001106:	4b7f      	ldr	r3, [pc, #508]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a7e      	ldr	r2, [pc, #504]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001112:	f7ff fc0d 	bl	8000930 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111a:	f7ff fc09 	bl	8000930 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b64      	cmp	r3, #100	@ 0x64
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e103      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	4b75      	ldr	r3, [pc, #468]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x312>
 8001140:	4b6f      	ldr	r3, [pc, #444]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a6e      	ldr	r2, [pc, #440]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6213      	str	r3, [r2, #32]
 800114c:	e02d      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x334>
 8001156:	4b6a      	ldr	r3, [pc, #424]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a69      	ldr	r2, [pc, #420]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	4b67      	ldr	r3, [pc, #412]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a66      	ldr	r2, [pc, #408]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 0304 	bic.w	r3, r3, #4
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	e01c      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x356>
 8001178:	4b61      	ldr	r3, [pc, #388]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a60      	ldr	r2, [pc, #384]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	4b5e      	ldr	r3, [pc, #376]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a5d      	ldr	r2, [pc, #372]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6213      	str	r3, [r2, #32]
 8001190:	e00b      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 8001192:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a5a      	ldr	r2, [pc, #360]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b58      	ldr	r3, [pc, #352]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a57      	ldr	r2, [pc, #348]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d015      	beq.n	80011de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fbbd 	bl	8000930 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fbb9 	bl	8000930 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e0b1      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0ee      	beq.n	80011ba <HAL_RCC_OscConfig+0x37e>
 80011dc:	e014      	b.n	8001208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fba7 	bl	8000930 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fba3 	bl	8000930 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e09b      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fc:	4b40      	ldr	r3, [pc, #256]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ee      	bne.n	80011e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d105      	bne.n	800121a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120e:	4b3c      	ldr	r3, [pc, #240]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a3b      	ldr	r2, [pc, #236]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001224:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d061      	beq.n	80012f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d146      	bne.n	80012c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <HAL_RCC_OscConfig+0x4cc>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb77 	bl	8000930 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb73 	bl	8000930 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e06d      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126c:	d108      	bne.n	8001280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800126e:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	4921      	ldr	r1, [pc, #132]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a19      	ldr	r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001290:	430b      	orrs	r3, r1
 8001292:	491b      	ldr	r1, [pc, #108]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_RCC_OscConfig+0x4cc>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fb47 	bl	8000930 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fb43 	bl	8000930 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e03d      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x46a>
 80012c4:	e035      	b.n	8001332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_RCC_OscConfig+0x4cc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb30 	bl	8000930 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fb2c 	bl	8000930 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e026      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x498>
 80012f2:	e01e      	b.n	8001332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d107      	bne.n	800130c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e019      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
 8001300:	40021000 	.word	0x40021000
 8001304:	40007000 	.word	0x40007000
 8001308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_RCC_OscConfig+0x500>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	429a      	cmp	r2, r3
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0d0      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001354:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d910      	bls.n	8001384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b67      	ldr	r3, [pc, #412]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 0207 	bic.w	r2, r3, #7
 800136a:	4965      	ldr	r1, [pc, #404]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0b8      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139c:	4b59      	ldr	r3, [pc, #356]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a58      	ldr	r2, [pc, #352]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b4:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a52      	ldr	r2, [pc, #328]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b50      	ldr	r3, [pc, #320]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	494d      	ldr	r1, [pc, #308]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d040      	beq.n	8001460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d115      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e07f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e073      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e06b      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141e:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f023 0203 	bic.w	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4936      	ldr	r1, [pc, #216]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fa7e 	bl	8000930 <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e00a      	b.n	800144e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff fa7a 	bl	8000930 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e053      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 020c 	and.w	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1eb      	bne.n	8001438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d210      	bcs.n	8001490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 0207 	bic.w	r2, r3, #7
 8001476:	4922      	ldr	r1, [pc, #136]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e032      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4916      	ldr	r1, [pc, #88]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	490e      	ldr	r1, [pc, #56]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ce:	f000 f821 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	490a      	ldr	r1, [pc, #40]	@ (8001508 <HAL_RCC_ClockConfig+0x1c8>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <HAL_RCC_ClockConfig+0x1cc>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_RCC_ClockConfig+0x1d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f8be 	bl	8000670 <HAL_InitTick>

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000
 8001504:	40021000 	.word	0x40021000
 8001508:	080054f4 	.word	0x080054f4
 800150c:	2000000c 	.word	0x2000000c
 8001510:	20000010 	.word	0x20000010

08001514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b04      	cmp	r3, #4
 800153c:	d002      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x30>
 800153e:	2b08      	cmp	r3, #8
 8001540:	d003      	beq.n	800154a <HAL_RCC_GetSysClockFreq+0x36>
 8001542:	e027      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001544:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001546:	613b      	str	r3, [r7, #16]
      break;
 8001548:	e027      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0c9b      	lsrs	r3, r3, #18
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4a17      	ldr	r2, [pc, #92]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d010      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	0c5b      	lsrs	r3, r3, #17
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	4a11      	ldr	r2, [pc, #68]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001576:	fb03 f202 	mul.w	r2, r3, r2
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e004      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	613b      	str	r3, [r7, #16]
      break;
 8001592:	e002      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001596:	613b      	str	r3, [r7, #16]
      break;
 8001598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800159a:	693b      	ldr	r3, [r7, #16]
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	007a1200 	.word	0x007a1200
 80015b0:	0800550c 	.word	0x0800550c
 80015b4:	0800551c 	.word	0x0800551c
 80015b8:	003d0900 	.word	0x003d0900

080015bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c0:	4b02      	ldr	r3, [pc, #8]	@ (80015cc <HAL_RCC_GetHCLKFreq+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	2000000c 	.word	0x2000000c

080015d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d4:	f7ff fff2 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	4903      	ldr	r1, [pc, #12]	@ (80015f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08005504 	.word	0x08005504

080015f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015fc:	f7ff ffde 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 8001600:	4602      	mov	r2, r0
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0adb      	lsrs	r3, r3, #11
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	4903      	ldr	r1, [pc, #12]	@ (800161c <HAL_RCC_GetPCLK2Freq+0x24>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000
 800161c:	08005504 	.word	0x08005504

08001620 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	220f      	movs	r2, #15
 800162e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_RCC_GetClockConfig+0x58>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_RCC_GetClockConfig+0x58>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_RCC_GetClockConfig+0x58>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <HAL_RCC_GetClockConfig+0x58>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_RCC_GetClockConfig+0x5c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0207 	and.w	r2, r3, #7
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40022000 	.word	0x40022000

08001680 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <RCC_Delay+0x34>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <RCC_Delay+0x38>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0a5b      	lsrs	r3, r3, #9
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800169c:	bf00      	nop
  }
  while (Delay --);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	60fa      	str	r2, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f9      	bne.n	800169c <RCC_Delay+0x1c>
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	10624dd3 	.word	0x10624dd3

080016bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e041      	b.n	8001752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f839 	bl	800175a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3304      	adds	r3, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f000 f9b4 	bl	8001a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d001      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e03a      	b.n	80017fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a18      	ldr	r2, [pc, #96]	@ (8001804 <HAL_TIM_Base_Start_IT+0x98>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00e      	beq.n	80017c4 <HAL_TIM_Base_Start_IT+0x58>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ae:	d009      	beq.n	80017c4 <HAL_TIM_Base_Start_IT+0x58>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <HAL_TIM_Base_Start_IT+0x9c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d004      	beq.n	80017c4 <HAL_TIM_Base_Start_IT+0x58>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a13      	ldr	r2, [pc, #76]	@ (800180c <HAL_TIM_Base_Start_IT+0xa0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d111      	bne.n	80017e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d010      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e6:	e007      	b.n	80017f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40012c00 	.word	0x40012c00
 8001808:	40000400 	.word	0x40000400
 800180c:	40000800 	.word	0x40000800

08001810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b02      	cmp	r3, #2
 8001824:	d122      	bne.n	800186c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b02      	cmp	r3, #2
 8001832:	d11b      	bne.n	800186c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0202 	mvn.w	r2, #2
 800183c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f8ed 	bl	8001a32 <HAL_TIM_IC_CaptureCallback>
 8001858:	e005      	b.n	8001866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8e0 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f8ef 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b04      	cmp	r3, #4
 8001878:	d122      	bne.n	80018c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b04      	cmp	r3, #4
 8001886:	d11b      	bne.n	80018c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 0204 	mvn.w	r2, #4
 8001890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f8c3 	bl	8001a32 <HAL_TIM_IC_CaptureCallback>
 80018ac:	e005      	b.n	80018ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f8b6 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f8c5 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d122      	bne.n	8001914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d11b      	bne.n	8001914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0208 	mvn.w	r2, #8
 80018e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2204      	movs	r2, #4
 80018ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f899 	bl	8001a32 <HAL_TIM_IC_CaptureCallback>
 8001900:	e005      	b.n	800190e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f88c 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f89b 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b10      	cmp	r3, #16
 8001920:	d122      	bne.n	8001968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b10      	cmp	r3, #16
 800192e:	d11b      	bne.n	8001968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0210 	mvn.w	r2, #16
 8001938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2208      	movs	r2, #8
 800193e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f86f 	bl	8001a32 <HAL_TIM_IC_CaptureCallback>
 8001954:	e005      	b.n	8001962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f862 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f871 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10e      	bne.n	8001994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0201 	mvn.w	r2, #1
 800198c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fe1e 	bl	80005d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199e:	2b80      	cmp	r3, #128	@ 0x80
 80019a0:	d10e      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ac:	2b80      	cmp	r3, #128	@ 0x80
 80019ae:	d107      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80019b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f8bf 	bl	8001b3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d10e      	bne.n	80019ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d8:	2b40      	cmp	r3, #64	@ 0x40
 80019da:	d107      	bne.n	80019ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80019e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f835 	bl	8001a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d10e      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d107      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0220 	mvn.w	r2, #32
 8001a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f88a 	bl	8001b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a29      	ldr	r2, [pc, #164]	@ (8001b20 <TIM_Base_SetConfig+0xb8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00b      	beq.n	8001a98 <TIM_Base_SetConfig+0x30>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a86:	d007      	beq.n	8001a98 <TIM_Base_SetConfig+0x30>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a26      	ldr	r2, [pc, #152]	@ (8001b24 <TIM_Base_SetConfig+0xbc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d003      	beq.n	8001a98 <TIM_Base_SetConfig+0x30>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a25      	ldr	r2, [pc, #148]	@ (8001b28 <TIM_Base_SetConfig+0xc0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d108      	bne.n	8001aaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a1c      	ldr	r2, [pc, #112]	@ (8001b20 <TIM_Base_SetConfig+0xb8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00b      	beq.n	8001aca <TIM_Base_SetConfig+0x62>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab8:	d007      	beq.n	8001aca <TIM_Base_SetConfig+0x62>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a19      	ldr	r2, [pc, #100]	@ (8001b24 <TIM_Base_SetConfig+0xbc>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d003      	beq.n	8001aca <TIM_Base_SetConfig+0x62>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <TIM_Base_SetConfig+0xc0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d108      	bne.n	8001adc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <TIM_Base_SetConfig+0xb8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d103      	bne.n	8001b10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	615a      	str	r2, [r3, #20]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800

08001b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e042      	b.n	8001be8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7fe fe40 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	@ 0x24
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f9af 	bl	8001ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d16d      	bne.n	8001cec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_UART_Transmit+0x2c>
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e066      	b.n	8001cee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2221      	movs	r2, #33	@ 0x21
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c2e:	f7fe fe7f 	bl	8000930 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	88fa      	ldrh	r2, [r7, #6]
 8001c38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	88fa      	ldrh	r2, [r7, #6]
 8001c3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c48:	d108      	bne.n	8001c5c <HAL_UART_Transmit+0x6c>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	e003      	b.n	8001c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c64:	e02a      	b.n	8001cbc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2180      	movs	r1, #128	@ 0x80
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f8d2 	bl	8001e1a <UART_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e036      	b.n	8001cee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e007      	b.n	8001cae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	3301      	adds	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1cf      	bne.n	8001c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2140      	movs	r1, #64	@ 0x40
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f8a2 	bl	8001e1a <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b08a      	sub	sp, #40	@ 0x28
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d17c      	bne.n	8001e10 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_UART_Receive+0x2c>
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e075      	b.n	8001e12 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2222      	movs	r2, #34	@ 0x22
 8001d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d3a:	f7fe fdf9 	bl	8000930 <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d54:	d108      	bne.n	8001d68 <HAL_UART_Receive+0x72>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d104      	bne.n	8001d68 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e003      	b.n	8001d70 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d70:	e043      	b.n	8001dfa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f84c 	bl	8001e1a <UART_WaitOnFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e042      	b.n	8001e12 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	3302      	adds	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	e01f      	b.n	8001dec <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001db4:	d007      	beq.n	8001dc6 <HAL_UART_Receive+0xd0>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_UART_Receive+0xde>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e008      	b.n	8001de6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1b6      	bne.n	8001d72 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e000      	b.n	8001e12 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e10:	2302      	movs	r3, #2
  }
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b090      	sub	sp, #64	@ 0x40
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4613      	mov	r3, r2
 8001e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e2a:	e050      	b.n	8001ece <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e32:	d04c      	beq.n	8001ece <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e3a:	f7fe fd79 	bl	8000930 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d241      	bcs.n	8001ece <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	330c      	adds	r3, #12
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e54:	e853 3f00 	ldrex	r3, [r3]
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e72:	e841 2300 	strex	r3, r2, [r1]
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1e5      	bne.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3314      	adds	r3, #20
 8001e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	e853 3f00 	ldrex	r3, [r3]
 8001e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e9e:	623a      	str	r2, [r7, #32]
 8001ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea2:	69f9      	ldr	r1, [r7, #28]
 8001ea4:	6a3a      	ldr	r2, [r7, #32]
 8001ea6:	e841 2300 	strex	r3, r2, [r1]
 8001eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e5      	bne.n	8001e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e00f      	b.n	8001eee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d09f      	beq.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3740      	adds	r7, #64	@ 0x40
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001f32:	f023 030c 	bic.w	r3, r3, #12
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <UART_SetConfig+0x114>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f60:	f7ff fb4a 	bl	80015f8 <HAL_RCC_GetPCLK2Freq>
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	e002      	b.n	8001f6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f68:	f7ff fb32 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
 8001f6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009a      	lsls	r2, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <UART_SetConfig+0x118>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	0119      	lsls	r1, r3, #4
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	009a      	lsls	r2, r3, #2
 8001f98:	441a      	add	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <UART_SetConfig+0x118>)
 8001fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2064      	movs	r0, #100	@ 0x64
 8001fae:	fb00 f303 	mul.w	r3, r0, r3
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	3332      	adds	r3, #50	@ 0x32
 8001fb8:	4a15      	ldr	r2, [pc, #84]	@ (8002010 <UART_SetConfig+0x118>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc4:	4419      	add	r1, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	009a      	lsls	r2, r3, #2
 8001fd0:	441a      	add	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <UART_SetConfig+0x118>)
 8001fde:	fba3 0302 	umull	r0, r3, r3, r2
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2064      	movs	r0, #100	@ 0x64
 8001fe6:	fb00 f303 	mul.w	r3, r0, r3
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	3332      	adds	r3, #50	@ 0x32
 8001ff0:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <UART_SetConfig+0x118>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	f003 020f 	and.w	r2, r3, #15
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	440a      	add	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40013800 	.word	0x40013800
 8002010:	51eb851f 	.word	0x51eb851f

08002014 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800201a:	f3ef 8305 	mrs	r3, IPSR
 800201e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002020:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002026:	f3ef 8310 	mrs	r3, PRIMASK
 800202a:	607b      	str	r3, [r7, #4]
  return(result);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <osKernelInitialize+0x32>
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <osKernelInitialize+0x60>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d109      	bne.n	800204e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800203a:	f3ef 8311 	mrs	r3, BASEPRI
 800203e:	603b      	str	r3, [r7, #0]
  return(result);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002046:	f06f 0305 	mvn.w	r3, #5
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e00c      	b.n	8002068 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <osKernelInitialize+0x60>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <osKernelInitialize+0x60>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e002      	b.n	8002068 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002068:	68fb      	ldr	r3, [r7, #12]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	200000ec 	.word	0x200000ec

08002078 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800207e:	f3ef 8305 	mrs	r3, IPSR
 8002082:	60bb      	str	r3, [r7, #8]
  return(result);
 8002084:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208a:	f3ef 8310 	mrs	r3, PRIMASK
 800208e:	607b      	str	r3, [r7, #4]
  return(result);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <osKernelStart+0x32>
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <osKernelStart+0x64>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d109      	bne.n	80020b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800209e:	f3ef 8311 	mrs	r3, BASEPRI
 80020a2:	603b      	str	r3, [r7, #0]
  return(result);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80020aa:	f06f 0305 	mvn.w	r3, #5
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e00e      	b.n	80020d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <osKernelStart+0x64>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <osKernelStart+0x64>)
 80020bc:	2202      	movs	r2, #2
 80020be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80020c0:	f001 fbd4 	bl	800386c <vTaskStartScheduler>
      stat = osOK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e002      	b.n	80020d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80020d0:	68fb      	ldr	r3, [r7, #12]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200000ec 	.word	0x200000ec

080020e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b092      	sub	sp, #72	@ 0x48
 80020e4:	af04      	add	r7, sp, #16
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020f0:	f3ef 8305 	mrs	r3, IPSR
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 8094 	bne.w	8002226 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002102:	623b      	str	r3, [r7, #32]
  return(result);
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 808d 	bne.w	8002226 <osThreadNew+0x146>
 800210c:	4b48      	ldr	r3, [pc, #288]	@ (8002230 <osThreadNew+0x150>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d106      	bne.n	8002122 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002114:	f3ef 8311 	mrs	r3, BASEPRI
 8002118:	61fb      	str	r3, [r7, #28]
  return(result);
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 8082 	bne.w	8002226 <osThreadNew+0x146>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d07e      	beq.n	8002226 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800212c:	2318      	movs	r3, #24
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002130:	2300      	movs	r3, #0
 8002132:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002134:	f107 031b 	add.w	r3, r7, #27
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d045      	beq.n	80021d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <osThreadNew+0x74>
        name = attr->name;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <osThreadNew+0x9a>
 8002168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216a:	2b38      	cmp	r3, #56	@ 0x38
 800216c:	d805      	bhi.n	800217a <osThreadNew+0x9a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <osThreadNew+0x9e>
        return (NULL);
 800217a:	2300      	movs	r3, #0
 800217c:	e054      	b.n	8002228 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00e      	beq.n	80021b4 <osThreadNew+0xd4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b5b      	cmp	r3, #91	@ 0x5b
 800219c:	d90a      	bls.n	80021b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <osThreadNew+0xd4>
        mem = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b2:	e010      	b.n	80021d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10c      	bne.n	80021d6 <osThreadNew+0xf6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d108      	bne.n	80021d6 <osThreadNew+0xf6>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <osThreadNew+0xf6>
          mem = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d0:	e001      	b.n	80021d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d110      	bne.n	80021fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021e4:	9202      	str	r2, [sp, #8]
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f001 f968 	bl	80034c8 <xTaskCreateStatic>
 80021f8:	4603      	mov	r3, r0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e013      	b.n	8002226 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d110      	bne.n	8002226 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002206:	b29a      	uxth	r2, r3
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f001 f9b5 	bl	8003586 <xTaskCreate>
 800221c:	4603      	mov	r3, r0
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <osThreadNew+0x146>
          hTask = NULL;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002226:	697b      	ldr	r3, [r7, #20]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3738      	adds	r7, #56	@ 0x38
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200000ec 	.word	0x200000ec

08002234 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800223c:	f3ef 8305 	mrs	r3, IPSR
 8002240:	613b      	str	r3, [r7, #16]
  return(result);
 8002242:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10f      	bne.n	8002268 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002248:	f3ef 8310 	mrs	r3, PRIMASK
 800224c:	60fb      	str	r3, [r7, #12]
  return(result);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <osDelay+0x34>
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <osDelay+0x58>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d109      	bne.n	8002270 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800225c:	f3ef 8311 	mrs	r3, BASEPRI
 8002260:	60bb      	str	r3, [r7, #8]
  return(result);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <osDelay+0x3c>
    stat = osErrorISR;
 8002268:	f06f 0305 	mvn.w	r3, #5
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e007      	b.n	8002280 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <osDelay+0x4c>
      vTaskDelay(ticks);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f001 fac0 	bl	8003800 <vTaskDelay>
    }
  }

  return (stat);
 8002280:	697b      	ldr	r3, [r7, #20]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200000ec 	.word	0x200000ec

08002290 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	@ 0x30
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a0:	f3ef 8305 	mrs	r3, IPSR
 80022a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80022a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 8086 	bne.w	80023ba <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ae:	f3ef 8310 	mrs	r3, PRIMASK
 80022b2:	617b      	str	r3, [r7, #20]
  return(result);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d17f      	bne.n	80023ba <osSemaphoreNew+0x12a>
 80022ba:	4b42      	ldr	r3, [pc, #264]	@ (80023c4 <osSemaphoreNew+0x134>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d105      	bne.n	80022ce <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022c2:	f3ef 8311 	mrs	r3, BASEPRI
 80022c6:	613b      	str	r3, [r7, #16]
  return(result);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d175      	bne.n	80023ba <osSemaphoreNew+0x12a>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d072      	beq.n	80023ba <osSemaphoreNew+0x12a>
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d86e      	bhi.n	80023ba <osSemaphoreNew+0x12a>
    mem = -1;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <osSemaphoreNew+0x6e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80022f6:	d902      	bls.n	80022fe <osSemaphoreNew+0x6e>
        mem = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	623b      	str	r3, [r7, #32]
 80022fc:	e00c      	b.n	8002318 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d108      	bne.n	8002318 <osSemaphoreNew+0x88>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <osSemaphoreNew+0x88>
          mem = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	e001      	b.n	8002318 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231e:	d04c      	beq.n	80023ba <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d128      	bne.n	8002378 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10a      	bne.n	8002342 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2203      	movs	r2, #3
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2001      	movs	r0, #1
 800233a:	f000 fa17 	bl	800276c <xQueueGenericCreateStatic>
 800233e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002340:	e005      	b.n	800234e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002342:	2203      	movs	r2, #3
 8002344:	2100      	movs	r1, #0
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fa8c 	bl	8002864 <xQueueGenericCreate>
 800234c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	2b00      	cmp	r3, #0
 8002352:	d022      	beq.n	800239a <osSemaphoreNew+0x10a>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01f      	beq.n	800239a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800235a:	2300      	movs	r3, #0
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002362:	f000 fb4f 	bl	8002a04 <xQueueGenericSend>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d016      	beq.n	800239a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800236c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800236e:	f000 fed9 	bl	8003124 <vQueueDelete>
            hSemaphore = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
 8002376:	e010      	b.n	800239a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d108      	bne.n	8002390 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	461a      	mov	r2, r3
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 face 	bl	8002928 <xQueueCreateCountingSemaphoreStatic>
 800238c:	6278      	str	r0, [r7, #36]	@ 0x24
 800238e:	e004      	b.n	800239a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fb01 	bl	800299a <xQueueCreateCountingSemaphore>
 8002398:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <osSemaphoreNew+0x11e>
          name = attr->name;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e001      	b.n	80023b2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80023b2:	69f9      	ldr	r1, [r7, #28]
 80023b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023b6:	f001 f801 	bl	80033bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	@ 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200000ec 	.word	0x200000ec

080023c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	@ 0x30
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023d8:	f3ef 8305 	mrs	r3, IPSR
 80023dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80023de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d16f      	bne.n	80024c4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e4:	f3ef 8310 	mrs	r3, PRIMASK
 80023e8:	617b      	str	r3, [r7, #20]
  return(result);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d169      	bne.n	80024c4 <osMessageQueueNew+0xfc>
 80023f0:	4b37      	ldr	r3, [pc, #220]	@ (80024d0 <osMessageQueueNew+0x108>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d105      	bne.n	8002404 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023f8:	f3ef 8311 	mrs	r3, BASEPRI
 80023fc:	613b      	str	r3, [r7, #16]
  return(result);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d15f      	bne.n	80024c4 <osMessageQueueNew+0xfc>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d05c      	beq.n	80024c4 <osMessageQueueNew+0xfc>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d059      	beq.n	80024c4 <osMessageQueueNew+0xfc>
    mem = -1;
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
 8002414:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d029      	beq.n	8002470 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d012      	beq.n	800244a <osMessageQueueNew+0x82>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b4f      	cmp	r3, #79	@ 0x4f
 800242a:	d90e      	bls.n	800244a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <osMessageQueueNew+0x82>
        mem = 1;
 8002444:	2301      	movs	r3, #1
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	e014      	b.n	8002474 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d110      	bne.n	8002474 <osMessageQueueNew+0xac>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <osMessageQueueNew+0xac>
          mem = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	e001      	b.n	8002474 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10b      	bne.n	8002492 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2100      	movs	r1, #0
 8002484:	9100      	str	r1, [sp, #0]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f96f 	bl	800276c <xQueueGenericCreateStatic>
 800248e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002490:	e008      	b.n	80024a4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002498:	2200      	movs	r2, #0
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f9e1 	bl	8002864 <xQueueGenericCreate>
 80024a2:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e001      	b.n	80024bc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80024bc:	69f9      	ldr	r1, [r7, #28]
 80024be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024c0:	f000 ff7c 	bl	80033bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3728      	adds	r7, #40	@ 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200000ec 	.word	0x200000ec

080024d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a06      	ldr	r2, [pc, #24]	@ (80024fc <vApplicationGetIdleTaskMemory+0x28>)
 80024e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <vApplicationGetIdleTaskMemory+0x2c>)
 80024ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2280      	movs	r2, #128	@ 0x80
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	200000f0 	.word	0x200000f0
 8002500:	2000014c 	.word	0x2000014c

08002504 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <vApplicationGetTimerTaskMemory+0x2c>)
 8002514:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4a06      	ldr	r2, [pc, #24]	@ (8002534 <vApplicationGetTimerTaskMemory+0x30>)
 800251a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000034c 	.word	0x2000034c
 8002534:	200003a8 	.word	0x200003a8

08002538 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0208 	add.w	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f103 0208 	add.w	r2, r3, #8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f103 0208 	add.w	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d103      	bne.n	80025f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e00c      	b.n	800260e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3308      	adds	r3, #8
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e002      	b.n	8002602 <vListInsert+0x2e>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d2f6      	bcs.n	80025fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6852      	ldr	r2, [r2, #4]
 8002664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d103      	bne.n	8002678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
	...

08002698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026c4:	f002 fb22 	bl	8004d0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	441a      	add	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	3b01      	subs	r3, #1
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	441a      	add	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	22ff      	movs	r2, #255	@ 0xff
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	22ff      	movs	r2, #255	@ 0xff
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d114      	bne.n	8002744 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3310      	adds	r3, #16
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fb32 	bl	8003d90 <xTaskRemoveFromEventList>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d012      	beq.n	8002758 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002732:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <xQueueGenericReset+0xd0>)
 8002734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	e009      	b.n	8002758 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3310      	adds	r3, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fef5 	bl	8002538 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3324      	adds	r3, #36	@ 0x24
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fef0 	bl	8002538 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002758:	f002 fb08 	bl	8004d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800275c:	2301      	movs	r3, #1
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	@ 0x38
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <xQueueGenericCreateStatic+0x56>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <xQueueGenericCreateStatic+0x5a>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <xQueueGenericCreateStatic+0x5c>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	623b      	str	r3, [r7, #32]
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <xQueueGenericCreateStatic+0x84>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <xQueueGenericCreateStatic+0x88>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <xQueueGenericCreateStatic+0x8a>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	61fb      	str	r3, [r7, #28]
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	e7fd      	b.n	800280e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002812:	2350      	movs	r3, #80	@ 0x50
 8002814:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b50      	cmp	r3, #80	@ 0x50
 800281a:	d00b      	beq.n	8002834 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	61bb      	str	r3, [r7, #24]
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00d      	beq.n	800285a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002846:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f844 	bl	80028e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800285a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800285c:	4618      	mov	r0, r3
 800285e:	3730      	adds	r7, #48	@ 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	@ 0x28
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	613b      	str	r3, [r7, #16]
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e004      	b.n	80028a6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3350      	adds	r3, #80	@ 0x50
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fb30 	bl	8004f10 <pvPortMalloc>
 80028b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00f      	beq.n	80028d8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	3350      	adds	r3, #80	@ 0x50
 80028bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028c6:	79fa      	ldrb	r2, [r7, #7]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f805 	bl	80028e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028d8:	69bb      	ldr	r3, [r7, #24]
	}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e002      	b.n	8002904 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002910:	2101      	movs	r1, #1
 8002912:	69b8      	ldr	r0, [r7, #24]
 8002914:	f7ff fec0 	bl	8002698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10b      	bne.n	8002952 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	61bb      	str	r3, [r7, #24]
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	e7fd      	b.n	800294e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90b      	bls.n	8002972 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	617b      	str	r3, [r7, #20]
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002972:	2302      	movs	r3, #2
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fef5 	bl	800276c <xQueueGenericCreateStatic>
 8002982:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002990:	69fb      	ldr	r3, [r7, #28]
	}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80029aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ae:	f383 8811 	msr	BASEPRI, r3
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	613b      	str	r3, [r7, #16]
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	e7fd      	b.n	80029be <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d90b      	bls.n	80029e2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	60fb      	str	r3, [r7, #12]
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	e7fd      	b.n	80029de <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80029e2:	2202      	movs	r2, #2
 80029e4:	2100      	movs	r1, #0
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ff3c 	bl	8002864 <xQueueGenericCreate>
 80029ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80029fa:	697b      	ldr	r3, [r7, #20]
	}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08e      	sub	sp, #56	@ 0x38
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a12:	2300      	movs	r3, #0
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <xQueueGenericSend+0x34>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <xQueueGenericSend+0x42>
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <xQueueGenericSend+0x46>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <xQueueGenericSend+0x48>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <xQueueGenericSend+0x64>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d103      	bne.n	8002a76 <xQueueGenericSend+0x72>
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <xQueueGenericSend+0x76>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <xQueueGenericSend+0x78>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <xQueueGenericSend+0x94>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	623b      	str	r3, [r7, #32]
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a98:	f001 fb3e 	bl	8004118 <xTaskGetSchedulerState>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <xQueueGenericSend+0xa4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <xQueueGenericSend+0xa8>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <xQueueGenericSend+0xaa>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <xQueueGenericSend+0xc6>
	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	61fb      	str	r3, [r7, #28]
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	e7fd      	b.n	8002ac6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aca:	f002 f91f 	bl	8004d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <xQueueGenericSend+0xdc>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d129      	bne.n	8002b34 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ae6:	f000 fb58 	bl	800319a <prvCopyDataToQueue>
 8002aea:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	3324      	adds	r3, #36	@ 0x24
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f949 	bl	8003d90 <xTaskRemoveFromEventList>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b04:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <xQueueGenericSend+0x200>)
 8002b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	e00a      	b.n	8002b2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b1c:	4b39      	ldr	r3, [pc, #228]	@ (8002c04 <xQueueGenericSend+0x200>)
 8002b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b2c:	f002 f91e 	bl	8004d6c <vPortExitCritical>
				return pdPASS;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e063      	b.n	8002bfc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b3a:	f002 f917 	bl	8004d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e05c      	b.n	8002bfc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f983 	bl	8003e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b56:	f002 f909 	bl	8004d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b5a:	f000 feef 	bl	800393c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b5e:	f002 f8d5 	bl	8004d0c <vPortEnterCritical>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d103      	bne.n	8002b78 <xQueueGenericSend+0x174>
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d103      	bne.n	8002b8e <xQueueGenericSend+0x18a>
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b8e:	f002 f8ed 	bl	8004d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b92:	1d3a      	adds	r2, r7, #4
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 f972 	bl	8003e84 <xTaskCheckForTimeOut>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d124      	bne.n	8002bf0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ba6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ba8:	f000 fbef 	bl	800338a <prvIsQueueFull>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f896 	bl	8003cec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bc2:	f000 fb7a 	bl	80032ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bc6:	f000 fec7 	bl	8003958 <xTaskResumeAll>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f af7c 	bne.w	8002aca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <xQueueGenericSend+0x200>)
 8002bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	e772      	b.n	8002aca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002be6:	f000 fb68 	bl	80032ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bea:	f000 feb5 	bl	8003958 <xTaskResumeAll>
 8002bee:	e76c      	b.n	8002aca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bf2:	f000 fb62 	bl	80032ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bf6:	f000 feaf 	bl	8003958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bfa:	2300      	movs	r3, #0
		}
	}
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3738      	adds	r7, #56	@ 0x38
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08e      	sub	sp, #56	@ 0x38
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <xQueueGenericSendFromISR+0x3e>
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <xQueueGenericSendFromISR+0x42>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <xQueueGenericSendFromISR+0x44>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	623b      	str	r3, [r7, #32]
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d103      	bne.n	8002c76 <xQueueGenericSendFromISR+0x6e>
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <xQueueGenericSendFromISR+0x72>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <xQueueGenericSendFromISR+0x74>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	61fb      	str	r3, [r7, #28]
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c98:	f002 f8fa 	bl	8004e90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c9c:	f3ef 8211 	mrs	r2, BASEPRI
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61ba      	str	r2, [r7, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <xQueueGenericSendFromISR+0xc2>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d12c      	bne.n	8002d24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cda:	f000 fa5e 	bl	800319a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cde:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d112      	bne.n	8002d0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d016      	beq.n	8002d1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf2:	3324      	adds	r3, #36	@ 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f84b 	bl	8003d90 <xTaskRemoveFromEventList>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	b25a      	sxtb	r2, r3
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002d22:	e001      	b.n	8002d28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3738      	adds	r7, #56	@ 0x38
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	@ 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10b      	bne.n	8002d72 <xQueueReceive+0x32>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	623b      	str	r3, [r7, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	e7fd      	b.n	8002d6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <xQueueReceive+0x40>
 8002d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <xQueueReceive+0x44>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <xQueueReceive+0x46>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <xQueueReceive+0x62>
	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	61fb      	str	r3, [r7, #28]
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	e7fd      	b.n	8002d9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da2:	f001 f9b9 	bl	8004118 <xTaskGetSchedulerState>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <xQueueReceive+0x72>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <xQueueReceive+0x76>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueReceive+0x78>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <xQueueReceive+0x94>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	61bb      	str	r3, [r7, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd4:	f001 ff9a 	bl	8004d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01f      	beq.n	8002e24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002de8:	f000 fa41 	bl	800326e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	1e5a      	subs	r2, r3, #1
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00f      	beq.n	8002e1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfe:	3310      	adds	r3, #16
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 ffc5 	bl	8003d90 <xTaskRemoveFromEventList>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f00 <xQueueReceive+0x1c0>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e1c:	f001 ffa6 	bl	8004d6c <vPortExitCritical>
				return pdPASS;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e069      	b.n	8002ef8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e2a:	f001 ff9f 	bl	8004d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e062      	b.n	8002ef8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 f80b 	bl	8003e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e42:	2301      	movs	r3, #1
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e46:	f001 ff91 	bl	8004d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e4a:	f000 fd77 	bl	800393c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e4e:	f001 ff5d 	bl	8004d0c <vPortEnterCritical>
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d103      	bne.n	8002e68 <xQueueReceive+0x128>
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d103      	bne.n	8002e7e <xQueueReceive+0x13e>
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e7e:	f001 ff75 	bl	8004d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e82:	1d3a      	adds	r2, r7, #4
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fffa 	bl	8003e84 <xTaskCheckForTimeOut>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d123      	bne.n	8002ede <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e98:	f000 fa61 	bl	800335e <prvIsQueueEmpty>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d017      	beq.n	8002ed2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	3324      	adds	r3, #36	@ 0x24
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 ff1e 	bl	8003cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002eb2:	f000 fa02 	bl	80032ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eb6:	f000 fd4f 	bl	8003958 <xTaskResumeAll>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d189      	bne.n	8002dd4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <xQueueReceive+0x1c0>)
 8002ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	e780      	b.n	8002dd4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ed4:	f000 f9f1 	bl	80032ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ed8:	f000 fd3e 	bl	8003958 <xTaskResumeAll>
 8002edc:	e77a      	b.n	8002dd4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ee0:	f000 f9eb 	bl	80032ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ee4:	f000 fd38 	bl	8003958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002eea:	f000 fa38 	bl	800335e <prvIsQueueEmpty>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f43f af6f 	beq.w	8002dd4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ef6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3730      	adds	r7, #48	@ 0x30
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08e      	sub	sp, #56	@ 0x38
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	623b      	str	r3, [r7, #32]
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	61fb      	str	r3, [r7, #28]
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f58:	f001 f8de 	bl	8004118 <xTaskGetSchedulerState>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <xQueueSemaphoreTake+0x64>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <xQueueSemaphoreTake+0x68>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <xQueueSemaphoreTake+0x6a>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	61bb      	str	r3, [r7, #24]
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f8a:	f001 febf 	bl	8004d0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d024      	beq.n	8002fe4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9c:	1e5a      	subs	r2, r3, #1
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002faa:	f001 fa39 	bl	8004420 <pvTaskIncrementMutexHeldCount>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00f      	beq.n	8002fdc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbe:	3310      	adds	r3, #16
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fee5 	bl	8003d90 <xTaskRemoveFromEventList>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fcc:	4b54      	ldr	r3, [pc, #336]	@ (8003120 <xQueueSemaphoreTake+0x21c>)
 8002fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fdc:	f001 fec6 	bl	8004d6c <vPortExitCritical>
				return pdPASS;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e098      	b.n	8003116 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d112      	bne.n	8003010 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	617b      	str	r3, [r7, #20]
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003008:	f001 feb0 	bl	8004d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800300c:	2300      	movs	r3, #0
 800300e:	e082      	b.n	8003116 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003016:	f107 030c 	add.w	r3, r7, #12
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ff1c 	bl	8003e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003020:	2301      	movs	r3, #1
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003024:	f001 fea2 	bl	8004d6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003028:	f000 fc88 	bl	800393c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800302c:	f001 fe6e 	bl	8004d0c <vPortEnterCritical>
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003036:	b25b      	sxtb	r3, r3
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d103      	bne.n	8003046 <xQueueSemaphoreTake+0x142>
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003048:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800304c:	b25b      	sxtb	r3, r3
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d103      	bne.n	800305c <xQueueSemaphoreTake+0x158>
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800305c:	f001 fe86 	bl	8004d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003060:	463a      	mov	r2, r7
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f000 ff0b 	bl	8003e84 <xTaskCheckForTimeOut>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d132      	bne.n	80030da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003076:	f000 f972 	bl	800335e <prvIsQueueEmpty>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d026      	beq.n	80030ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003088:	f001 fe40 	bl	8004d0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800308c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f85f 	bl	8004154 <xTaskPriorityInherit>
 8003096:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003098:	f001 fe68 	bl	8004d6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309e:	3324      	adds	r3, #36	@ 0x24
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fe21 	bl	8003cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030ac:	f000 f905 	bl	80032ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030b0:	f000 fc52 	bl	8003958 <xTaskResumeAll>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f af67 	bne.w	8002f8a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <xQueueSemaphoreTake+0x21c>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	e75d      	b.n	8002f8a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80030ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030d0:	f000 f8f3 	bl	80032ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030d4:	f000 fc40 	bl	8003958 <xTaskResumeAll>
 80030d8:	e757      	b.n	8002f8a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80030da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030dc:	f000 f8ed 	bl	80032ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030e0:	f000 fc3a 	bl	8003958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030e6:	f000 f93a 	bl	800335e <prvIsQueueEmpty>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f43f af4c 	beq.w	8002f8a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80030f8:	f001 fe08 	bl	8004d0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80030fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030fe:	f000 f835 	bl	800316c <prvGetDisinheritPriorityAfterTimeout>
 8003102:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800310a:	4618      	mov	r0, r3
 800310c:	f001 f900 	bl	8004310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003110:	f001 fe2c 	bl	8004d6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003114:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003116:	4618      	mov	r0, r3
 8003118:	3738      	adds	r7, #56	@ 0x38
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000ed04 	.word	0xe000ed04

08003124 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <vQueueDelete+0x2a>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	60bb      	str	r3, [r7, #8]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f95c 	bl	800340c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800315a:	2b00      	cmp	r3, #0
 800315c:	d102      	bne.n	8003164 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f001 ff9e 	bl	80050a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e001      	b.n	800318e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800318e:	68fb      	ldr	r3, [r7, #12]
	}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d14d      	bne.n	800325c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f833 	bl	8004230 <xTaskPriorityDisinherit>
 80031ca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e043      	b.n	800325c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d119      	bne.n	800320e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6898      	ldr	r0, [r3, #8]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	461a      	mov	r2, r3
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	f002 f89d 	bl	8005324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	441a      	add	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d32b      	bcc.n	800325c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	e026      	b.n	800325c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68d8      	ldr	r0, [r3, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	461a      	mov	r2, r3
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	f002 f883 	bl	8005324 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	425b      	negs	r3, r3
 8003228:	441a      	add	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d207      	bcs.n	800324a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	425b      	negs	r3, r3
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d105      	bne.n	800325c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3b01      	subs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003264:	697b      	ldr	r3, [r7, #20]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d018      	beq.n	80032b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d303      	bcc.n	80032a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68d9      	ldr	r1, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	461a      	mov	r2, r3
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	f002 f839 	bl	8005324 <memcpy>
	}
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032c2:	f001 fd23 	bl	8004d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ce:	e011      	b.n	80032f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3324      	adds	r3, #36	@ 0x24
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fd57 	bl	8003d90 <xTaskRemoveFromEventList>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032e8:	f000 fe30 	bl	8003f4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	dce9      	bgt.n	80032d0 <prvUnlockQueue+0x16>
 80032fc:	e000      	b.n	8003300 <prvUnlockQueue+0x46>
					break;
 80032fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	22ff      	movs	r2, #255	@ 0xff
 8003304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003308:	f001 fd30 	bl	8004d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800330c:	f001 fcfe 	bl	8004d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003316:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003318:	e011      	b.n	800333e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d012      	beq.n	8003348 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3310      	adds	r3, #16
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fd32 	bl	8003d90 <xTaskRemoveFromEventList>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003332:	f000 fe0b 	bl	8003f4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003336:	7bbb      	ldrb	r3, [r7, #14]
 8003338:	3b01      	subs	r3, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800333e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003342:	2b00      	cmp	r3, #0
 8003344:	dce9      	bgt.n	800331a <prvUnlockQueue+0x60>
 8003346:	e000      	b.n	800334a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003348:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	22ff      	movs	r2, #255	@ 0xff
 800334e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003352:	f001 fd0b 	bl	8004d6c <vPortExitCritical>
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003366:	f001 fcd1 	bl	8004d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003372:	2301      	movs	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e001      	b.n	800337c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800337c:	f001 fcf6 	bl	8004d6c <vPortExitCritical>

	return xReturn;
 8003380:	68fb      	ldr	r3, [r7, #12]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003392:	f001 fcbb 	bl	8004d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339e:	429a      	cmp	r2, r3
 80033a0:	d102      	bne.n	80033a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e001      	b.n	80033ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ac:	f001 fcde 	bl	8004d6c <vPortExitCritical>

	return xReturn;
 80033b0:	68fb      	ldr	r3, [r7, #12]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e014      	b.n	80033f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003408 <vQueueAddToRegistry+0x4c>)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033d8:	490b      	ldr	r1, [pc, #44]	@ (8003408 <vQueueAddToRegistry+0x4c>)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033e2:	4a09      	ldr	r2, [pc, #36]	@ (8003408 <vQueueAddToRegistry+0x4c>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033ee:	e006      	b.n	80033fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b07      	cmp	r3, #7
 80033fa:	d9e7      	bls.n	80033cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	200007a8 	.word	0x200007a8

0800340c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e016      	b.n	8003448 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800341a:	4a10      	ldr	r2, [pc, #64]	@ (800345c <vQueueUnregisterQueue+0x50>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d10b      	bne.n	8003442 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800342a:	4a0c      	ldr	r2, [pc, #48]	@ (800345c <vQueueUnregisterQueue+0x50>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2100      	movs	r1, #0
 8003430:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003434:	4a09      	ldr	r2, [pc, #36]	@ (800345c <vQueueUnregisterQueue+0x50>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
				break;
 8003440:	e006      	b.n	8003450 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b07      	cmp	r3, #7
 800344c:	d9e5      	bls.n	800341a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	200007a8 	.word	0x200007a8

08003460 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003470:	f001 fc4c 	bl	8004d0c <vPortEnterCritical>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800347a:	b25b      	sxtb	r3, r3
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d103      	bne.n	800348a <vQueueWaitForMessageRestricted+0x2a>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003490:	b25b      	sxtb	r3, r3
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d103      	bne.n	80034a0 <vQueueWaitForMessageRestricted+0x40>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034a0:	f001 fc64 	bl	8004d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3324      	adds	r3, #36	@ 0x24
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fc3f 	bl	8003d38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f7ff fefd 	bl	80032ba <prvUnlockQueue>
	}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08e      	sub	sp, #56	@ 0x38
 80034cc:	af04      	add	r7, sp, #16
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	623b      	str	r3, [r7, #32]
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <xTaskCreateStatic+0x4a>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	61fb      	str	r3, [r7, #28]
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003512:	235c      	movs	r3, #92	@ 0x5c
 8003514:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b5c      	cmp	r3, #92	@ 0x5c
 800351a:	d00b      	beq.n	8003534 <xTaskCreateStatic+0x6c>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01e      	beq.n	8003578 <xTaskCreateStatic+0xb0>
 800353a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003548:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	2202      	movs	r2, #2
 800354e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003552:	2300      	movs	r3, #0
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	9302      	str	r3, [sp, #8]
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f850 	bl	8003610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003570:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003572:	f000 f8d5 	bl	8003720 <prvAddNewTaskToReadyList>
 8003576:	e001      	b.n	800357c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800357c:	697b      	ldr	r3, [r7, #20]
	}
 800357e:	4618      	mov	r0, r3
 8003580:	3728      	adds	r7, #40	@ 0x28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003586:	b580      	push	{r7, lr}
 8003588:	b08c      	sub	sp, #48	@ 0x30
 800358a:	af04      	add	r7, sp, #16
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fcb8 	bl	8004f10 <pvPortMalloc>
 80035a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035a8:	205c      	movs	r0, #92	@ 0x5c
 80035aa:	f001 fcb1 	bl	8004f10 <pvPortMalloc>
 80035ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80035bc:	e005      	b.n	80035ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f001 fd6e 	bl	80050a0 <vPortFree>
 80035c4:	e001      	b.n	80035ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d017      	beq.n	8003600 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	2300      	movs	r3, #0
 80035dc:	9303      	str	r3, [sp, #12]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f80e 	bl	8003610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035f4:	69f8      	ldr	r0, [r7, #28]
 80035f6:	f000 f893 	bl	8003720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e002      	b.n	8003606 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003600:	f04f 33ff 	mov.w	r3, #4294967295
 8003604:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003606:	69bb      	ldr	r3, [r7, #24]
	}
 8003608:	4618      	mov	r0, r3
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	461a      	mov	r2, r3
 8003628:	21a5      	movs	r1, #165	@ 0xa5
 800362a:	f001 fe4f 	bl	80052cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003638:	3b01      	subs	r3, #1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f023 0307 	bic.w	r3, r3, #7
 8003646:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	617b      	str	r3, [r7, #20]
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	e7fd      	b.n	8003666 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e012      	b.n	8003696 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	7819      	ldrb	r1, [r3, #0]
 8003678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	3334      	adds	r3, #52	@ 0x34
 8003680:	460a      	mov	r2, r1
 8003682:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d9e9      	bls.n	8003670 <prvInitialiseNewTask+0x60>
 800369c:	e000      	b.n	80036a0 <prvInitialiseNewTask+0x90>
		{
			break;
 800369e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	2b37      	cmp	r3, #55	@ 0x37
 80036ac:	d901      	bls.n	80036b2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036ae:	2337      	movs	r3, #55	@ 0x37
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c0:	2200      	movs	r2, #0
 80036c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	3304      	adds	r3, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe ff54 	bl	8002576 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	3318      	adds	r3, #24
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe ff4f 	bl	8002576 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	69b8      	ldr	r0, [r7, #24]
 8003702:	f001 fa15 	bl	8004b30 <pxPortInitialiseStack>
 8003706:	4602      	mov	r2, r0
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800370c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003716:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003728:	f001 faf0 	bl	8004d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800372c:	4b2d      	ldr	r3, [pc, #180]	@ (80037e4 <prvAddNewTaskToReadyList+0xc4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a2c      	ldr	r2, [pc, #176]	@ (80037e4 <prvAddNewTaskToReadyList+0xc4>)
 8003734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003736:	4b2c      	ldr	r3, [pc, #176]	@ (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800373e:	4a2a      	ldr	r2, [pc, #168]	@ (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003744:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <prvAddNewTaskToReadyList+0xc4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d110      	bne.n	800376e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800374c:	f000 fc22 	bl	8003f94 <prvInitialiseTaskLists>
 8003750:	e00d      	b.n	800376e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003752:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <prvAddNewTaskToReadyList+0xcc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800375a:	4b23      	ldr	r3, [pc, #140]	@ (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	429a      	cmp	r2, r3
 8003766:	d802      	bhi.n	800376e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003768:	4a1f      	ldr	r2, [pc, #124]	@ (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <prvAddNewTaskToReadyList+0xd0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	4a1e      	ldr	r2, [pc, #120]	@ (80037f0 <prvAddNewTaskToReadyList+0xd0>)
 8003776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003778:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <prvAddNewTaskToReadyList+0xd0>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <prvAddNewTaskToReadyList+0xd4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d903      	bls.n	8003794 <prvAddNewTaskToReadyList+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	4a18      	ldr	r2, [pc, #96]	@ (80037f4 <prvAddNewTaskToReadyList+0xd4>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4a15      	ldr	r2, [pc, #84]	@ (80037f8 <prvAddNewTaskToReadyList+0xd8>)
 80037a2:	441a      	add	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f7fe feef 	bl	800258e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037b0:	f001 fadc 	bl	8004d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037b4:	4b0d      	ldr	r3, [pc, #52]	@ (80037ec <prvAddNewTaskToReadyList+0xcc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d207      	bcs.n	80037da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037ca:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <prvAddNewTaskToReadyList+0xdc>)
 80037cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000cbc 	.word	0x20000cbc
 80037e8:	200007e8 	.word	0x200007e8
 80037ec:	20000cc8 	.word	0x20000cc8
 80037f0:	20000cd8 	.word	0x20000cd8
 80037f4:	20000cc4 	.word	0x20000cc4
 80037f8:	200007ec 	.word	0x200007ec
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d018      	beq.n	8003844 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003812:	4b14      	ldr	r3, [pc, #80]	@ (8003864 <vTaskDelay+0x64>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <vTaskDelay+0x32>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	60bb      	str	r3, [r7, #8]
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003832:	f000 f883 	bl	800393c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003836:	2100      	movs	r1, #0
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fe05 	bl	8004448 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800383e:	f000 f88b 	bl	8003958 <xTaskResumeAll>
 8003842:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <vTaskDelay+0x68>)
 800384c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000ce4 	.word	0x20000ce4
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800387a:	463a      	mov	r2, r7
 800387c:	1d39      	adds	r1, r7, #4
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fe26 	bl	80024d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	9202      	str	r2, [sp, #8]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2300      	movs	r3, #0
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	460a      	mov	r2, r1
 800389a:	4922      	ldr	r1, [pc, #136]	@ (8003924 <vTaskStartScheduler+0xb8>)
 800389c:	4822      	ldr	r0, [pc, #136]	@ (8003928 <vTaskStartScheduler+0xbc>)
 800389e:	f7ff fe13 	bl	80034c8 <xTaskCreateStatic>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4a21      	ldr	r2, [pc, #132]	@ (800392c <vTaskStartScheduler+0xc0>)
 80038a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038a8:	4b20      	ldr	r3, [pc, #128]	@ (800392c <vTaskStartScheduler+0xc0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038b0:	2301      	movs	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e001      	b.n	80038ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038c0:	f000 fe16 	bl	80044f0 <xTimerCreateTimerTask>
 80038c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d116      	bne.n	80038fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	613b      	str	r3, [r7, #16]
}
 80038de:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038e0:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <vTaskStartScheduler+0xc4>)
 80038e2:	f04f 32ff 	mov.w	r2, #4294967295
 80038e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <vTaskStartScheduler+0xc8>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <vTaskStartScheduler+0xcc>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038f4:	f001 f998 	bl	8004c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038f8:	e00f      	b.n	800391a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d10b      	bne.n	800391a <vTaskStartScheduler+0xae>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	60fb      	str	r3, [r7, #12]
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	e7fd      	b.n	8003916 <vTaskStartScheduler+0xaa>
}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	08005448 	.word	0x08005448
 8003928:	08003f65 	.word	0x08003f65
 800392c:	20000ce0 	.word	0x20000ce0
 8003930:	20000cdc 	.word	0x20000cdc
 8003934:	20000cc8 	.word	0x20000cc8
 8003938:	20000cc0 	.word	0x20000cc0

0800393c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <vTaskSuspendAll+0x18>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a03      	ldr	r2, [pc, #12]	@ (8003954 <vTaskSuspendAll+0x18>)
 8003948:	6013      	str	r3, [r2, #0]
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000ce4 	.word	0x20000ce4

08003958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003966:	4b42      	ldr	r3, [pc, #264]	@ (8003a70 <xTaskResumeAll+0x118>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <xTaskResumeAll+0x2e>
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	603b      	str	r3, [r7, #0]
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	e7fd      	b.n	8003982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003986:	f001 f9c1 	bl	8004d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800398a:	4b39      	ldr	r3, [pc, #228]	@ (8003a70 <xTaskResumeAll+0x118>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	4a37      	ldr	r2, [pc, #220]	@ (8003a70 <xTaskResumeAll+0x118>)
 8003992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003994:	4b36      	ldr	r3, [pc, #216]	@ (8003a70 <xTaskResumeAll+0x118>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d162      	bne.n	8003a62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800399c:	4b35      	ldr	r3, [pc, #212]	@ (8003a74 <xTaskResumeAll+0x11c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05e      	beq.n	8003a62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039a4:	e02f      	b.n	8003a06 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039a6:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <xTaskResumeAll+0x120>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3318      	adds	r3, #24
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fe46 	bl	8002644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fe41 	bl	8002644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a7c <xTaskResumeAll+0x124>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d903      	bls.n	80039d6 <xTaskResumeAll+0x7e>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <xTaskResumeAll+0x124>)
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4a27      	ldr	r2, [pc, #156]	@ (8003a80 <xTaskResumeAll+0x128>)
 80039e4:	441a      	add	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7fe fdce 	bl	800258e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f6:	4b23      	ldr	r3, [pc, #140]	@ (8003a84 <xTaskResumeAll+0x12c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a00:	4b21      	ldr	r3, [pc, #132]	@ (8003a88 <xTaskResumeAll+0x130>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a06:	4b1c      	ldr	r3, [pc, #112]	@ (8003a78 <xTaskResumeAll+0x120>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1cb      	bne.n	80039a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a14:	f000 fb5c 	bl	80040d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a18:	4b1c      	ldr	r3, [pc, #112]	@ (8003a8c <xTaskResumeAll+0x134>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a24:	f000 f844 	bl	8003ab0 <xTaskIncrementTick>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a2e:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <xTaskResumeAll+0x130>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f1      	bne.n	8003a24 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003a40:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <xTaskResumeAll+0x134>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a46:	4b10      	ldr	r3, [pc, #64]	@ (8003a88 <xTaskResumeAll+0x130>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a52:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <xTaskResumeAll+0x138>)
 8003a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a62:	f001 f983 	bl	8004d6c <vPortExitCritical>

	return xAlreadyYielded;
 8003a66:	68bb      	ldr	r3, [r7, #8]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000ce4 	.word	0x20000ce4
 8003a74:	20000cbc 	.word	0x20000cbc
 8003a78:	20000c7c 	.word	0x20000c7c
 8003a7c:	20000cc4 	.word	0x20000cc4
 8003a80:	200007ec 	.word	0x200007ec
 8003a84:	200007e8 	.word	0x200007e8
 8003a88:	20000cd0 	.word	0x20000cd0
 8003a8c:	20000ccc 	.word	0x20000ccc
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a9a:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <xTaskGetTickCount+0x18>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	20000cc0 	.word	0x20000cc0

08003ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aba:	4b52      	ldr	r3, [pc, #328]	@ (8003c04 <xTaskIncrementTick+0x154>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 808f 	bne.w	8003be2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ac4:	4b50      	ldr	r3, [pc, #320]	@ (8003c08 <xTaskIncrementTick+0x158>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003acc:	4a4e      	ldr	r2, [pc, #312]	@ (8003c08 <xTaskIncrementTick+0x158>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d121      	bne.n	8003b1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8003c0c <xTaskIncrementTick+0x15c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <xTaskIncrementTick+0x4a>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	603b      	str	r3, [r7, #0]
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	e7fd      	b.n	8003af6 <xTaskIncrementTick+0x46>
 8003afa:	4b44      	ldr	r3, [pc, #272]	@ (8003c0c <xTaskIncrementTick+0x15c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <xTaskIncrementTick+0x160>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a41      	ldr	r2, [pc, #260]	@ (8003c0c <xTaskIncrementTick+0x15c>)
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4a41      	ldr	r2, [pc, #260]	@ (8003c10 <xTaskIncrementTick+0x160>)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b41      	ldr	r3, [pc, #260]	@ (8003c14 <xTaskIncrementTick+0x164>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3301      	adds	r3, #1
 8003b14:	4a3f      	ldr	r2, [pc, #252]	@ (8003c14 <xTaskIncrementTick+0x164>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	f000 fada 	bl	80040d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c18 <xTaskIncrementTick+0x168>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d34e      	bcc.n	8003bc4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b26:	4b39      	ldr	r3, [pc, #228]	@ (8003c0c <xTaskIncrementTick+0x15c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <xTaskIncrementTick+0x84>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <xTaskIncrementTick+0x86>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b3a:	4b37      	ldr	r3, [pc, #220]	@ (8003c18 <xTaskIncrementTick+0x168>)
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	601a      	str	r2, [r3, #0]
					break;
 8003b42:	e03f      	b.n	8003bc4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b44:	4b31      	ldr	r3, [pc, #196]	@ (8003c0c <xTaskIncrementTick+0x15c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d203      	bcs.n	8003b64 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c18 <xTaskIncrementTick+0x168>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]
						break;
 8003b62:	e02f      	b.n	8003bc4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fd6b 	bl	8002644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3318      	adds	r3, #24
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fd62 	bl	8002644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b84:	4b25      	ldr	r3, [pc, #148]	@ (8003c1c <xTaskIncrementTick+0x16c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d903      	bls.n	8003b94 <xTaskIncrementTick+0xe4>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	4a22      	ldr	r2, [pc, #136]	@ (8003c1c <xTaskIncrementTick+0x16c>)
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <xTaskIncrementTick+0x170>)
 8003ba2:	441a      	add	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f7fe fcef 	bl	800258e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <xTaskIncrementTick+0x174>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d3b3      	bcc.n	8003b26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc2:	e7b0      	b.n	8003b26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bc4:	4b17      	ldr	r3, [pc, #92]	@ (8003c24 <xTaskIncrementTick+0x174>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bca:	4915      	ldr	r1, [pc, #84]	@ (8003c20 <xTaskIncrementTick+0x170>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d907      	bls.n	8003bec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e004      	b.n	8003bec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003be2:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <xTaskIncrementTick+0x178>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	4a0f      	ldr	r2, [pc, #60]	@ (8003c28 <xTaskIncrementTick+0x178>)
 8003bea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <xTaskIncrementTick+0x17c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bf8:	697b      	ldr	r3, [r7, #20]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000ce4 	.word	0x20000ce4
 8003c08:	20000cc0 	.word	0x20000cc0
 8003c0c:	20000c74 	.word	0x20000c74
 8003c10:	20000c78 	.word	0x20000c78
 8003c14:	20000cd4 	.word	0x20000cd4
 8003c18:	20000cdc 	.word	0x20000cdc
 8003c1c:	20000cc4 	.word	0x20000cc4
 8003c20:	200007ec 	.word	0x200007ec
 8003c24:	200007e8 	.word	0x200007e8
 8003c28:	20000ccc 	.word	0x20000ccc
 8003c2c:	20000cd0 	.word	0x20000cd0

08003c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c36:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <vTaskSwitchContext+0xa8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c3e:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <vTaskSwitchContext+0xac>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c44:	e042      	b.n	8003ccc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003c46:	4b25      	ldr	r3, [pc, #148]	@ (8003cdc <vTaskSwitchContext+0xac>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c4c:	4b24      	ldr	r3, [pc, #144]	@ (8003ce0 <vTaskSwitchContext+0xb0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e011      	b.n	8003c78 <vTaskSwitchContext+0x48>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <vTaskSwitchContext+0x42>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	607b      	str	r3, [r7, #4]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <vTaskSwitchContext+0x3e>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	491a      	ldr	r1, [pc, #104]	@ (8003ce4 <vTaskSwitchContext+0xb4>)
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0e3      	beq.n	8003c54 <vTaskSwitchContext+0x24>
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a13      	ldr	r2, [pc, #76]	@ (8003ce4 <vTaskSwitchContext+0xb4>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3308      	adds	r3, #8
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d104      	bne.n	8003cbc <vTaskSwitchContext+0x8c>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4a09      	ldr	r2, [pc, #36]	@ (8003ce8 <vTaskSwitchContext+0xb8>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4a06      	ldr	r2, [pc, #24]	@ (8003ce0 <vTaskSwitchContext+0xb0>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6013      	str	r3, [r2, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000ce4 	.word	0x20000ce4
 8003cdc:	20000cd0 	.word	0x20000cd0
 8003ce0:	20000cc4 	.word	0x20000cc4
 8003ce4:	200007ec 	.word	0x200007ec
 8003ce8:	200007e8 	.word	0x200007e8

08003cec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	60fb      	str	r3, [r7, #12]
}
 8003d0e:	bf00      	nop
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d14:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <vTaskPlaceOnEventList+0x48>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3318      	adds	r3, #24
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fe fc59 	bl	80025d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d22:	2101      	movs	r1, #1
 8003d24:	6838      	ldr	r0, [r7, #0]
 8003d26:	f000 fb8f 	bl	8004448 <prvAddCurrentTaskToDelayedList>
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200007e8 	.word	0x200007e8

08003d38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	617b      	str	r3, [r7, #20]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d62:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <vTaskPlaceOnEventListRestricted+0x54>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3318      	adds	r3, #24
 8003d68:	4619      	mov	r1, r3
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7fe fc0f 	bl	800258e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	68b8      	ldr	r0, [r7, #8]
 8003d80:	f000 fb62 	bl	8004448 <prvAddCurrentTaskToDelayedList>
	}
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200007e8 	.word	0x200007e8

08003d90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	60fb      	str	r3, [r7, #12]
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	e7fd      	b.n	8003dba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3318      	adds	r3, #24
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fc3e 	bl	8002644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <xTaskRemoveFromEventList+0xb0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11d      	bne.n	8003e0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fc35 	bl	8002644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dde:	4b19      	ldr	r3, [pc, #100]	@ (8003e44 <xTaskRemoveFromEventList+0xb4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d903      	bls.n	8003dee <xTaskRemoveFromEventList+0x5e>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	4a16      	ldr	r2, [pc, #88]	@ (8003e44 <xTaskRemoveFromEventList+0xb4>)
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4a13      	ldr	r2, [pc, #76]	@ (8003e48 <xTaskRemoveFromEventList+0xb8>)
 8003dfc:	441a      	add	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7fe fbc2 	bl	800258e <vListInsertEnd>
 8003e0a:	e005      	b.n	8003e18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3318      	adds	r3, #24
 8003e10:	4619      	mov	r1, r3
 8003e12:	480e      	ldr	r0, [pc, #56]	@ (8003e4c <xTaskRemoveFromEventList+0xbc>)
 8003e14:	f7fe fbbb 	bl	800258e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <xTaskRemoveFromEventList+0xc0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d905      	bls.n	8003e32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <xTaskRemoveFromEventList+0xc4>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e001      	b.n	8003e36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e36:	697b      	ldr	r3, [r7, #20]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20000ce4 	.word	0x20000ce4
 8003e44:	20000cc4 	.word	0x20000cc4
 8003e48:	200007ec 	.word	0x200007ec
 8003e4c:	20000c7c 	.word	0x20000c7c
 8003e50:	200007e8 	.word	0x200007e8
 8003e54:	20000cd0 	.word	0x20000cd0

08003e58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e60:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <vTaskInternalSetTimeOutState+0x24>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e68:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <vTaskInternalSetTimeOutState+0x28>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	605a      	str	r2, [r3, #4]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000cd4 	.word	0x20000cd4
 8003e80:	20000cc0 	.word	0x20000cc0

08003e84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	613b      	str	r3, [r7, #16]
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	e7fd      	b.n	8003ea8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60fb      	str	r3, [r7, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003eca:	f000 ff1f 	bl	8004d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ece:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <xTaskCheckForTimeOut+0xc0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d102      	bne.n	8003eee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e023      	b.n	8003f36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <xTaskCheckForTimeOut+0xc4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d007      	beq.n	8003f0a <xTaskCheckForTimeOut+0x86>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e015      	b.n	8003f36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d20b      	bcs.n	8003f2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff99 	bl	8003e58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e004      	b.n	8003f36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f36:	f000 ff19 	bl	8004d6c <vPortExitCritical>

	return xReturn;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000cc0 	.word	0x20000cc0
 8003f48:	20000cd4 	.word	0x20000cd4

08003f4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <vTaskMissedYield+0x14>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000cd0 	.word	0x20000cd0

08003f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f6c:	f000 f852 	bl	8004014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <prvIdleTask+0x28>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d9f9      	bls.n	8003f6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <prvIdleTask+0x2c>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f88:	e7f0      	b.n	8003f6c <prvIdleTask+0x8>
 8003f8a:	bf00      	nop
 8003f8c:	200007ec 	.word	0x200007ec
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	e00c      	b.n	8003fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a12      	ldr	r2, [pc, #72]	@ (8003ff4 <prvInitialiseTaskLists+0x60>)
 8003fac:	4413      	add	r3, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fac2 	bl	8002538 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b37      	cmp	r3, #55	@ 0x37
 8003fbe:	d9ef      	bls.n	8003fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fc0:	480d      	ldr	r0, [pc, #52]	@ (8003ff8 <prvInitialiseTaskLists+0x64>)
 8003fc2:	f7fe fab9 	bl	8002538 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fc6:	480d      	ldr	r0, [pc, #52]	@ (8003ffc <prvInitialiseTaskLists+0x68>)
 8003fc8:	f7fe fab6 	bl	8002538 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fcc:	480c      	ldr	r0, [pc, #48]	@ (8004000 <prvInitialiseTaskLists+0x6c>)
 8003fce:	f7fe fab3 	bl	8002538 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fd2:	480c      	ldr	r0, [pc, #48]	@ (8004004 <prvInitialiseTaskLists+0x70>)
 8003fd4:	f7fe fab0 	bl	8002538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fd8:	480b      	ldr	r0, [pc, #44]	@ (8004008 <prvInitialiseTaskLists+0x74>)
 8003fda:	f7fe faad 	bl	8002538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <prvInitialiseTaskLists+0x78>)
 8003fe0:	4a05      	ldr	r2, [pc, #20]	@ (8003ff8 <prvInitialiseTaskLists+0x64>)
 8003fe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <prvInitialiseTaskLists+0x7c>)
 8003fe6:	4a05      	ldr	r2, [pc, #20]	@ (8003ffc <prvInitialiseTaskLists+0x68>)
 8003fe8:	601a      	str	r2, [r3, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200007ec 	.word	0x200007ec
 8003ff8:	20000c4c 	.word	0x20000c4c
 8003ffc:	20000c60 	.word	0x20000c60
 8004000:	20000c7c 	.word	0x20000c7c
 8004004:	20000c90 	.word	0x20000c90
 8004008:	20000ca8 	.word	0x20000ca8
 800400c:	20000c74 	.word	0x20000c74
 8004010:	20000c78 	.word	0x20000c78

08004014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401a:	e019      	b.n	8004050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800401c:	f000 fe76 	bl	8004d0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004020:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <prvCheckTasksWaitingTermination+0x50>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fb09 	bl	8002644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <prvCheckTasksWaitingTermination+0x54>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	4a0b      	ldr	r2, [pc, #44]	@ (8004068 <prvCheckTasksWaitingTermination+0x54>)
 800403a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <prvCheckTasksWaitingTermination+0x58>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a0a      	ldr	r2, [pc, #40]	@ (800406c <prvCheckTasksWaitingTermination+0x58>)
 8004044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004046:	f000 fe91 	bl	8004d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f810 	bl	8004070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004050:	4b06      	ldr	r3, [pc, #24]	@ (800406c <prvCheckTasksWaitingTermination+0x58>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e1      	bne.n	800401c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000c90 	.word	0x20000c90
 8004068:	20000cbc 	.word	0x20000cbc
 800406c:	20000ca4 	.word	0x20000ca4

08004070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f80a 	bl	80050a0 <vPortFree>
				vPortFree( pxTCB );
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f001 f807 	bl	80050a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004092:	e019      	b.n	80040c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800409a:	2b01      	cmp	r3, #1
 800409c:	d103      	bne.n	80040a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fffe 	bl	80050a0 <vPortFree>
	}
 80040a4:	e010      	b.n	80040c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d00b      	beq.n	80040c8 <prvDeleteTCB+0x58>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <prvDeleteTCB+0x54>
	}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <prvResetNextTaskUnblockTime+0x40>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <prvResetNextTaskUnblockTime+0x14>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <prvResetNextTaskUnblockTime+0x16>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <prvResetNextTaskUnblockTime+0x44>)
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295
 80040f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040f2:	e008      	b.n	8004106 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040f4:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <prvResetNextTaskUnblockTime+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a04      	ldr	r2, [pc, #16]	@ (8004114 <prvResetNextTaskUnblockTime+0x44>)
 8004104:	6013      	str	r3, [r2, #0]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	20000c74 	.word	0x20000c74
 8004114:	20000cdc 	.word	0x20000cdc

08004118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <xTaskGetSchedulerState+0x34>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004126:	2301      	movs	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	e008      	b.n	800413e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412c:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <xTaskGetSchedulerState+0x38>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004134:	2302      	movs	r3, #2
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e001      	b.n	800413e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800413e:	687b      	ldr	r3, [r7, #4]
	}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000cc8 	.word	0x20000cc8
 8004150:	20000ce4 	.word	0x20000ce4

08004154 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d056      	beq.n	8004218 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416e:	4b2d      	ldr	r3, [pc, #180]	@ (8004224 <xTaskPriorityInherit+0xd0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	429a      	cmp	r2, r3
 8004176:	d246      	bcs.n	8004206 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	db06      	blt.n	800418e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004180:	4b28      	ldr	r3, [pc, #160]	@ (8004224 <xTaskPriorityInherit+0xd0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6959      	ldr	r1, [r3, #20]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a22      	ldr	r2, [pc, #136]	@ (8004228 <xTaskPriorityInherit+0xd4>)
 80041a0:	4413      	add	r3, r2
 80041a2:	4299      	cmp	r1, r3
 80041a4:	d101      	bne.n	80041aa <xTaskPriorityInherit+0x56>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xTaskPriorityInherit+0x58>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d022      	beq.n	80041f6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fa45 	bl	8002644 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <xTaskPriorityInherit+0xd0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c8:	4b18      	ldr	r3, [pc, #96]	@ (800422c <xTaskPriorityInherit+0xd8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d903      	bls.n	80041d8 <xTaskPriorityInherit+0x84>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	4a15      	ldr	r2, [pc, #84]	@ (800422c <xTaskPriorityInherit+0xd8>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4a10      	ldr	r2, [pc, #64]	@ (8004228 <xTaskPriorityInherit+0xd4>)
 80041e6:	441a      	add	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f7fe f9cd 	bl	800258e <vListInsertEnd>
 80041f4:	e004      	b.n	8004200 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <xTaskPriorityInherit+0xd0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004200:	2301      	movs	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e008      	b.n	8004218 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <xTaskPriorityInherit+0xd0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	429a      	cmp	r2, r3
 8004212:	d201      	bcs.n	8004218 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004218:	68fb      	ldr	r3, [r7, #12]
	}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	200007e8 	.word	0x200007e8
 8004228:	200007ec 	.word	0x200007ec
 800422c:	20000cc4 	.word	0x20000cc4

08004230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d058      	beq.n	80042f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004246:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <xTaskPriorityDisinherit+0xd4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	429a      	cmp	r2, r3
 800424e:	d00b      	beq.n	8004268 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60fb      	str	r3, [r7, #12]
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60bb      	str	r3, [r7, #8]
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428c:	1e5a      	subs	r2, r3, #1
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	429a      	cmp	r2, r3
 800429c:	d02c      	beq.n	80042f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d128      	bne.n	80042f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f9ca 	bl	8002644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004308 <xTaskPriorityDisinherit+0xd8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d903      	bls.n	80042d8 <xTaskPriorityDisinherit+0xa8>
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004308 <xTaskPriorityDisinherit+0xd8>)
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4a09      	ldr	r2, [pc, #36]	@ (800430c <xTaskPriorityDisinherit+0xdc>)
 80042e6:	441a      	add	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f7fe f94d 	bl	800258e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042f8:	697b      	ldr	r3, [r7, #20]
	}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200007e8 	.word	0x200007e8
 8004308:	20000cc4 	.word	0x20000cc4
 800430c:	200007ec 	.word	0x200007ec

08004310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800431e:	2301      	movs	r3, #1
 8004320:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d071      	beq.n	800440c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60fb      	str	r3, [r7, #12]
}
 8004342:	bf00      	nop
 8004344:	bf00      	nop
 8004346:	e7fd      	b.n	8004344 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d902      	bls.n	8004358 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e002      	b.n	800435e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	429a      	cmp	r2, r3
 8004366:	d051      	beq.n	800440c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	429a      	cmp	r2, r3
 8004370:	d14c      	bne.n	800440c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004372:	4b28      	ldr	r3, [pc, #160]	@ (8004414 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d10b      	bne.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60bb      	str	r3, [r7, #8]
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	e7fd      	b.n	8004390 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	db04      	blt.n	80043b2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	6959      	ldr	r1, [r3, #20]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a15      	ldr	r2, [pc, #84]	@ (8004418 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80043c2:	4413      	add	r3, r2
 80043c4:	4299      	cmp	r1, r3
 80043c6:	d101      	bne.n	80043cc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01c      	beq.n	800440c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe f934 	bl	8002644 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	4b0e      	ldr	r3, [pc, #56]	@ (800441c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d903      	bls.n	80043f0 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	4a0b      	ldr	r2, [pc, #44]	@ (800441c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4a06      	ldr	r2, [pc, #24]	@ (8004418 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80043fe:	441a      	add	r2, r3
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f7fe f8c1 	bl	800258e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800440c:	bf00      	nop
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	200007e8 	.word	0x200007e8
 8004418:	200007ec 	.word	0x200007ec
 800441c:	20000cc4 	.word	0x20000cc4

08004420 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <pvTaskIncrementMutexHeldCount+0x24>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <pvTaskIncrementMutexHeldCount+0x24>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004432:	3201      	adds	r2, #1
 8004434:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004436:	4b03      	ldr	r3, [pc, #12]	@ (8004444 <pvTaskIncrementMutexHeldCount+0x24>)
 8004438:	681b      	ldr	r3, [r3, #0]
	}
 800443a:	4618      	mov	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	200007e8 	.word	0x200007e8

08004448 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004452:	4b21      	ldr	r3, [pc, #132]	@ (80044d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004458:	4b20      	ldr	r3, [pc, #128]	@ (80044dc <prvAddCurrentTaskToDelayedList+0x94>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3304      	adds	r3, #4
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe f8f0 	bl	8002644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d10a      	bne.n	8004482 <prvAddCurrentTaskToDelayedList+0x3a>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004472:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <prvAddCurrentTaskToDelayedList+0x94>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4819      	ldr	r0, [pc, #100]	@ (80044e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800447c:	f7fe f887 	bl	800258e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004480:	e026      	b.n	80044d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800448a:	4b14      	ldr	r3, [pc, #80]	@ (80044dc <prvAddCurrentTaskToDelayedList+0x94>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	429a      	cmp	r2, r3
 8004498:	d209      	bcs.n	80044ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800449a:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b0f      	ldr	r3, [pc, #60]	@ (80044dc <prvAddCurrentTaskToDelayedList+0x94>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fe f894 	bl	80025d4 <vListInsert>
}
 80044ac:	e010      	b.n	80044d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ae:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <prvAddCurrentTaskToDelayedList+0x94>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f7fe f88a 	bl	80025d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044c0:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d202      	bcs.n	80044d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044ca:	4a08      	ldr	r2, [pc, #32]	@ (80044ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6013      	str	r3, [r2, #0]
}
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000cc0 	.word	0x20000cc0
 80044dc:	200007e8 	.word	0x200007e8
 80044e0:	20000ca8 	.word	0x20000ca8
 80044e4:	20000c78 	.word	0x20000c78
 80044e8:	20000c74 	.word	0x20000c74
 80044ec:	20000cdc 	.word	0x20000cdc

080044f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	@ 0x28
 80044f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044fa:	f000 fad9 	bl	8004ab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004574 <xTimerCreateTimerTask+0x84>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d021      	beq.n	800454a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800450e:	1d3a      	adds	r2, r7, #4
 8004510:	f107 0108 	add.w	r1, r7, #8
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	4618      	mov	r0, r3
 800451a:	f7fd fff3 	bl	8002504 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	9202      	str	r2, [sp, #8]
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	2302      	movs	r3, #2
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2300      	movs	r3, #0
 800452e:	460a      	mov	r2, r1
 8004530:	4911      	ldr	r1, [pc, #68]	@ (8004578 <xTimerCreateTimerTask+0x88>)
 8004532:	4812      	ldr	r0, [pc, #72]	@ (800457c <xTimerCreateTimerTask+0x8c>)
 8004534:	f7fe ffc8 	bl	80034c8 <xTaskCreateStatic>
 8004538:	4603      	mov	r3, r0
 800453a:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <xTimerCreateTimerTask+0x90>)
 800453c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800453e:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <xTimerCreateTimerTask+0x90>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004546:	2301      	movs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	613b      	str	r3, [r7, #16]
}
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	e7fd      	b.n	8004564 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004568:	697b      	ldr	r3, [r7, #20]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000d18 	.word	0x20000d18
 8004578:	08005450 	.word	0x08005450
 800457c:	080046a5 	.word	0x080046a5
 8004580:	20000d1c 	.word	0x20000d1c

08004584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	@ 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	623b      	str	r3, [r7, #32]
}
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045b4:	4b19      	ldr	r3, [pc, #100]	@ (800461c <xTimerGenericCommand+0x98>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02a      	beq.n	8004612 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	dc18      	bgt.n	8004600 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045ce:	f7ff fda3 	bl	8004118 <xTaskGetSchedulerState>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d109      	bne.n	80045ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045d8:	4b10      	ldr	r3, [pc, #64]	@ (800461c <xTimerGenericCommand+0x98>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	f107 0110 	add.w	r1, r7, #16
 80045e0:	2300      	movs	r3, #0
 80045e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e4:	f7fe fa0e 	bl	8002a04 <xQueueGenericSend>
 80045e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80045ea:	e012      	b.n	8004612 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <xTimerGenericCommand+0x98>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	f107 0110 	add.w	r1, r7, #16
 80045f4:	2300      	movs	r3, #0
 80045f6:	2200      	movs	r2, #0
 80045f8:	f7fe fa04 	bl	8002a04 <xQueueGenericSend>
 80045fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80045fe:	e008      	b.n	8004612 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <xTimerGenericCommand+0x98>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	f107 0110 	add.w	r1, r7, #16
 8004608:	2300      	movs	r3, #0
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	f7fe fafc 	bl	8002c08 <xQueueGenericSendFromISR>
 8004610:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004614:	4618      	mov	r0, r3
 8004616:	3728      	adds	r7, #40	@ 0x28
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000d18 	.word	0x20000d18

08004620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800462a:	4b1d      	ldr	r3, [pc, #116]	@ (80046a0 <prvProcessExpiredTimer+0x80>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe f803 	bl	8002644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d123      	bne.n	800468e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	18d1      	adds	r1, r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f000 f8cc 	bl	80047f0 <prvInsertTimerInActiveList>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d017      	beq.n	800468e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800465e:	2300      	movs	r3, #0
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	2100      	movs	r1, #0
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	f7ff ff8b 	bl	8004584 <xTimerGenericCommand>
 800466e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60fb      	str	r3, [r7, #12]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	4798      	blx	r3
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000d10 	.word	0x20000d10

080046a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046ac:	f107 0308 	add.w	r3, r7, #8
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f859 	bl	8004768 <prvGetNextExpireTime>
 80046b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4619      	mov	r1, r3
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f805 	bl	80046cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046c2:	f000 f8d7 	bl	8004874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046c6:	bf00      	nop
 80046c8:	e7f0      	b.n	80046ac <prvTimerTask+0x8>
	...

080046cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046d6:	f7ff f931 	bl	800393c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f866 	bl	80047b0 <prvSampleTimeNow>
 80046e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d130      	bne.n	800474e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <prvProcessTimerOrBlockTask+0x3c>
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d806      	bhi.n	8004708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046fa:	f7ff f92d 	bl	8003958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff8d 	bl	8004620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004706:	e024      	b.n	8004752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800470e:	4b13      	ldr	r3, [pc, #76]	@ (800475c <prvProcessTimerOrBlockTask+0x90>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004720:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <prvProcessTimerOrBlockTask+0x94>)
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4619      	mov	r1, r3
 800472e:	f7fe fe97 	bl	8003460 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004732:	f7ff f911 	bl	8003958 <xTaskResumeAll>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800473c:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <prvProcessTimerOrBlockTask+0x98>)
 800473e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	f3bf 8f6f 	isb	sy
}
 800474c:	e001      	b.n	8004752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800474e:	f7ff f903 	bl	8003958 <xTaskResumeAll>
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000d14 	.word	0x20000d14
 8004760:	20000d18 	.word	0x20000d18
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004770:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <prvGetNextExpireTime+0x44>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800478e:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <prvGetNextExpireTime+0x44>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e001      	b.n	800479e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000d10 	.word	0x20000d10

080047b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047b8:	f7ff f96c 	bl	8003a94 <xTaskGetTickCount>
 80047bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <prvSampleTimeNow+0x3c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d205      	bcs.n	80047d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047c8:	f000 f910 	bl	80049ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e002      	b.n	80047da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047da:	4a04      	ldr	r2, [pc, #16]	@ (80047ec <prvSampleTimeNow+0x3c>)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047e0:	68fb      	ldr	r3, [r7, #12]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000d20 	.word	0x20000d20

080047f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d812      	bhi.n	800483c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	429a      	cmp	r2, r3
 8004822:	d302      	bcc.n	800482a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e01b      	b.n	8004862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800482a:	4b10      	ldr	r3, [pc, #64]	@ (800486c <prvInsertTimerInActiveList+0x7c>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3304      	adds	r3, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7fd fecd 	bl	80025d4 <vListInsert>
 800483a:	e012      	b.n	8004862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d206      	bcs.n	8004852 <prvInsertTimerInActiveList+0x62>
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e007      	b.n	8004862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004852:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <prvInsertTimerInActiveList+0x80>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fd feb9 	bl	80025d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000d14 	.word	0x20000d14
 8004870:	20000d10 	.word	0x20000d10

08004874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08e      	sub	sp, #56	@ 0x38
 8004878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800487a:	e0a5      	b.n	80049c8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	da19      	bge.n	80048b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	3304      	adds	r3, #4
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	61fb      	str	r3, [r7, #28]
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	e7fd      	b.n	80048a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ac:	6850      	ldr	r0, [r2, #4]
 80048ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	4611      	mov	r1, r2
 80048b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f2c0 8085 	blt.w	80049c8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd feb8 	bl	8002644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048d4:	463b      	mov	r3, r7
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff ff6a 	bl	80047b0 <prvSampleTimeNow>
 80048dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b09      	cmp	r3, #9
 80048e2:	d86c      	bhi.n	80049be <prvProcessReceivedCommands+0x14a>
 80048e4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <prvProcessReceivedCommands+0x78>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004915 	.word	0x08004915
 80048f0:	08004915 	.word	0x08004915
 80048f4:	08004915 	.word	0x08004915
 80048f8:	080049bf 	.word	0x080049bf
 80048fc:	08004973 	.word	0x08004973
 8004900:	080049ad 	.word	0x080049ad
 8004904:	08004915 	.word	0x08004915
 8004908:	08004915 	.word	0x08004915
 800490c:	080049bf 	.word	0x080049bf
 8004910:	08004973 	.word	0x08004973
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	18d1      	adds	r1, r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004922:	f7ff ff65 	bl	80047f0 <prvInsertTimerInActiveList>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d04a      	beq.n	80049c2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004932:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d142      	bne.n	80049c2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	441a      	add	r2, r3
 8004944:	2300      	movs	r3, #0
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2300      	movs	r3, #0
 800494a:	2100      	movs	r1, #0
 800494c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800494e:	f7ff fe19 	bl	8004584 <xTimerGenericCommand>
 8004952:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d133      	bne.n	80049c2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	61bb      	str	r3, [r7, #24]
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	617b      	str	r3, [r7, #20]
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	18d1      	adds	r1, r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a6:	f7ff ff23 	bl	80047f0 <prvInsertTimerInActiveList>
					break;
 80049aa:	e00d      	b.n	80049c8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80049b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049b8:	f000 fb72 	bl	80050a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049bc:	e003      	b.n	80049c6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <prvProcessReceivedCommands+0x154>
					break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <prvProcessReceivedCommands+0x154>
					break;
 80049c6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049c8:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <prvProcessReceivedCommands+0x174>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1d39      	adds	r1, r7, #4
 80049ce:	2200      	movs	r2, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe f9b5 	bl	8002d40 <xQueueReceive>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f af4f 	bne.w	800487c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	3730      	adds	r7, #48	@ 0x30
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000d18 	.word	0x20000d18

080049ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049f2:	e046      	b.n	8004a82 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f4:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa8 <prvSwitchTimerLists+0xbc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049fe:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa8 <prvSwitchTimerLists+0xbc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fd fe19 	bl	8002644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d12f      	bne.n	8004a82 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d90e      	bls.n	8004a52 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <prvSwitchTimerLists+0xbc>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f7fd fdc2 	bl	80025d4 <vListInsert>
 8004a50:	e017      	b.n	8004a82 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a52:	2300      	movs	r3, #0
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fd91 	bl	8004584 <xTimerGenericCommand>
 8004a62:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <prvSwitchTimerLists+0x96>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	603b      	str	r3, [r7, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <prvSwitchTimerLists+0xbc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1b3      	bne.n	80049f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <prvSwitchTimerLists+0xbc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a92:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <prvSwitchTimerLists+0xc0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a04      	ldr	r2, [pc, #16]	@ (8004aa8 <prvSwitchTimerLists+0xbc>)
 8004a98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <prvSwitchTimerLists+0xc0>)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000d10 	.word	0x20000d10
 8004aac:	20000d14 	.word	0x20000d14

08004ab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ab6:	f000 f929 	bl	8004d0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004aba:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d120      	bne.n	8004b04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ac2:	4814      	ldr	r0, [pc, #80]	@ (8004b14 <prvCheckForValidListAndQueue+0x64>)
 8004ac4:	f7fd fd38 	bl	8002538 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ac8:	4813      	ldr	r0, [pc, #76]	@ (8004b18 <prvCheckForValidListAndQueue+0x68>)
 8004aca:	f7fd fd35 	bl	8002538 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ace:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <prvCheckForValidListAndQueue+0x6c>)
 8004ad0:	4a10      	ldr	r2, [pc, #64]	@ (8004b14 <prvCheckForValidListAndQueue+0x64>)
 8004ad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ad4:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <prvCheckForValidListAndQueue+0x70>)
 8004ad6:	4a10      	ldr	r2, [pc, #64]	@ (8004b18 <prvCheckForValidListAndQueue+0x68>)
 8004ad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <prvCheckForValidListAndQueue+0x74>)
 8004ae0:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <prvCheckForValidListAndQueue+0x78>)
 8004ae2:	2110      	movs	r1, #16
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f7fd fe41 	bl	800276c <xQueueGenericCreateStatic>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004aee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004af0:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	490b      	ldr	r1, [pc, #44]	@ (8004b2c <prvCheckForValidListAndQueue+0x7c>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fc5c 	bl	80033bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b04:	f000 f932 	bl	8004d6c <vPortExitCritical>
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000d18 	.word	0x20000d18
 8004b14:	20000ce8 	.word	0x20000ce8
 8004b18:	20000cfc 	.word	0x20000cfc
 8004b1c:	20000d10 	.word	0x20000d10
 8004b20:	20000d14 	.word	0x20000d14
 8004b24:	20000dc4 	.word	0x20000dc4
 8004b28:	20000d24 	.word	0x20000d24
 8004b2c:	08005458 	.word	0x08005458

08004b30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f023 0201 	bic.w	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b60:	4a08      	ldr	r2, [pc, #32]	@ (8004b84 <pxPortInitialiseStack+0x54>)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b14      	subs	r3, #20
 8004b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b20      	subs	r3, #32
 8004b76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b78:	68fb      	ldr	r3, [r7, #12]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	08004b89 	.word	0x08004b89

08004b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <prvTaskExitError+0x54>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d00b      	beq.n	8004bb4 <prvTaskExitError+0x2c>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	60fb      	str	r3, [r7, #12]
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <prvTaskExitError+0x28>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60bb      	str	r3, [r7, #8]
}
 8004bc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bc8:	bf00      	nop
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0fc      	beq.n	8004bca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	20000018 	.word	0x20000018

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bfe:	4770      	bx	lr

08004c00 <pxCurrentTCBConst2>:
 8004c00:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c08:	4806      	ldr	r0, [pc, #24]	@ (8004c24 <prvPortStartFirstTask+0x1c>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	b662      	cpsie	i
 8004c14:	b661      	cpsie	f
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	df00      	svc	0
 8004c20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c22:	bf00      	nop
 8004c24:	e000ed08 	.word	0xe000ed08

08004c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c2e:	4b32      	ldr	r3, [pc, #200]	@ (8004cf8 <xPortStartScheduler+0xd0>)
 8004c30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	@ 0xff
 8004c3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <xPortStartScheduler+0xd4>)
 8004c54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c56:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c58:	2207      	movs	r2, #7
 8004c5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5c:	e009      	b.n	8004c72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c5e:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4a26      	ldr	r2, [pc, #152]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b80      	cmp	r3, #128	@ 0x80
 8004c7c:	d0ef      	beq.n	8004c5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c7e:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1c3 0307 	rsb	r3, r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d00b      	beq.n	8004ca2 <xPortStartScheduler+0x7a>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	60bb      	str	r3, [r7, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	e7fd      	b.n	8004c9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	4a15      	ldr	r2, [pc, #84]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004caa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cac:	4b14      	ldr	r3, [pc, #80]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cb4:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004cb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cd8:	f000 f8b8 	bl	8004e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <xPortStartScheduler+0xe0>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ce2:	f7ff ff91 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ce6:	f7fe ffa3 	bl	8003c30 <vTaskSwitchContext>
	prvTaskExitError();
 8004cea:	f7ff ff4d 	bl	8004b88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000e400 	.word	0xe000e400
 8004cfc:	20000e14 	.word	0x20000e14
 8004d00:	20000e18 	.word	0x20000e18
 8004d04:	e000ed20 	.word	0xe000ed20
 8004d08:	20000018 	.word	0x20000018

08004d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	607b      	str	r3, [r7, #4]
}
 8004d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d26:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <vPortEnterCritical+0x58>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d64 <vPortEnterCritical+0x58>)
 8004d2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d30:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <vPortEnterCritical+0x58>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d110      	bne.n	8004d5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <vPortEnterCritical+0x5c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <vPortEnterCritical+0x4e>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	603b      	str	r3, [r7, #0]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <vPortEnterCritical+0x4a>
	}
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	20000018 	.word	0x20000018
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d72:	4b12      	ldr	r3, [pc, #72]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <vPortExitCritical+0x26>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	607b      	str	r3, [r7, #4]
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	e7fd      	b.n	8004d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d92:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	4a08      	ldr	r2, [pc, #32]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d9c:	4b07      	ldr	r3, [pc, #28]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <vPortExitCritical+0x44>
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000018 	.word	0x20000018

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dd0:	6010      	str	r0, [r2, #0]
 8004dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004dd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004dda:	f380 8811 	msr	BASEPRI, r0
 8004dde:	f7fe ff27 	bl	8003c30 <vTaskSwitchContext>
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004df6:	f380 8809 	msr	PSP, r0
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	4770      	bx	lr

08004e00 <pxCurrentTCBConst>:
 8004e00:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
}
 8004e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e22:	f7fe fe45 	bl	8003ab0 <xTaskIncrementTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <SysTick_Handler+0x40>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
}
 8004e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e50:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <vPortSetupTimerInterrupt+0x30>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <vPortSetupTimerInterrupt+0x34>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <vPortSetupTimerInterrupt+0x38>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <vPortSetupTimerInterrupt+0x3c>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <vPortSetupTimerInterrupt+0x40>)
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e6e:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <vPortSetupTimerInterrupt+0x30>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	e000e010 	.word	0xe000e010
 8004e80:	e000e018 	.word	0xe000e018
 8004e84:	2000000c 	.word	0x2000000c
 8004e88:	10624dd3 	.word	0x10624dd3
 8004e8c:	e000e014 	.word	0xe000e014

08004e90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e96:	f3ef 8305 	mrs	r3, IPSR
 8004e9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b0f      	cmp	r3, #15
 8004ea0:	d915      	bls.n	8004ece <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ea2:	4a17      	ldr	r2, [pc, #92]	@ (8004f00 <vPortValidateInterruptPriority+0x70>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004eac:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <vPortValidateInterruptPriority+0x74>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	7afa      	ldrb	r2, [r7, #11]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d20b      	bcs.n	8004ece <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	607b      	str	r3, [r7, #4]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ece:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <vPortValidateInterruptPriority+0x78>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <vPortValidateInterruptPriority+0x7c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d90b      	bls.n	8004ef6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	603b      	str	r3, [r7, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <vPortValidateInterruptPriority+0x62>
	}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	e000e3f0 	.word	0xe000e3f0
 8004f04:	20000e14 	.word	0x20000e14
 8004f08:	e000ed0c 	.word	0xe000ed0c
 8004f0c:	20000e18 	.word	0x20000e18

08004f10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f1c:	f7fe fd0e 	bl	800393c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f20:	4b5a      	ldr	r3, [pc, #360]	@ (800508c <pvPortMalloc+0x17c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f28:	f000 f916 	bl	8005158 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f2c:	4b58      	ldr	r3, [pc, #352]	@ (8005090 <pvPortMalloc+0x180>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 8090 	bne.w	800505a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01e      	beq.n	8004f7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f40:	2208      	movs	r2, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d015      	beq.n	8004f7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f023 0307 	bic.w	r3, r3, #7
 8004f58:	3308      	adds	r3, #8
 8004f5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <pvPortMalloc+0x6e>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	617b      	str	r3, [r7, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	e7fd      	b.n	8004f7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d06a      	beq.n	800505a <pvPortMalloc+0x14a>
 8004f84:	4b43      	ldr	r3, [pc, #268]	@ (8005094 <pvPortMalloc+0x184>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d865      	bhi.n	800505a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f8e:	4b42      	ldr	r3, [pc, #264]	@ (8005098 <pvPortMalloc+0x188>)
 8004f90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f92:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <pvPortMalloc+0x188>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f98:	e004      	b.n	8004fa4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d903      	bls.n	8004fb6 <pvPortMalloc+0xa6>
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f1      	bne.n	8004f9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fb6:	4b35      	ldr	r3, [pc, #212]	@ (800508c <pvPortMalloc+0x17c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d04c      	beq.n	800505a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad2      	subs	r2, r2, r3
 8004fda:	2308      	movs	r3, #8
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d920      	bls.n	8005024 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <pvPortMalloc+0xfc>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	613b      	str	r3, [r7, #16]
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800501e:	69b8      	ldr	r0, [r7, #24]
 8005020:	f000 f8fc 	bl	800521c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005024:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <pvPortMalloc+0x184>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	4a19      	ldr	r2, [pc, #100]	@ (8005094 <pvPortMalloc+0x184>)
 8005030:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005032:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <pvPortMalloc+0x184>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b19      	ldr	r3, [pc, #100]	@ (800509c <pvPortMalloc+0x18c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d203      	bcs.n	8005046 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800503e:	4b15      	ldr	r3, [pc, #84]	@ (8005094 <pvPortMalloc+0x184>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a16      	ldr	r2, [pc, #88]	@ (800509c <pvPortMalloc+0x18c>)
 8005044:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <pvPortMalloc+0x180>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	431a      	orrs	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800505a:	f7fe fc7d 	bl	8003958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <pvPortMalloc+0x170>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60fb      	str	r3, [r7, #12]
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <pvPortMalloc+0x16c>
	return pvReturn;
 8005080:	69fb      	ldr	r3, [r7, #28]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3728      	adds	r7, #40	@ 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20001a24 	.word	0x20001a24
 8005090:	20001a30 	.word	0x20001a30
 8005094:	20001a28 	.word	0x20001a28
 8005098:	20001a1c 	.word	0x20001a1c
 800509c:	20001a2c 	.word	0x20001a2c

080050a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04a      	beq.n	8005148 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050b2:	2308      	movs	r3, #8
 80050b4:	425b      	negs	r3, r3
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b22      	ldr	r3, [pc, #136]	@ (8005150 <vPortFree+0xb0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <vPortFree+0x46>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <vPortFree+0x66>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60bb      	str	r3, [r7, #8]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <vPortFree+0xb0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d115      	bne.n	8005148 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <vPortFree+0xb0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	43db      	mvns	r3, r3
 8005126:	401a      	ands	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800512c:	f7fe fc06 	bl	800393c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <vPortFree+0xb4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4413      	add	r3, r2
 800513a:	4a06      	ldr	r2, [pc, #24]	@ (8005154 <vPortFree+0xb4>)
 800513c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513e:	6938      	ldr	r0, [r7, #16]
 8005140:	f000 f86c 	bl	800521c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005144:	f7fe fc08 	bl	8003958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005148:	bf00      	nop
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20001a30 	.word	0x20001a30
 8005154:	20001a28 	.word	0x20001a28

08005158 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800515e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005162:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005164:	4b27      	ldr	r3, [pc, #156]	@ (8005204 <prvHeapInit+0xac>)
 8005166:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3307      	adds	r3, #7
 8005176:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0307 	bic.w	r3, r3, #7
 800517e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	4a1f      	ldr	r2, [pc, #124]	@ (8005204 <prvHeapInit+0xac>)
 8005188:	4413      	add	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005190:	4a1d      	ldr	r2, [pc, #116]	@ (8005208 <prvHeapInit+0xb0>)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005196:	4b1c      	ldr	r3, [pc, #112]	@ (8005208 <prvHeapInit+0xb0>)
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a4:	2208      	movs	r2, #8
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0307 	bic.w	r3, r3, #7
 80051b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a15      	ldr	r2, [pc, #84]	@ (800520c <prvHeapInit+0xb4>)
 80051b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051ba:	4b14      	ldr	r3, [pc, #80]	@ (800520c <prvHeapInit+0xb4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <prvHeapInit+0xb4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	1ad2      	subs	r2, r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d8:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <prvHeapInit+0xb4>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005210 <prvHeapInit+0xb8>)
 80051e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <prvHeapInit+0xbc>)
 80051ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051f0:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <prvHeapInit+0xc0>)
 80051f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000e1c 	.word	0x20000e1c
 8005208:	20001a1c 	.word	0x20001a1c
 800520c:	20001a24 	.word	0x20001a24
 8005210:	20001a2c 	.word	0x20001a2c
 8005214:	20001a28 	.word	0x20001a28
 8005218:	20001a30 	.word	0x20001a30

0800521c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005224:	4b27      	ldr	r3, [pc, #156]	@ (80052c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e002      	b.n	8005230 <prvInsertBlockIntoFreeList+0x14>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d8f7      	bhi.n	800522a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4413      	add	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	d108      	bne.n	800525e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d118      	bne.n	80052a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <prvInsertBlockIntoFreeList+0xac>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d00d      	beq.n	800529a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	441a      	add	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e008      	b.n	80052ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <prvInsertBlockIntoFreeList+0xac>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e003      	b.n	80052ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d002      	beq.n	80052ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	20001a1c 	.word	0x20001a1c
 80052c8:	20001a24 	.word	0x20001a24

080052cc <memset>:
 80052cc:	4603      	mov	r3, r0
 80052ce:	4402      	add	r2, r0
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d100      	bne.n	80052d6 <memset+0xa>
 80052d4:	4770      	bx	lr
 80052d6:	f803 1b01 	strb.w	r1, [r3], #1
 80052da:	e7f9      	b.n	80052d0 <memset+0x4>

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	2600      	movs	r6, #0
 80052e0:	4d0c      	ldr	r5, [pc, #48]	@ (8005314 <__libc_init_array+0x38>)
 80052e2:	4c0d      	ldr	r4, [pc, #52]	@ (8005318 <__libc_init_array+0x3c>)
 80052e4:	1b64      	subs	r4, r4, r5
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	f000 f828 	bl	8005340 <_init>
 80052f0:	2600      	movs	r6, #0
 80052f2:	4d0a      	ldr	r5, [pc, #40]	@ (800531c <__libc_init_array+0x40>)
 80052f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005320 <__libc_init_array+0x44>)
 80052f6:	1b64      	subs	r4, r4, r5
 80052f8:	10a4      	asrs	r4, r4, #2
 80052fa:	42a6      	cmp	r6, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	f855 3b04 	ldr.w	r3, [r5], #4
 8005304:	4798      	blx	r3
 8005306:	3601      	adds	r6, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	f855 3b04 	ldr.w	r3, [r5], #4
 800530e:	4798      	blx	r3
 8005310:	3601      	adds	r6, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	08005528 	.word	0x08005528
 8005318:	08005528 	.word	0x08005528
 800531c:	08005528 	.word	0x08005528
 8005320:	0800552c 	.word	0x0800552c

08005324 <memcpy>:
 8005324:	440a      	add	r2, r1
 8005326:	4291      	cmp	r1, r2
 8005328:	f100 33ff 	add.w	r3, r0, #4294967295
 800532c:	d100      	bne.n	8005330 <memcpy+0xc>
 800532e:	4770      	bx	lr
 8005330:	b510      	push	{r4, lr}
 8005332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005336:	4291      	cmp	r1, r2
 8005338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800533c:	d1f9      	bne.n	8005332 <memcpy+0xe>
 800533e:	bd10      	pop	{r4, pc}

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
