
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005318  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  080055f0  080055f0  000065f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f8  080055f8  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f8  080055f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055fc  080055fc  000065fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005600  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a60  2000001c  0800561c  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a7c  0800561c  00007a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156e7  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003307  00000000  00000000  0001c72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0001fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee3  00000000  00000000  00020d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001995c  00000000  00000000  00021c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164fd  00000000  00000000  0003b597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d53  00000000  00000000  00051a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e57e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  000e582c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ea798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005410 	.word	0x08005410

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08005410 	.word	0x08005410

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PasswordSemaphore */
  PasswordSemaphoreHandle = osSemaphoreNew(1, 0, &PasswordSemaphore_attributes);
 8000168:	4a14      	ldr	r2, [pc, #80]	@ (80001bc <MX_FREERTOS_Init+0x58>)
 800016a:	2100      	movs	r1, #0
 800016c:	2001      	movs	r0, #1
 800016e:	f002 f8f5 	bl	800235c <osSemaphoreNew>
 8000172:	4603      	mov	r3, r0
 8000174:	4a12      	ldr	r2, [pc, #72]	@ (80001c0 <MX_FREERTOS_Init+0x5c>)
 8000176:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of PasswordQueue */
  PasswordQueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &PasswordQueue_attributes);
 8000178:	4a12      	ldr	r2, [pc, #72]	@ (80001c4 <MX_FREERTOS_Init+0x60>)
 800017a:	2101      	movs	r1, #1
 800017c:	200a      	movs	r0, #10
 800017e:	f002 f989 	bl	8002494 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a10      	ldr	r2, [pc, #64]	@ (80001c8 <MX_FREERTOS_Init+0x64>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Confirmation */
  ConfirmationHandle = osThreadNew(Confirmation_T, NULL, &Confirmation_attributes);
 8000188:	4a10      	ldr	r2, [pc, #64]	@ (80001cc <MX_FREERTOS_Init+0x68>)
 800018a:	2100      	movs	r1, #0
 800018c:	4810      	ldr	r0, [pc, #64]	@ (80001d0 <MX_FREERTOS_Init+0x6c>)
 800018e:	f002 f80d 	bl	80021ac <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0f      	ldr	r2, [pc, #60]	@ (80001d4 <MX_FREERTOS_Init+0x70>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(Display_T, NULL, &Display_attributes);
 8000198:	4a0f      	ldr	r2, [pc, #60]	@ (80001d8 <MX_FREERTOS_Init+0x74>)
 800019a:	2100      	movs	r1, #0
 800019c:	480f      	ldr	r0, [pc, #60]	@ (80001dc <MX_FREERTOS_Init+0x78>)
 800019e:	f002 f805 	bl	80021ac <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a0e      	ldr	r2, [pc, #56]	@ (80001e0 <MX_FREERTOS_Init+0x7c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of Input */
  InputHandle = osThreadNew(Input_T, NULL, &Input_attributes);
 80001a8:	4a0e      	ldr	r2, [pc, #56]	@ (80001e4 <MX_FREERTOS_Init+0x80>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	480e      	ldr	r0, [pc, #56]	@ (80001e8 <MX_FREERTOS_Init+0x84>)
 80001ae:	f001 fffd 	bl	80021ac <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a0d      	ldr	r2, [pc, #52]	@ (80001ec <MX_FREERTOS_Init+0x88>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	080055b4 	.word	0x080055b4
 80001c0:	20000054 	.word	0x20000054
 80001c4:	0800559c 	.word	0x0800559c
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08005530 	.word	0x08005530
 80001d0:	080001f1 	.word	0x080001f1
 80001d4:	20000044 	.word	0x20000044
 80001d8:	08005554 	.word	0x08005554
 80001dc:	080002b1 	.word	0x080002b1
 80001e0:	20000048 	.word	0x20000048
 80001e4:	08005578 	.word	0x08005578
 80001e8:	080003fd 	.word	0x080003fd
 80001ec:	2000004c 	.word	0x2000004c

080001f0 <Confirmation_T>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Confirmation_T */
void Confirmation_T(void *argument)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Confirmation_T */
  uint8_t reenterCount = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(PasswordSemaphoreHandle, 1000);
 80001fc:	4b23      	ldr	r3, [pc, #140]	@ (800028c <Confirmation_T+0x9c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fee3 	bl	8002fd0 <xQueueSemaphoreTake>
  // HAL_UART_Transmit(&huart1, (uint8_t *)"check ok\r\n", 11, 200);
  /* Infinite loop */
  for (;;)
  {
    xSemaphoreTake(PasswordSemaphoreHandle, HAL_MAX_DELAY);
 800020a:	4b20      	ldr	r3, [pc, #128]	@ (800028c <Confirmation_T+0x9c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f04f 31ff 	mov.w	r1, #4294967295
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fedc 	bl	8002fd0 <xQueueSemaphoreTake>
    if (strcmp((char *)Password_Ch, (char *)Password_In) == 0)
 8000218:	491d      	ldr	r1, [pc, #116]	@ (8000290 <Confirmation_T+0xa0>)
 800021a:	481e      	ldr	r0, [pc, #120]	@ (8000294 <Confirmation_T+0xa4>)
 800021c:	f7ff ff98 	bl	8000150 <strcmp>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d10f      	bne.n	8000246 <Confirmation_T+0x56>
    {
      HAL_UART_Transmit(&huart1, (uint8_t *)"Access granted\t LED ON \r\n", 27, 300);
 8000226:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800022a:	221b      	movs	r2, #27
 800022c:	491a      	ldr	r1, [pc, #104]	@ (8000298 <Confirmation_T+0xa8>)
 800022e:	481b      	ldr	r0, [pc, #108]	@ (800029c <Confirmation_T+0xac>)
 8000230:	f001 fd44 	bl	8001cbc <HAL_UART_Transmit>
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800023a:	4819      	ldr	r0, [pc, #100]	@ (80002a0 <Confirmation_T+0xb0>)
 800023c:	f000 fe4c 	bl	8000ed8 <HAL_GPIO_WritePin>
      reenterCount = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]
 8000244:	e7e1      	b.n	800020a <Confirmation_T+0x1a>
    }
    else
    {
      if(BlockFlag == 0)
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <Confirmation_T+0xb4>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1dd      	bne.n	800020a <Confirmation_T+0x1a>
      {
        reenterCount++;
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	3301      	adds	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, (uint8_t *)"Access denied\t LED OFF\r\n", 24, 250);
 8000254:	23fa      	movs	r3, #250	@ 0xfa
 8000256:	2218      	movs	r2, #24
 8000258:	4913      	ldr	r1, [pc, #76]	@ (80002a8 <Confirmation_T+0xb8>)
 800025a:	4810      	ldr	r0, [pc, #64]	@ (800029c <Confirmation_T+0xac>)
 800025c:	f001 fd2e 	bl	8001cbc <HAL_UART_Transmit>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000266:	480e      	ldr	r0, [pc, #56]	@ (80002a0 <Confirmation_T+0xb0>)
 8000268:	f000 fe36 	bl	8000ed8 <HAL_GPIO_WritePin>
        if (reenterCount == BLOCKING_CHANCES)
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	2b04      	cmp	r3, #4
 8000270:	d1cb      	bne.n	800020a <Confirmation_T+0x1a>
        {
          HAL_UART_Transmit(&huart1, (uint8_t *)"you are blocked\r\n", 18, 300);
 8000272:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000276:	2212      	movs	r2, #18
 8000278:	490c      	ldr	r1, [pc, #48]	@ (80002ac <Confirmation_T+0xbc>)
 800027a:	4808      	ldr	r0, [pc, #32]	@ (800029c <Confirmation_T+0xac>)
 800027c:	f001 fd1e 	bl	8001cbc <HAL_UART_Transmit>
          BlockFlag = 1;
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <Confirmation_T+0xb4>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
          reenterCount =0;
 8000286:	2300      	movs	r3, #0
 8000288:	73fb      	strb	r3, [r7, #15]
    xSemaphoreTake(PasswordSemaphoreHandle, HAL_MAX_DELAY);
 800028a:	e7be      	b.n	800020a <Confirmation_T+0x1a>
 800028c:	20000054 	.word	0x20000054
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	0800546c 	.word	0x0800546c
 800029c:	200000a0 	.word	0x200000a0
 80002a0:	40011000 	.word	0x40011000
 80002a4:	20000042 	.word	0x20000042
 80002a8:	08005488 	.word	0x08005488
 80002ac:	080054a4 	.word	0x080054a4

080002b0 <Display_T>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Display_T */
void Display_T(void *argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_T */
  DisplayState_t CurrentState = welcome;
 80002b8:	2300      	movs	r3, #0
 80002ba:	75fb      	strb	r3, [r7, #23]
  osStatus queueState = pdFALSE;
 80002bc:	2300      	movs	r3, #0
 80002be:	613b      	str	r3, [r7, #16]
  uint8_t inputKey = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]
  uint8_t passwordIndex = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	75bb      	strb	r3, [r7, #22]
  // HAL_UART_Transmit(&huart1, (uint8_t *)"Display start\r\n", 16, 200);
  /* Infinite loop */
  for (;;)
  {
    queueState = xQueueReceive(PasswordQueueHandle, &inputKey, 5000);
 80002c8:	4b43      	ldr	r3, [pc, #268]	@ (80003d8 <Display_T+0x128>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f107 010f 	add.w	r1, r7, #15
 80002d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd99 	bl	8002e0c <xQueueReceive>
 80002da:	6138      	str	r0, [r7, #16]
    if (queueState == pdPASS)
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d153      	bne.n	800038a <Display_T+0xda>
    {
      switch (CurrentState)
 80002e2:	7dfb      	ldrb	r3, [r7, #23]
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d035      	beq.n	8000354 <Display_T+0xa4>
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	dc6c      	bgt.n	80003c6 <Display_T+0x116>
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <Display_T+0x46>
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d00c      	beq.n	800030e <Display_T+0x5e>
        {
         HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);       
        }
        break;
      default:
        break;
 80002f4:	e067      	b.n	80003c6 <Display_T+0x116>
        if (inputKey == '#')
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	2b23      	cmp	r3, #35	@ 0x23
 80002fa:	d166      	bne.n	80003ca <Display_T+0x11a>
          CurrentState = receive;
 80002fc:	2301      	movs	r3, #1
 80002fe:	75fb      	strb	r3, [r7, #23]
          HAL_UART_Transmit(&huart1, (void *)"\r\nPassword:\t", 13, 200);
 8000300:	23c8      	movs	r3, #200	@ 0xc8
 8000302:	220d      	movs	r2, #13
 8000304:	4935      	ldr	r1, [pc, #212]	@ (80003dc <Display_T+0x12c>)
 8000306:	4836      	ldr	r0, [pc, #216]	@ (80003e0 <Display_T+0x130>)
 8000308:	f001 fcd8 	bl	8001cbc <HAL_UART_Transmit>
        break;
 800030c:	e05d      	b.n	80003ca <Display_T+0x11a>
        if (inputKey == '#')
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	2b23      	cmp	r3, #35	@ 0x23
 8000312:	d102      	bne.n	800031a <Display_T+0x6a>
          CurrentState = submit;
 8000314:	2302      	movs	r3, #2
 8000316:	75fb      	strb	r3, [r7, #23]
        break;
 8000318:	e059      	b.n	80003ce <Display_T+0x11e>
          if (passwordIndex < 9)
 800031a:	7dbb      	ldrb	r3, [r7, #22]
 800031c:	2b08      	cmp	r3, #8
 800031e:	d856      	bhi.n	80003ce <Display_T+0x11e>
            Password_In[passwordIndex] = inputKey;
 8000320:	7dbb      	ldrb	r3, [r7, #22]
 8000322:	7bf9      	ldrb	r1, [r7, #15]
 8000324:	4a2f      	ldr	r2, [pc, #188]	@ (80003e4 <Display_T+0x134>)
 8000326:	54d1      	strb	r1, [r2, r3]
            passwordIndex++;
 8000328:	7dbb      	ldrb	r3, [r7, #22]
 800032a:	3301      	adds	r3, #1
 800032c:	75bb      	strb	r3, [r7, #22]
            HAL_UART_Transmit(&huart1, (uint8_t *)"*", 2, 100);
 800032e:	2364      	movs	r3, #100	@ 0x64
 8000330:	2202      	movs	r2, #2
 8000332:	492d      	ldr	r1, [pc, #180]	@ (80003e8 <Display_T+0x138>)
 8000334:	482a      	ldr	r0, [pc, #168]	@ (80003e0 <Display_T+0x130>)
 8000336:	f001 fcc1 	bl	8001cbc <HAL_UART_Transmit>
            if(passwordIndex == 9)
 800033a:	7dbb      	ldrb	r3, [r7, #22]
 800033c:	2b09      	cmp	r3, #9
 800033e:	d146      	bne.n	80003ce <Display_T+0x11e>
              CurrentState = submit;
 8000340:	2302      	movs	r3, #2
 8000342:	75fb      	strb	r3, [r7, #23]
              HAL_UART_Transmit(&huart1, (uint8_t *)"\r\nPress # to confirm \r\n", 24, 500);
 8000344:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000348:	2218      	movs	r2, #24
 800034a:	4928      	ldr	r1, [pc, #160]	@ (80003ec <Display_T+0x13c>)
 800034c:	4824      	ldr	r0, [pc, #144]	@ (80003e0 <Display_T+0x130>)
 800034e:	f001 fcb5 	bl	8001cbc <HAL_UART_Transmit>
        break;
 8000352:	e03c      	b.n	80003ce <Display_T+0x11e>
        Password_In[passwordIndex] = '\0'; /*add null to the string*/
 8000354:	7dbb      	ldrb	r3, [r7, #22]
 8000356:	4a23      	ldr	r2, [pc, #140]	@ (80003e4 <Display_T+0x134>)
 8000358:	2100      	movs	r1, #0
 800035a:	54d1      	strb	r1, [r2, r3]
        passwordIndex = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	75bb      	strb	r3, [r7, #22]
        CurrentState = welcome;
 8000360:	2300      	movs	r3, #0
 8000362:	75fb      	strb	r3, [r7, #23]
        xSemaphoreGive(PasswordSemaphoreHandle);
 8000364:	4b22      	ldr	r3, [pc, #136]	@ (80003f0 <Display_T+0x140>)
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	2300      	movs	r3, #0
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fbaf 	bl	8002ad0 <xQueueGenericSend>
        if(BlockFlag == 0)
 8000372:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <Display_T+0x144>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d12b      	bne.n	80003d2 <Display_T+0x122>
         HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);       
 800037a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800037e:	2232      	movs	r2, #50	@ 0x32
 8000380:	491d      	ldr	r1, [pc, #116]	@ (80003f8 <Display_T+0x148>)
 8000382:	4817      	ldr	r0, [pc, #92]	@ (80003e0 <Display_T+0x130>)
 8000384:	f001 fc9a 	bl	8001cbc <HAL_UART_Transmit>
        break;
 8000388:	e023      	b.n	80003d2 <Display_T+0x122>
      }
    }
    else if (passwordIndex > 0)
 800038a:	7dbb      	ldrb	r3, [r7, #22]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d09b      	beq.n	80002c8 <Display_T+0x18>
    {
      /*time out*/
        Password_In[passwordIndex] = '\0'; /*add null to the string*/
 8000390:	7dbb      	ldrb	r3, [r7, #22]
 8000392:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <Display_T+0x134>)
 8000394:	2100      	movs	r1, #0
 8000396:	54d1      	strb	r1, [r2, r3]
        passwordIndex = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	75bb      	strb	r3, [r7, #22]
        CurrentState = welcome;
 800039c:	2300      	movs	r3, #0
 800039e:	75fb      	strb	r3, [r7, #23]
        /*release the semaphore to fire the confirmation task*/
        xSemaphoreGive(PasswordSemaphoreHandle);
 80003a0:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <Display_T+0x140>)
 80003a2:	6818      	ldr	r0, [r3, #0]
 80003a4:	2300      	movs	r3, #0
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	f002 fb91 	bl	8002ad0 <xQueueGenericSend>
        if(BlockFlag == 0)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <Display_T+0x144>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d188      	bne.n	80002c8 <Display_T+0x18>
        {
         HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);       
 80003b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003ba:	2232      	movs	r2, #50	@ 0x32
 80003bc:	490e      	ldr	r1, [pc, #56]	@ (80003f8 <Display_T+0x148>)
 80003be:	4808      	ldr	r0, [pc, #32]	@ (80003e0 <Display_T+0x130>)
 80003c0:	f001 fc7c 	bl	8001cbc <HAL_UART_Transmit>
 80003c4:	e780      	b.n	80002c8 <Display_T+0x18>
        break;
 80003c6:	bf00      	nop
 80003c8:	e77e      	b.n	80002c8 <Display_T+0x18>
        break;
 80003ca:	bf00      	nop
 80003cc:	e77c      	b.n	80002c8 <Display_T+0x18>
        break;
 80003ce:	bf00      	nop
 80003d0:	e77a      	b.n	80002c8 <Display_T+0x18>
        break;
 80003d2:	bf00      	nop
    queueState = xQueueReceive(PasswordQueueHandle, &inputKey, 5000);
 80003d4:	e778      	b.n	80002c8 <Display_T+0x18>
 80003d6:	bf00      	nop
 80003d8:	20000050 	.word	0x20000050
 80003dc:	080054b8 	.word	0x080054b8
 80003e0:	200000a0 	.word	0x200000a0
 80003e4:	20000038 	.word	0x20000038
 80003e8:	080054c8 	.word	0x080054c8
 80003ec:	080054cc 	.word	0x080054cc
 80003f0:	20000054 	.word	0x20000054
 80003f4:	20000042 	.word	0x20000042
 80003f8:	080054e4 	.word	0x080054e4

080003fc <Input_T>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Input_T */
void Input_T(void *argument)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Input_T */
  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,SET);
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040a:	4819      	ldr	r0, [pc, #100]	@ (8000470 <Input_T+0x74>)
 800040c:	f000 fd64 	bl	8000ed8 <HAL_GPIO_WritePin>
  uint8_t inputKey = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	73bb      	strb	r3, [r7, #14]
  uint8_t uartReturnState = HAL_BUSY;
 8000414:	2302      	movs	r3, #2
 8000416:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n*** welcome *** press # to enter the password\r\n", 50, 500);
 8000418:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800041c:	2232      	movs	r2, #50	@ 0x32
 800041e:	4915      	ldr	r1, [pc, #84]	@ (8000474 <Input_T+0x78>)
 8000420:	4815      	ldr	r0, [pc, #84]	@ (8000478 <Input_T+0x7c>)
 8000422:	f001 fc4b 	bl	8001cbc <HAL_UART_Transmit>
  /* Infinite loop */
  for (;;)
  {
    uartReturnState = HAL_UART_Receive(&huart2, &inputKey, 1, 5000);
 8000426:	f107 010e 	add.w	r1, r7, #14
 800042a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800042e:	2201      	movs	r2, #1
 8000430:	4812      	ldr	r0, [pc, #72]	@ (800047c <Input_T+0x80>)
 8000432:	f001 fcc6 	bl	8001dc2 <HAL_UART_Receive>
 8000436:	4603      	mov	r3, r0
 8000438:	73fb      	strb	r3, [r7, #15]
    if( uartReturnState == HAL_OK   )
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f2      	bne.n	8000426 <Input_T+0x2a>
    {
      if (BlockFlag == 0)
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <Input_T+0x84>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d10b      	bne.n	8000460 <Input_T+0x64>
      {
        xQueueSend(PasswordQueueHandle, (void *)&inputKey, 0); /*message send to queue*/
 8000448:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <Input_T+0x88>)
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	f107 010e 	add.w	r1, r7, #14
 8000450:	2300      	movs	r3, #0
 8000452:	2200      	movs	r2, #0
 8000454:	f002 fb3c 	bl	8002ad0 <xQueueGenericSend>
        osDelay(50);                                           /*the 50 ms is min value for human i/p*/
 8000458:	2032      	movs	r0, #50	@ 0x32
 800045a:	f001 ff51 	bl	8002300 <osDelay>
 800045e:	e7e2      	b.n	8000426 <Input_T+0x2a>
      }
      else
      {
        HAL_UART_Transmit(&huart1, (uint8_t *)"you are blocked\r\n", 18, 200);
 8000460:	23c8      	movs	r3, #200	@ 0xc8
 8000462:	2212      	movs	r2, #18
 8000464:	4908      	ldr	r1, [pc, #32]	@ (8000488 <Input_T+0x8c>)
 8000466:	4804      	ldr	r0, [pc, #16]	@ (8000478 <Input_T+0x7c>)
 8000468:	f001 fc28 	bl	8001cbc <HAL_UART_Transmit>
    uartReturnState = HAL_UART_Receive(&huart2, &inputKey, 1, 5000);
 800046c:	e7db      	b.n	8000426 <Input_T+0x2a>
 800046e:	bf00      	nop
 8000470:	40011000 	.word	0x40011000
 8000474:	080054e4 	.word	0x080054e4
 8000478:	200000a0 	.word	0x200000a0
 800047c:	200000e8 	.word	0x200000e8
 8000480:	20000042 	.word	0x20000042
 8000484:	20000050 	.word	0x20000050
 8000488:	080054a4 	.word	0x080054a4

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	4b1e      	ldr	r3, [pc, #120]	@ (800051c <MX_GPIO_Init+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a1d      	ldr	r2, [pc, #116]	@ (800051c <MX_GPIO_Init+0x90>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <MX_GPIO_Init+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0310 	and.w	r3, r3, #16
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b8:	4b18      	ldr	r3, [pc, #96]	@ (800051c <MX_GPIO_Init+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a17      	ldr	r2, [pc, #92]	@ (800051c <MX_GPIO_Init+0x90>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b15      	ldr	r3, [pc, #84]	@ (800051c <MX_GPIO_Init+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0320 	and.w	r3, r3, #32
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b12      	ldr	r3, [pc, #72]	@ (800051c <MX_GPIO_Init+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a11      	ldr	r2, [pc, #68]	@ (800051c <MX_GPIO_Init+0x90>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <MX_GPIO_Init+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ee:	480c      	ldr	r0, [pc, #48]	@ (8000520 <MX_GPIO_Init+0x94>)
 80004f0:	f000 fcf2 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4804      	ldr	r0, [pc, #16]	@ (8000520 <MX_GPIO_Init+0x94>)
 800050e:	f000 fb5f 	bl	8000bd0 <HAL_GPIO_Init>

}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40011000 	.word	0x40011000

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fa40 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f80e 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f7ff ffac 	bl	800048c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000534:	f000 f93c 	bl	80007b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f964 	bl	8000804 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053c:	f001 fdd0 	bl	80020e0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000540:	f7ff fe10 	bl	8000164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000544:	f001 fdfe 	bl	8002144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x24>

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	@ 0x40
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2228      	movs	r2, #40	@ 0x28
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 ff1e 	bl	800539c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000572:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000588:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fcb7 	bl	8000f08 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a0:	f000 f82c 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 ff24 	bl	800140c <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ca:	f000 f817 	bl	80005fc <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3740      	adds	r7, #64	@ 0x40
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ea:	f000 f9f5 	bl	80009d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40012c00 	.word	0x40012c00

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <HAL_MspInit+0x68>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <HAL_MspInit+0x68>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <HAL_MspInit+0x68>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_MspInit+0x68>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <HAL_MspInit+0x68>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_MspInit+0x68>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	210f      	movs	r1, #15
 8000642:	f06f 0001 	mvn.w	r0, #1
 8000646:	f000 fa98 	bl	8000b7a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_MspInit+0x6c>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <HAL_MspInit+0x6c>)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40010000 	.word	0x40010000

08000678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800068e:	4b2e      	ldr	r3, [pc, #184]	@ (8000748 <HAL_InitTick+0xd0>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a2d      	ldr	r2, [pc, #180]	@ (8000748 <HAL_InitTick+0xd0>)
 8000694:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <HAL_InitTick+0xd0>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a6:	f107 020c 	add.w	r2, r7, #12
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f81b 	bl	80016ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006b6:	f001 f805 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 80006ba:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006be:	4a23      	ldr	r2, [pc, #140]	@ (800074c <HAL_InitTick+0xd4>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	0c9b      	lsrs	r3, r3, #18
 80006c6:	3b01      	subs	r3, #1
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006ca:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <HAL_InitTick+0xd8>)
 80006cc:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <HAL_InitTick+0xdc>)
 80006ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <HAL_InitTick+0xd8>)
 80006d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006d6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000750 <HAL_InitTick+0xd8>)
 80006da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006dc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <HAL_InitTick+0xd8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <HAL_InitTick+0xd8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <HAL_InitTick+0xd8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006f0:	4817      	ldr	r0, [pc, #92]	@ (8000750 <HAL_InitTick+0xd8>)
 80006f2:	f001 f849 	bl	8001788 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80006fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000700:	2b00      	cmp	r3, #0
 8000702:	d11b      	bne.n	800073c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <HAL_InitTick+0xd8>)
 8000706:	f001 f897 	bl	8001838 <HAL_TIM_Base_Start_IT>
 800070a:	4603      	mov	r3, r0
 800070c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000714:	2b00      	cmp	r3, #0
 8000716:	d111      	bne.n	800073c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000718:	2019      	movs	r0, #25
 800071a:	f000 fa4a 	bl	8000bb2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d808      	bhi.n	8000736 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2019      	movs	r0, #25
 800072a:	f000 fa26 	bl	8000b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <HAL_InitTick+0xe0>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	e002      	b.n	800073c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800073c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000740:	4618      	mov	r0, r3
 8000742:	3730      	adds	r7, #48	@ 0x30
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	431bde83 	.word	0x431bde83
 8000750:	20000058 	.word	0x20000058
 8000754:	40012c00 	.word	0x40012c00
 8000758:	20000010 	.word	0x20000010

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <NMI_Handler+0x4>

08000764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <MemManage_Handler+0x4>

08000774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <UsageFault_Handler+0x4>

08000784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000794:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <TIM1_UP_IRQHandler+0x10>)
 8000796:	f001 f8a1 	bl	80018dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000058 	.word	0x20000058

080007a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fa18 	bl	8001c1c <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f7ff ff03 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000a0 	.word	0x200000a0
 8000800:	40013800 	.word	0x40013800

08000804 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f001 f9ee 	bl	8001c1c <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f7ff fed9 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e8 	.word	0x200000e8
 8000854:	40004400 	.word	0x40004400

08000858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a37      	ldr	r2, [pc, #220]	@ (8000950 <HAL_UART_MspInit+0xf8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d132      	bne.n	80008de <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000878:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a35      	ldr	r2, [pc, #212]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	4619      	mov	r1, r3
 80008bc:	4826      	ldr	r0, [pc, #152]	@ (8000958 <HAL_UART_MspInit+0x100>)
 80008be:	f000 f987 	bl	8000bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0318 	add.w	r3, r7, #24
 80008d4:	4619      	mov	r1, r3
 80008d6:	4820      	ldr	r0, [pc, #128]	@ (8000958 <HAL_UART_MspInit+0x100>)
 80008d8:	f000 f97a 	bl	8000bd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008dc:	e034      	b.n	8000948 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <HAL_UART_MspInit+0x104>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d12f      	bne.n	8000948 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 80008ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f2:	61d3      	str	r3, [r2, #28]
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_UART_MspInit+0xfc>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000918:	2304      	movs	r3, #4
 800091a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	4619      	mov	r1, r3
 800092a:	480b      	ldr	r0, [pc, #44]	@ (8000958 <HAL_UART_MspInit+0x100>)
 800092c:	f000 f950 	bl	8000bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000930:	2308      	movs	r3, #8
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <HAL_UART_MspInit+0x100>)
 8000944:	f000 f944 	bl	8000bd0 <HAL_GPIO_Init>
}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40013800 	.word	0x40013800
 8000954:	40021000 	.word	0x40021000
 8000958:	40010800 	.word	0x40010800
 800095c:	40004400 	.word	0x40004400

08000960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000960:	f7ff ff20 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	@ (8000994 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000966:	490c      	ldr	r1, [pc, #48]	@ (8000998 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000968:	4a0c      	ldr	r2, [pc, #48]	@ (800099c <LoopFillZerobss+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a09      	ldr	r2, [pc, #36]	@ (80009a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800097c:	4c09      	ldr	r4, [pc, #36]	@ (80009a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f004 fd0f 	bl	80053ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff fdc9 	bl	8000524 <main>
  bx lr
 8000992:	4770      	bx	lr
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800099c:	08005600 	.word	0x08005600
  ldr r2, =_sbss
 80009a0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009a4:	20001a7c 	.word	0x20001a7c

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_Init+0x28>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	@ (80009d4 <HAL_Init+0x28>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f8d1 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	200f      	movs	r0, #15
 80009c4:	f7ff fe58 	bl	8000678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fe1e 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	@ (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000014 	.word	0x20000014
 80009f8:	20000130 	.word	0x20000130

080009fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	@ (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000130 	.word	0x20000130

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4906      	ldr	r1, [pc, #24]	@ (8000aa8 <__NVIC_EnableIRQ+0x34>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	@ (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	@ 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff4f 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff64 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ffb2 	bl	8000b00 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff81 	bl	8000aac <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff57 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b08b      	sub	sp, #44	@ 0x2c
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	e169      	b.n	8000eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be4:	2201      	movs	r2, #1
 8000be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	69fa      	ldr	r2, [r7, #28]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 8158 	bne.w	8000eb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a9a      	ldr	r2, [pc, #616]	@ (8000e70 <HAL_GPIO_Init+0x2a0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d05e      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c0c:	4a98      	ldr	r2, [pc, #608]	@ (8000e70 <HAL_GPIO_Init+0x2a0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d875      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c12:	4a98      	ldr	r2, [pc, #608]	@ (8000e74 <HAL_GPIO_Init+0x2a4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d058      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c18:	4a96      	ldr	r2, [pc, #600]	@ (8000e74 <HAL_GPIO_Init+0x2a4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d86f      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c1e:	4a96      	ldr	r2, [pc, #600]	@ (8000e78 <HAL_GPIO_Init+0x2a8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d052      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c24:	4a94      	ldr	r2, [pc, #592]	@ (8000e78 <HAL_GPIO_Init+0x2a8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d869      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c2a:	4a94      	ldr	r2, [pc, #592]	@ (8000e7c <HAL_GPIO_Init+0x2ac>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d04c      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c30:	4a92      	ldr	r2, [pc, #584]	@ (8000e7c <HAL_GPIO_Init+0x2ac>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d863      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c36:	4a92      	ldr	r2, [pc, #584]	@ (8000e80 <HAL_GPIO_Init+0x2b0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d046      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c3c:	4a90      	ldr	r2, [pc, #576]	@ (8000e80 <HAL_GPIO_Init+0x2b0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d85d      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d82a      	bhi.n	8000c9c <HAL_GPIO_Init+0xcc>
 8000c46:	2b12      	cmp	r3, #18
 8000c48:	d859      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <HAL_GPIO_Init+0x80>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000ccb 	.word	0x08000ccb
 8000c54:	08000ca5 	.word	0x08000ca5
 8000c58:	08000cb7 	.word	0x08000cb7
 8000c5c:	08000cf9 	.word	0x08000cf9
 8000c60:	08000cff 	.word	0x08000cff
 8000c64:	08000cff 	.word	0x08000cff
 8000c68:	08000cff 	.word	0x08000cff
 8000c6c:	08000cff 	.word	0x08000cff
 8000c70:	08000cff 	.word	0x08000cff
 8000c74:	08000cff 	.word	0x08000cff
 8000c78:	08000cff 	.word	0x08000cff
 8000c7c:	08000cff 	.word	0x08000cff
 8000c80:	08000cff 	.word	0x08000cff
 8000c84:	08000cff 	.word	0x08000cff
 8000c88:	08000cff 	.word	0x08000cff
 8000c8c:	08000cff 	.word	0x08000cff
 8000c90:	08000cff 	.word	0x08000cff
 8000c94:	08000cad 	.word	0x08000cad
 8000c98:	08000cc1 	.word	0x08000cc1
 8000c9c:	4a79      	ldr	r2, [pc, #484]	@ (8000e84 <HAL_GPIO_Init+0x2b4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ca2:	e02c      	b.n	8000cfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e029      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e024      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	3308      	adds	r3, #8
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e01f      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e01a      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e013      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69fa      	ldr	r2, [r7, #28]
 8000ce8:	611a      	str	r2, [r3, #16]
          break;
 8000cea:	e009      	b.n	8000d00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2308      	movs	r3, #8
 8000cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	615a      	str	r2, [r3, #20]
          break;
 8000cf6:	e003      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e000      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          break;
 8000cfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2bff      	cmp	r3, #255	@ 0xff
 8000d04:	d801      	bhi.n	8000d0a <HAL_GPIO_Init+0x13a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	e001      	b.n	8000d0e <HAL_GPIO_Init+0x13e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2bff      	cmp	r3, #255	@ 0xff
 8000d14:	d802      	bhi.n	8000d1c <HAL_GPIO_Init+0x14c>
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0x152>
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1e:	3b08      	subs	r3, #8
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	210f      	movs	r1, #15
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	6a39      	ldr	r1, [r7, #32]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 80b1 	beq.w	8000eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d50:	4b4d      	ldr	r3, [pc, #308]	@ (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a4c      	ldr	r2, [pc, #304]	@ (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d68:	4a48      	ldr	r2, [pc, #288]	@ (8000e8c <HAL_GPIO_Init+0x2bc>)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <HAL_GPIO_Init+0x2c0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d013      	beq.n	8000dbc <HAL_GPIO_Init+0x1ec>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3f      	ldr	r2, [pc, #252]	@ (8000e94 <HAL_GPIO_Init+0x2c4>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d00d      	beq.n	8000db8 <HAL_GPIO_Init+0x1e8>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e98 <HAL_GPIO_Init+0x2c8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d007      	beq.n	8000db4 <HAL_GPIO_Init+0x1e4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	@ (8000e9c <HAL_GPIO_Init+0x2cc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d101      	bne.n	8000db0 <HAL_GPIO_Init+0x1e0>
 8000dac:	2303      	movs	r3, #3
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dce:	492f      	ldr	r1, [pc, #188]	@ (8000e8c <HAL_GPIO_Init+0x2bc>)
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	492c      	ldr	r1, [pc, #176]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	608b      	str	r3, [r1, #8]
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4928      	ldr	r1, [pc, #160]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	4922      	ldr	r1, [pc, #136]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60cb      	str	r3, [r1, #12]
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	491e      	ldr	r1, [pc, #120]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4918      	ldr	r1, [pc, #96]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4914      	ldr	r1, [pc, #80]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d021      	beq.n	8000ea4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	490e      	ldr	r1, [pc, #56]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	e021      	b.n	8000eb2 <HAL_GPIO_Init+0x2e2>
 8000e6e:	bf00      	nop
 8000e70:	10320000 	.word	0x10320000
 8000e74:	10310000 	.word	0x10310000
 8000e78:	10220000 	.word	0x10220000
 8000e7c:	10210000 	.word	0x10210000
 8000e80:	10120000 	.word	0x10120000
 8000e84:	10110000 	.word	0x10110000
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	40011400 	.word	0x40011400
 8000ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4909      	ldr	r1, [pc, #36]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f47f ae8e 	bne.w	8000be4 <HAL_GPIO_Init+0x14>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	372c      	adds	r7, #44	@ 0x2c
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	611a      	str	r2, [r3, #16]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e272      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8087 	beq.w	8001036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f28:	4b92      	ldr	r3, [pc, #584]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d00c      	beq.n	8000f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f34:	4b8f      	ldr	r3, [pc, #572]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d112      	bne.n	8000f66 <HAL_RCC_OscConfig+0x5e>
 8000f40:	4b8c      	ldr	r3, [pc, #560]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f4c:	d10b      	bne.n	8000f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4e:	4b89      	ldr	r3, [pc, #548]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d06c      	beq.n	8001034 <HAL_RCC_OscConfig+0x12c>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d168      	bne.n	8001034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e24c      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x76>
 8000f70:	4b80      	ldr	r3, [pc, #512]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a7f      	ldr	r2, [pc, #508]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e02e      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x98>
 8000f86:	4b7b      	ldr	r3, [pc, #492]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b78      	ldr	r3, [pc, #480]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a77      	ldr	r2, [pc, #476]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e01d      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0xbc>
 8000faa:	4b72      	ldr	r3, [pc, #456]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a71      	ldr	r2, [pc, #452]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a6e      	ldr	r2, [pc, #440]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0xd4>
 8000fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b68      	ldr	r3, [pc, #416]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a67      	ldr	r2, [pc, #412]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fd0a 	bl	80009fc <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fd06 	bl	80009fc <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	@ 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e200      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0xe4>
 800100a:	e014      	b.n	8001036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fcf6 	bl	80009fc <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fcf2 	bl	80009fc <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	@ 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e1ec      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	4b53      	ldr	r3, [pc, #332]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x10c>
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d063      	beq.n	800110a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001042:	4b4c      	ldr	r3, [pc, #304]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800104e:	4b49      	ldr	r3, [pc, #292]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b08      	cmp	r3, #8
 8001058:	d11c      	bne.n	8001094 <HAL_RCC_OscConfig+0x18c>
 800105a:	4b46      	ldr	r3, [pc, #280]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d116      	bne.n	8001094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001066:	4b43      	ldr	r3, [pc, #268]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_OscConfig+0x176>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d001      	beq.n	800107e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e1c0      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4939      	ldr	r1, [pc, #228]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	e03a      	b.n	800110a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109c:	4b36      	ldr	r3, [pc, #216]	@ (8001178 <HAL_RCC_OscConfig+0x270>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fcab 	bl	80009fc <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010aa:	f7ff fca7 	bl	80009fc <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1a1      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4927      	ldr	r1, [pc, #156]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
 80010dc:	e015      	b.n	800110a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <HAL_RCC_OscConfig+0x270>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc8a 	bl	80009fc <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc86 	bl	80009fc <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e180      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d03a      	beq.n	800118c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d019      	beq.n	8001152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <HAL_RCC_OscConfig+0x274>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fc6a 	bl	80009fc <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112c:	f7ff fc66 	bl	80009fc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e160      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_RCC_OscConfig+0x26c>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 fafe 	bl	800174c <RCC_Delay>
 8001150:	e01c      	b.n	800118c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_RCC_OscConfig+0x274>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001158:	f7ff fc50 	bl	80009fc <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115e:	e00f      	b.n	8001180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fc4c 	bl	80009fc <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d908      	bls.n	8001180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e146      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	42420000 	.word	0x42420000
 800117c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001180:	4b92      	ldr	r3, [pc, #584]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1e9      	bne.n	8001160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80a6 	beq.w	80012e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119e:	4b8b      	ldr	r3, [pc, #556]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10d      	bne.n	80011c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b88      	ldr	r3, [pc, #544]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a87      	ldr	r2, [pc, #540]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b85      	ldr	r3, [pc, #532]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b82      	ldr	r3, [pc, #520]	@ (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d118      	bne.n	8001204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d2:	4b7f      	ldr	r3, [pc, #508]	@ (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a7e      	ldr	r2, [pc, #504]	@ (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011de:	f7ff fc0d 	bl	80009fc <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e6:	f7ff fc09 	bl	80009fc <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b64      	cmp	r3, #100	@ 0x64
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e103      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4b75      	ldr	r3, [pc, #468]	@ (80013d0 <HAL_RCC_OscConfig+0x4c8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x312>
 800120c:	4b6f      	ldr	r3, [pc, #444]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4a6e      	ldr	r2, [pc, #440]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6213      	str	r3, [r2, #32]
 8001218:	e02d      	b.n	8001276 <HAL_RCC_OscConfig+0x36e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x334>
 8001222:	4b6a      	ldr	r3, [pc, #424]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a69      	ldr	r2, [pc, #420]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	4b67      	ldr	r3, [pc, #412]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a66      	ldr	r2, [pc, #408]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	e01c      	b.n	8001276 <HAL_RCC_OscConfig+0x36e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b05      	cmp	r3, #5
 8001242:	d10c      	bne.n	800125e <HAL_RCC_OscConfig+0x356>
 8001244:	4b61      	ldr	r3, [pc, #388]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4a60      	ldr	r2, [pc, #384]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6213      	str	r3, [r2, #32]
 8001250:	4b5e      	ldr	r3, [pc, #376]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a5d      	ldr	r2, [pc, #372]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	e00b      	b.n	8001276 <HAL_RCC_OscConfig+0x36e>
 800125e:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a5a      	ldr	r2, [pc, #360]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	6213      	str	r3, [r2, #32]
 800126a:	4b58      	ldr	r3, [pc, #352]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a57      	ldr	r2, [pc, #348]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d015      	beq.n	80012aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fbbd 	bl	80009fc <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7ff fbb9 	bl	80009fc <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e0b1      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129c:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ee      	beq.n	8001286 <HAL_RCC_OscConfig+0x37e>
 80012a8:	e014      	b.n	80012d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fba7 	bl	80009fc <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fba3 	bl	80009fc <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e09b      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c8:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1ee      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d105      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012da:	4b3c      	ldr	r3, [pc, #240]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a3b      	ldr	r2, [pc, #236]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f0:	4b36      	ldr	r3, [pc, #216]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d061      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d146      	bne.n	8001392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001304:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <HAL_RCC_OscConfig+0x4cc>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fb77 	bl	80009fc <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fb73 	bl	80009fc <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e06d      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001338:	d108      	bne.n	800134c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4921      	ldr	r1, [pc, #132]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a19      	ldr	r1, [r3, #32]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135c:	430b      	orrs	r3, r1
 800135e:	491b      	ldr	r1, [pc, #108]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_RCC_OscConfig+0x4cc>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fb47 	bl	80009fc <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff fb43 	bl	80009fc <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e03d      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x46a>
 8001390:	e035      	b.n	80013fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_RCC_OscConfig+0x4cc>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fb30 	bl	80009fc <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fb2c 	bl	80009fc <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e026      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x498>
 80013be:	e01e      	b.n	80013fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d107      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e019      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40007000 	.word	0x40007000
 80013d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_RCC_OscConfig+0x500>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0d0      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b6a      	ldr	r3, [pc, #424]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d910      	bls.n	8001450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b67      	ldr	r3, [pc, #412]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 0207 	bic.w	r2, r3, #7
 8001436:	4965      	ldr	r1, [pc, #404]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b63      	ldr	r3, [pc, #396]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0b8      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001468:	4b59      	ldr	r3, [pc, #356]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a58      	ldr	r2, [pc, #352]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001480:	4b53      	ldr	r3, [pc, #332]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800148a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148c:	4b50      	ldr	r3, [pc, #320]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	494d      	ldr	r1, [pc, #308]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d040      	beq.n	800152c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d115      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	4b41      	ldr	r3, [pc, #260]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e073      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e06b      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ea:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f023 0203 	bic.w	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4936      	ldr	r1, [pc, #216]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014fc:	f7ff fa7e 	bl	80009fc <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	e00a      	b.n	800151a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001504:	f7ff fa7a 	bl	80009fc <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e053      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 020c 	and.w	r2, r3, #12
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d1eb      	bne.n	8001504 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d210      	bcs.n	800155c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 0207 	bic.w	r2, r3, #7
 8001542:	4922      	ldr	r1, [pc, #136]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e032      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4916      	ldr	r1, [pc, #88]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	490e      	ldr	r1, [pc, #56]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800159a:	f000 f821 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	490a      	ldr	r1, [pc, #40]	@ (80015d4 <HAL_RCC_ClockConfig+0x1c8>)
 80015ac:	5ccb      	ldrb	r3, [r1, r3]
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	4a09      	ldr	r2, [pc, #36]	@ (80015d8 <HAL_RCC_ClockConfig+0x1cc>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_RCC_ClockConfig+0x1d0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f85c 	bl	8000678 <HAL_InitTick>

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	080055c4 	.word	0x080055c4
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	20000010 	.word	0x20000010

080015e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x94>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x30>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x36>
 800160e:	e027      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001612:	613b      	str	r3, [r7, #16]
      break;
 8001614:	e027      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d010      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x94>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0c5b      	lsrs	r3, r3, #17
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001642:	fb03 f202 	mul.w	r2, r3, r2
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e004      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	613b      	str	r3, [r7, #16]
      break;
 800165e:	e002      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x98>)
 8001662:	613b      	str	r3, [r7, #16]
      break;
 8001664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001666:	693b      	ldr	r3, [r7, #16]
}
 8001668:	4618      	mov	r0, r3
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	007a1200 	.word	0x007a1200
 800167c:	080055dc 	.word	0x080055dc
 8001680:	080055ec 	.word	0x080055ec
 8001684:	003d0900 	.word	0x003d0900

08001688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800168c:	4b02      	ldr	r3, [pc, #8]	@ (8001698 <HAL_RCC_GetHCLKFreq+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a0:	f7ff fff2 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	@ (80016c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	080055d4 	.word	0x080055d4

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c8:	f7ff ffde 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0adb      	lsrs	r3, r3, #11
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	@ (80016e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	080055d4 	.word	0x080055d4

080016ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	220f      	movs	r2, #15
 80016fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_RCC_GetClockConfig+0x58>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_RCC_GetClockConfig+0x58>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_GetClockConfig+0x58>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_RCC_GetClockConfig+0x58>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_RCC_GetClockConfig+0x5c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0207 	and.w	r2, r3, #7
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000
 8001748:	40022000 	.word	0x40022000

0800174c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <RCC_Delay+0x34>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <RCC_Delay+0x38>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a5b      	lsrs	r3, r3, #9
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001768:	bf00      	nop
  }
  while (Delay --);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	60fa      	str	r2, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f9      	bne.n	8001768 <RCC_Delay+0x1c>
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	2000000c 	.word	0x2000000c
 8001784:	10624dd3 	.word	0x10624dd3

08001788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e041      	b.n	800181e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f839 	bl	8001826 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f000 f9b4 	bl	8001b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d001      	beq.n	8001850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e03a      	b.n	80018c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <HAL_TIM_Base_Start_IT+0x98>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00e      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x58>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187a:	d009      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x58>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d004      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x58>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a13      	ldr	r2, [pc, #76]	@ (80018d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d111      	bne.n	80018b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d010      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018b2:	e007      	b.n	80018c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40012c00 	.word	0x40012c00
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40000800 	.word	0x40000800

080018dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d122      	bne.n	8001938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d11b      	bne.n	8001938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0202 	mvn.w	r2, #2
 8001908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8ed 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001924:	e005      	b.n	8001932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8e0 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f8ef 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b04      	cmp	r3, #4
 8001944:	d122      	bne.n	800198c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d11b      	bne.n	800198c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0204 	mvn.w	r2, #4
 800195c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8c3 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001978:	e005      	b.n	8001986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8b6 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8c5 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b08      	cmp	r3, #8
 8001998:	d122      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d11b      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0208 	mvn.w	r2, #8
 80019b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2204      	movs	r2, #4
 80019b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f899 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 80019cc:	e005      	b.n	80019da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f88c 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f89b 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d122      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d11b      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0210 	mvn.w	r2, #16
 8001a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f86f 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001a20:	e005      	b.n	8001a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f862 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f871 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10e      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0201 	mvn.w	r2, #1
 8001a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fdbc 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6a:	2b80      	cmp	r3, #128	@ 0x80
 8001a6c:	d10e      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a78:	2b80      	cmp	r3, #128	@ 0x80
 8001a7a:	d107      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f8bf 	bl	8001c0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a96:	2b40      	cmp	r3, #64	@ 0x40
 8001a98:	d10e      	bne.n	8001ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa4:	2b40      	cmp	r3, #64	@ 0x40
 8001aa6:	d107      	bne.n	8001ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f835 	bl	8001b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	d107      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f06f 0220 	mvn.w	r2, #32
 8001adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f88a 	bl	8001bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a29      	ldr	r2, [pc, #164]	@ (8001bec <TIM_Base_SetConfig+0xb8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00b      	beq.n	8001b64 <TIM_Base_SetConfig+0x30>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b52:	d007      	beq.n	8001b64 <TIM_Base_SetConfig+0x30>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <TIM_Base_SetConfig+0xbc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <TIM_Base_SetConfig+0x30>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a25      	ldr	r2, [pc, #148]	@ (8001bf4 <TIM_Base_SetConfig+0xc0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d108      	bne.n	8001b76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <TIM_Base_SetConfig+0xb8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00b      	beq.n	8001b96 <TIM_Base_SetConfig+0x62>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b84:	d007      	beq.n	8001b96 <TIM_Base_SetConfig+0x62>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <TIM_Base_SetConfig+0xbc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d003      	beq.n	8001b96 <TIM_Base_SetConfig+0x62>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a18      	ldr	r2, [pc, #96]	@ (8001bf4 <TIM_Base_SetConfig+0xc0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d108      	bne.n	8001ba8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <TIM_Base_SetConfig+0xb8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d103      	bne.n	8001bdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	615a      	str	r2, [r3, #20]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40000800 	.word	0x40000800

08001bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e042      	b.n	8001cb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fe08 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2224      	movs	r2, #36	@ 0x24
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9af 	bl	8001fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d16d      	bne.n	8001db8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_UART_Transmit+0x2c>
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e066      	b.n	8001dba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2221      	movs	r2, #33	@ 0x21
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cfa:	f7fe fe7f 	bl	80009fc <HAL_GetTick>
 8001cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d14:	d108      	bne.n	8001d28 <HAL_UART_Transmit+0x6c>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	e003      	b.n	8001d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d30:	e02a      	b.n	8001d88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2180      	movs	r1, #128	@ 0x80
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f8d2 	bl	8001ee6 <UART_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e036      	b.n	8001dba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	3302      	adds	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e007      	b.n	8001d7a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	3301      	adds	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1cf      	bne.n	8001d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	@ 0x40
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f8a2 	bl	8001ee6 <UART_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e006      	b.n	8001dba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b08a      	sub	sp, #40	@ 0x28
 8001dc6:	af02      	add	r7, sp, #8
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d17c      	bne.n	8001edc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_UART_Receive+0x2c>
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e075      	b.n	8001ede <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2222      	movs	r2, #34	@ 0x22
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e06:	f7fe fdf9 	bl	80009fc <HAL_GetTick>
 8001e0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	88fa      	ldrh	r2, [r7, #6]
 8001e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e20:	d108      	bne.n	8001e34 <HAL_UART_Receive+0x72>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e003      	b.n	8001e3c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e3c:	e043      	b.n	8001ec6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2200      	movs	r2, #0
 8001e46:	2120      	movs	r1, #32
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f84c 	bl	8001ee6 <UART_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e042      	b.n	8001ede <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	3302      	adds	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	e01f      	b.n	8001eb8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e80:	d007      	beq.n	8001e92 <HAL_UART_Receive+0xd0>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_UART_Receive+0xde>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e008      	b.n	8001eb2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1b6      	bne.n	8001e3e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e000      	b.n	8001ede <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b090      	sub	sp, #64	@ 0x40
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef6:	e050      	b.n	8001f9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efe:	d04c      	beq.n	8001f9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f06:	f7fe fd79 	bl	80009fc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d241      	bcs.n	8001f9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f20:	e853 3f00 	ldrex	r3, [r3]
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	330c      	adds	r3, #12
 8001f34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f36:	637a      	str	r2, [r7, #52]	@ 0x34
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f3e:	e841 2300 	strex	r3, r2, [r1]
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1e5      	bne.n	8001f16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3314      	adds	r3, #20
 8001f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	e853 3f00 	ldrex	r3, [r3]
 8001f58:	613b      	str	r3, [r7, #16]
   return(result);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3314      	adds	r3, #20
 8001f68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f6a:	623a      	str	r2, [r7, #32]
 8001f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f6e:	69f9      	ldr	r1, [r7, #28]
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	e841 2300 	strex	r3, r2, [r1]
 8001f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1e5      	bne.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e00f      	b.n	8001fba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d09f      	beq.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3740      	adds	r7, #64	@ 0x40
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001ffe:	f023 030c 	bic.w	r3, r3, #12
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	430b      	orrs	r3, r1
 800200a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2c      	ldr	r2, [pc, #176]	@ (80020d8 <UART_SetConfig+0x114>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800202c:	f7ff fb4a 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	e002      	b.n	800203a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002034:	f7ff fb32 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8002038:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	009a      	lsls	r2, r3, #2
 8002044:	441a      	add	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	4a22      	ldr	r2, [pc, #136]	@ (80020dc <UART_SetConfig+0x118>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	0119      	lsls	r1, r3, #4
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009a      	lsls	r2, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002070:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <UART_SetConfig+0x118>)
 8002072:	fba3 0302 	umull	r0, r3, r3, r2
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2064      	movs	r0, #100	@ 0x64
 800207a:	fb00 f303 	mul.w	r3, r0, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	3332      	adds	r3, #50	@ 0x32
 8002084:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <UART_SetConfig+0x118>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002090:	4419      	add	r1, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009a      	lsls	r2, r3, #2
 800209c:	441a      	add	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <UART_SetConfig+0x118>)
 80020aa:	fba3 0302 	umull	r0, r3, r3, r2
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2064      	movs	r0, #100	@ 0x64
 80020b2:	fb00 f303 	mul.w	r3, r0, r3
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	3332      	adds	r3, #50	@ 0x32
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <UART_SetConfig+0x118>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	f003 020f 	and.w	r2, r3, #15
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	440a      	add	r2, r1
 80020ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40013800 	.word	0x40013800
 80020dc:	51eb851f 	.word	0x51eb851f

080020e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e6:	f3ef 8305 	mrs	r3, IPSR
 80020ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80020ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f2:	f3ef 8310 	mrs	r3, PRIMASK
 80020f6:	607b      	str	r3, [r7, #4]
  return(result);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <osKernelInitialize+0x32>
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <osKernelInitialize+0x60>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d109      	bne.n	800211a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002106:	f3ef 8311 	mrs	r3, BASEPRI
 800210a:	603b      	str	r3, [r7, #0]
  return(result);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002112:	f06f 0305 	mvn.w	r3, #5
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e00c      	b.n	8002134 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <osKernelInitialize+0x60>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <osKernelInitialize+0x60>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e002      	b.n	8002134 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000134 	.word	0x20000134

08002144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800214a:	f3ef 8305 	mrs	r3, IPSR
 800214e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002150:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002156:	f3ef 8310 	mrs	r3, PRIMASK
 800215a:	607b      	str	r3, [r7, #4]
  return(result);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <osKernelStart+0x32>
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <osKernelStart+0x64>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d109      	bne.n	800217e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800216a:	f3ef 8311 	mrs	r3, BASEPRI
 800216e:	603b      	str	r3, [r7, #0]
  return(result);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002176:	f06f 0305 	mvn.w	r3, #5
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e00e      	b.n	800219c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <osKernelStart+0x64>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <osKernelStart+0x64>)
 8002188:	2202      	movs	r2, #2
 800218a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800218c:	f001 fbd4 	bl	8003938 <vTaskStartScheduler>
      stat = osOK;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e002      	b.n	800219c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800219c:	68fb      	ldr	r3, [r7, #12]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000134 	.word	0x20000134

080021ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b092      	sub	sp, #72	@ 0x48
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021bc:	f3ef 8305 	mrs	r3, IPSR
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 8094 	bne.w	80022f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ca:	f3ef 8310 	mrs	r3, PRIMASK
 80021ce:	623b      	str	r3, [r7, #32]
  return(result);
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 808d 	bne.w	80022f2 <osThreadNew+0x146>
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <osThreadNew+0x150>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d106      	bne.n	80021ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021e0:	f3ef 8311 	mrs	r3, BASEPRI
 80021e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8082 	bne.w	80022f2 <osThreadNew+0x146>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d07e      	beq.n	80022f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80021f8:	2318      	movs	r3, #24
 80021fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80021fc:	2300      	movs	r3, #0
 80021fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002200:	f107 031b 	add.w	r3, r7, #27
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d045      	beq.n	800229e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <osThreadNew+0x74>
        name = attr->name;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800222e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <osThreadNew+0x9a>
 8002234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002236:	2b38      	cmp	r3, #56	@ 0x38
 8002238:	d805      	bhi.n	8002246 <osThreadNew+0x9a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <osThreadNew+0x9e>
        return (NULL);
 8002246:	2300      	movs	r3, #0
 8002248:	e054      	b.n	80022f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00e      	beq.n	8002280 <osThreadNew+0xd4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b5b      	cmp	r3, #91	@ 0x5b
 8002268:	d90a      	bls.n	8002280 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <osThreadNew+0xd4>
        mem = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800227e:	e010      	b.n	80022a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10c      	bne.n	80022a2 <osThreadNew+0xf6>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d108      	bne.n	80022a2 <osThreadNew+0xf6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <osThreadNew+0xf6>
          mem = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800229c:	e001      	b.n	80022a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d110      	bne.n	80022ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022b0:	9202      	str	r2, [sp, #8]
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f001 f968 	bl	8003594 <xTaskCreateStatic>
 80022c4:	4603      	mov	r3, r0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e013      	b.n	80022f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80022ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d110      	bne.n	80022f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f001 f9b5 	bl	8003652 <xTaskCreate>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <osThreadNew+0x146>
          hTask = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80022f2:	697b      	ldr	r3, [r7, #20]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3738      	adds	r7, #56	@ 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000134 	.word	0x20000134

08002300 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002308:	f3ef 8305 	mrs	r3, IPSR
 800230c:	613b      	str	r3, [r7, #16]
  return(result);
 800230e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002314:	f3ef 8310 	mrs	r3, PRIMASK
 8002318:	60fb      	str	r3, [r7, #12]
  return(result);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <osDelay+0x34>
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <osDelay+0x58>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d109      	bne.n	800233c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002328:	f3ef 8311 	mrs	r3, BASEPRI
 800232c:	60bb      	str	r3, [r7, #8]
  return(result);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <osDelay+0x3c>
    stat = osErrorISR;
 8002334:	f06f 0305 	mvn.w	r3, #5
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e007      	b.n	800234c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 fac0 	bl	80038cc <vTaskDelay>
    }
  }

  return (stat);
 800234c:	697b      	ldr	r3, [r7, #20]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000134 	.word	0x20000134

0800235c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	@ 0x30
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800236c:	f3ef 8305 	mrs	r3, IPSR
 8002370:	61bb      	str	r3, [r7, #24]
  return(result);
 8002372:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 8086 	bne.w	8002486 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800237a:	f3ef 8310 	mrs	r3, PRIMASK
 800237e:	617b      	str	r3, [r7, #20]
  return(result);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d17f      	bne.n	8002486 <osSemaphoreNew+0x12a>
 8002386:	4b42      	ldr	r3, [pc, #264]	@ (8002490 <osSemaphoreNew+0x134>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d105      	bne.n	800239a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800238e:	f3ef 8311 	mrs	r3, BASEPRI
 8002392:	613b      	str	r3, [r7, #16]
  return(result);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d175      	bne.n	8002486 <osSemaphoreNew+0x12a>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d072      	beq.n	8002486 <osSemaphoreNew+0x12a>
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d86e      	bhi.n	8002486 <osSemaphoreNew+0x12a>
    mem = -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <osSemaphoreNew+0x6e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b4f      	cmp	r3, #79	@ 0x4f
 80023c2:	d902      	bls.n	80023ca <osSemaphoreNew+0x6e>
        mem = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	623b      	str	r3, [r7, #32]
 80023c8:	e00c      	b.n	80023e4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <osSemaphoreNew+0x88>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <osSemaphoreNew+0x88>
          mem = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	e001      	b.n	80023e4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d04c      	beq.n	8002486 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d128      	bne.n	8002444 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10a      	bne.n	800240e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2203      	movs	r2, #3
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2001      	movs	r0, #1
 8002406:	f000 fa17 	bl	8002838 <xQueueGenericCreateStatic>
 800240a:	6278      	str	r0, [r7, #36]	@ 0x24
 800240c:	e005      	b.n	800241a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800240e:	2203      	movs	r2, #3
 8002410:	2100      	movs	r1, #0
 8002412:	2001      	movs	r0, #1
 8002414:	f000 fa8c 	bl	8002930 <xQueueGenericCreate>
 8002418:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d022      	beq.n	8002466 <osSemaphoreNew+0x10a>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01f      	beq.n	8002466 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002426:	2300      	movs	r3, #0
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800242e:	f000 fb4f 	bl	8002ad0 <xQueueGenericSend>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d016      	beq.n	8002466 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8002438:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800243a:	f000 fed9 	bl	80031f0 <vQueueDelete>
            hSemaphore = NULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
 8002442:	e010      	b.n	8002466 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d108      	bne.n	800245c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	461a      	mov	r2, r3
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 face 	bl	80029f4 <xQueueCreateCountingSemaphoreStatic>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24
 800245a:	e004      	b.n	8002466 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fb01 	bl	8002a66 <xQueueCreateCountingSemaphore>
 8002464:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00c      	beq.n	8002486 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <osSemaphoreNew+0x11e>
          name = attr->name;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	e001      	b.n	800247e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800247e:	69f9      	ldr	r1, [r7, #28]
 8002480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002482:	f001 f801 	bl	8003488 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002488:	4618      	mov	r0, r3
 800248a:	3728      	adds	r7, #40	@ 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000134 	.word	0x20000134

08002494 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	@ 0x30
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a4:	f3ef 8305 	mrs	r3, IPSR
 80024a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80024aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d16f      	bne.n	8002590 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b0:	f3ef 8310 	mrs	r3, PRIMASK
 80024b4:	617b      	str	r3, [r7, #20]
  return(result);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d169      	bne.n	8002590 <osMessageQueueNew+0xfc>
 80024bc:	4b37      	ldr	r3, [pc, #220]	@ (800259c <osMessageQueueNew+0x108>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d105      	bne.n	80024d0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024c4:	f3ef 8311 	mrs	r3, BASEPRI
 80024c8:	613b      	str	r3, [r7, #16]
  return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d15f      	bne.n	8002590 <osMessageQueueNew+0xfc>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d05c      	beq.n	8002590 <osMessageQueueNew+0xfc>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d059      	beq.n	8002590 <osMessageQueueNew+0xfc>
    mem = -1;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
 80024e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d029      	beq.n	800253c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d012      	beq.n	8002516 <osMessageQueueNew+0x82>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80024f6:	d90e      	bls.n	8002516 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	429a      	cmp	r2, r3
 800250e:	d302      	bcc.n	8002516 <osMessageQueueNew+0x82>
        mem = 1;
 8002510:	2301      	movs	r3, #1
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	e014      	b.n	8002540 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d110      	bne.n	8002540 <osMessageQueueNew+0xac>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <osMessageQueueNew+0xac>
          mem = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
 800253a:	e001      	b.n	8002540 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10b      	bne.n	800255e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2100      	movs	r1, #0
 8002550:	9100      	str	r1, [sp, #0]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f96f 	bl	8002838 <xQueueGenericCreateStatic>
 800255a:	6278      	str	r0, [r7, #36]	@ 0x24
 800255c:	e008      	b.n	8002570 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002564:	2200      	movs	r2, #0
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f9e1 	bl	8002930 <xQueueGenericCreate>
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <osMessageQueueNew+0xf0>
        name = attr->name;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e001      	b.n	8002588 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002588:	69f9      	ldr	r1, [r7, #28]
 800258a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800258c:	f000 ff7c 	bl	8003488 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002592:	4618      	mov	r0, r3
 8002594:	3728      	adds	r7, #40	@ 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000134 	.word	0x20000134

080025a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a06      	ldr	r2, [pc, #24]	@ (80025c8 <vApplicationGetIdleTaskMemory+0x28>)
 80025b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <vApplicationGetIdleTaskMemory+0x2c>)
 80025b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000138 	.word	0x20000138
 80025cc:	20000194 	.word	0x20000194

080025d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a07      	ldr	r2, [pc, #28]	@ (80025fc <vApplicationGetTimerTaskMemory+0x2c>)
 80025e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4a06      	ldr	r2, [pc, #24]	@ (8002600 <vApplicationGetTimerTaskMemory+0x30>)
 80025e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000394 	.word	0x20000394
 8002600:	200003f0 	.word	0x200003f0

08002604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f103 0208 	add.w	r2, r3, #8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f103 0208 	add.w	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0208 	add.w	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d103      	bne.n	80026c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e00c      	b.n	80026da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3308      	adds	r3, #8
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e002      	b.n	80026ce <vListInsert+0x2e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d2f6      	bcs.n	80026c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6892      	ldr	r2, [r2, #8]
 8002726:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6852      	ldr	r2, [r2, #4]
 8002730:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d103      	bne.n	8002744 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
	...

08002764 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002790:	f002 fb24 	bl	8004ddc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	441a      	add	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c0:	3b01      	subs	r3, #1
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	441a      	add	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	22ff      	movs	r2, #255	@ 0xff
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	22ff      	movs	r2, #255	@ 0xff
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d114      	bne.n	8002810 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01a      	beq.n	8002824 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3310      	adds	r3, #16
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fb32 	bl	8003e5c <xTaskRemoveFromEventList>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <xQueueGenericReset+0xd0>)
 8002800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	e009      	b.n	8002824 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3310      	adds	r3, #16
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fef5 	bl	8002604 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3324      	adds	r3, #36	@ 0x24
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fef0 	bl	8002604 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002824:	f002 fb0a 	bl	8004e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	@ 0x38
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <xQueueGenericCreateStatic+0x56>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <xQueueGenericCreateStatic+0x5a>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueGenericCreateStatic+0x5c>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	623b      	str	r3, [r7, #32]
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <xQueueGenericCreateStatic+0x84>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <xQueueGenericCreateStatic+0x88>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <xQueueGenericCreateStatic+0x8a>
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	61fb      	str	r3, [r7, #28]
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	e7fd      	b.n	80028da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028de:	2350      	movs	r3, #80	@ 0x50
 80028e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b50      	cmp	r3, #80	@ 0x50
 80028e6:	d00b      	beq.n	8002900 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	61bb      	str	r3, [r7, #24]
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002912:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f844 	bl	80029ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002928:	4618      	mov	r0, r3
 800292a:	3730      	adds	r7, #48	@ 0x30
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	@ 0x28
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <xQueueGenericCreate+0x2c>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	613b      	str	r3, [r7, #16]
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e004      	b.n	8002972 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3350      	adds	r3, #80	@ 0x50
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fb32 	bl	8004fe0 <pvPortMalloc>
 800297c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00f      	beq.n	80029a4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	3350      	adds	r3, #80	@ 0x50
 8002988:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002992:	79fa      	ldrb	r2, [r7, #7]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f805 	bl	80029ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80029a4:	69bb      	ldr	r3, [r7, #24]
	}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3720      	adds	r7, #32
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e002      	b.n	80029d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029dc:	2101      	movs	r1, #1
 80029de:	69b8      	ldr	r0, [r7, #24]
 80029e0:	f7ff fec0 	bl	8002764 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	61bb      	str	r3, [r7, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	e7fd      	b.n	8002a1a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90b      	bls.n	8002a3e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	617b      	str	r3, [r7, #20]
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	e7fd      	b.n	8002a3a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002a3e:	2302      	movs	r3, #2
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff fef5 	bl	8002838 <xQueueGenericCreateStatic>
 8002a4e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
	}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	613b      	str	r3, [r7, #16]
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	e7fd      	b.n	8002a8a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d90b      	bls.n	8002aae <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60fb      	str	r3, [r7, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	e7fd      	b.n	8002aaa <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002aae:	2202      	movs	r2, #2
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ff3c 	bl	8002930 <xQueueGenericCreate>
 8002ab8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ac6:	697b      	ldr	r3, [r7, #20]
	}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	@ 0x38
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <xQueueGenericSend+0x34>
	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <xQueueGenericSend+0x42>
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <xQueueGenericSend+0x46>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <xQueueGenericSend+0x48>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <xQueueGenericSend+0x64>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSend+0x72>
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSend+0x76>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSend+0x78>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <xQueueGenericSend+0x94>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	623b      	str	r3, [r7, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b64:	f001 fb3e 	bl	80041e4 <xTaskGetSchedulerState>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <xQueueGenericSend+0xa4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <xQueueGenericSend+0xa8>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <xQueueGenericSend+0xaa>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <xQueueGenericSend+0xc6>
	__asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	61fb      	str	r3, [r7, #28]
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	e7fd      	b.n	8002b92 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b96:	f002 f921 	bl	8004ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <xQueueGenericSend+0xdc>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d129      	bne.n	8002c00 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bb2:	f000 fb58 	bl	8003266 <prvCopyDataToQueue>
 8002bb6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	3324      	adds	r3, #36	@ 0x24
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 f949 	bl	8003e5c <xTaskRemoveFromEventList>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <xQueueGenericSend+0x200>)
 8002bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	e00a      	b.n	8002bf8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002be8:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <xQueueGenericSend+0x200>)
 8002bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bf8:	f002 f920 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e063      	b.n	8002cc8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c06:	f002 f919 	bl	8004e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e05c      	b.n	8002cc8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f983 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c22:	f002 f90b 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c26:	f000 feef 	bl	8003a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c2a:	f002 f8d7 	bl	8004ddc <vPortEnterCritical>
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c34:	b25b      	sxtb	r3, r3
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3a:	d103      	bne.n	8002c44 <xQueueGenericSend+0x174>
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d103      	bne.n	8002c5a <xQueueGenericSend+0x18a>
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c5a:	f002 f8ef 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c5e:	1d3a      	adds	r2, r7, #4
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f972 	bl	8003f50 <xTaskCheckForTimeOut>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d124      	bne.n	8002cbc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c74:	f000 fbef 	bl	8003456 <prvIsQueueFull>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	3310      	adds	r3, #16
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f896 	bl	8003db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c8e:	f000 fb7a 	bl	8003386 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c92:	f000 fec7 	bl	8003a24 <xTaskResumeAll>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f af7c 	bne.w	8002b96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <xQueueGenericSend+0x200>)
 8002ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	e772      	b.n	8002b96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cb2:	f000 fb68 	bl	8003386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cb6:	f000 feb5 	bl	8003a24 <xTaskResumeAll>
 8002cba:	e76c      	b.n	8002b96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cbe:	f000 fb62 	bl	8003386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cc2:	f000 feaf 	bl	8003a24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cc6:	2300      	movs	r3, #0
		}
	}
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3738      	adds	r7, #56	@ 0x38
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	e000ed04 	.word	0xe000ed04

08002cd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08e      	sub	sp, #56	@ 0x38
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <xQueueGenericSendFromISR+0x3e>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <xQueueGenericSendFromISR+0x42>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueGenericSendFromISR+0x44>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	623b      	str	r3, [r7, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSendFromISR+0x6e>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSendFromISR+0x72>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSendFromISR+0x74>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61fb      	str	r3, [r7, #28]
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d64:	f002 f8fc 	bl	8004f60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d68:	f3ef 8211 	mrs	r2, BASEPRI
 8002d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	61ba      	str	r2, [r7, #24]
 8002d7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d302      	bcc.n	8002d96 <xQueueGenericSendFromISR+0xc2>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d12c      	bne.n	8002df0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002da6:	f000 fa5e 	bl	8003266 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002daa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db2:	d112      	bne.n	8002dda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	3324      	adds	r3, #36	@ 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 f84b 	bl	8003e5c <xTaskRemoveFromEventList>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e007      	b.n	8002dea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002dde:	3301      	adds	r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	b25a      	sxtb	r2, r3
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002dea:	2301      	movs	r3, #1
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002dee:	e001      	b.n	8002df4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3738      	adds	r7, #56	@ 0x38
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	@ 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <xQueueReceive+0x32>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	623b      	str	r3, [r7, #32]
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	e7fd      	b.n	8002e3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d103      	bne.n	8002e4c <xQueueReceive+0x40>
 8002e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <xQueueReceive+0x44>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <xQueueReceive+0x46>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <xQueueReceive+0x62>
	__asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	61fb      	str	r3, [r7, #28]
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	e7fd      	b.n	8002e6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e6e:	f001 f9b9 	bl	80041e4 <xTaskGetSchedulerState>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <xQueueReceive+0x72>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <xQueueReceive+0x76>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <xQueueReceive+0x78>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <xQueueReceive+0x94>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	61bb      	str	r3, [r7, #24]
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ea0:	f001 ff9c 	bl	8004ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01f      	beq.n	8002ef0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002eb4:	f000 fa41 	bl	800333a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	1e5a      	subs	r2, r3, #1
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00f      	beq.n	8002ee8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eca:	3310      	adds	r3, #16
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 ffc5 	bl	8003e5c <xTaskRemoveFromEventList>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fcc <xQueueReceive+0x1c0>)
 8002eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ee8:	f001 ffa8 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e069      	b.n	8002fc4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ef6:	f001 ffa1 	bl	8004e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e062      	b.n	8002fc4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 f80b 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f12:	f001 ff93 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f16:	f000 fd77 	bl	8003a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f1a:	f001 ff5f 	bl	8004ddc <vPortEnterCritical>
 8002f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2a:	d103      	bne.n	8002f34 <xQueueReceive+0x128>
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f3a:	b25b      	sxtb	r3, r3
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d103      	bne.n	8002f4a <xQueueReceive+0x13e>
 8002f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f4a:	f001 ff77 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f4e:	1d3a      	adds	r2, r7, #4
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fffa 	bl	8003f50 <xTaskCheckForTimeOut>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d123      	bne.n	8002faa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f64:	f000 fa61 	bl	800342a <prvIsQueueEmpty>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	3324      	adds	r3, #36	@ 0x24
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 ff1e 	bl	8003db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f7e:	f000 fa02 	bl	8003386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f82:	f000 fd4f 	bl	8003a24 <xTaskResumeAll>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d189      	bne.n	8002ea0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fcc <xQueueReceive+0x1c0>)
 8002f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	e780      	b.n	8002ea0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fa0:	f000 f9f1 	bl	8003386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa4:	f000 fd3e 	bl	8003a24 <xTaskResumeAll>
 8002fa8:	e77a      	b.n	8002ea0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fac:	f000 f9eb 	bl	8003386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb0:	f000 fd38 	bl	8003a24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fb6:	f000 fa38 	bl	800342a <prvIsQueueEmpty>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f43f af6f 	beq.w	8002ea0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3730      	adds	r7, #48	@ 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08e      	sub	sp, #56	@ 0x38
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	623b      	str	r3, [r7, #32]
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	61fb      	str	r3, [r7, #28]
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003024:	f001 f8de 	bl	80041e4 <xTaskGetSchedulerState>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <xQueueSemaphoreTake+0x64>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <xQueueSemaphoreTake+0x68>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <xQueueSemaphoreTake+0x6a>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	61bb      	str	r3, [r7, #24]
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	e7fd      	b.n	8003052 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003056:	f001 fec1 	bl	8004ddc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d024      	beq.n	80030b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800306e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003076:	f001 fa39 	bl	80044ec <pvTaskIncrementMutexHeldCount>
 800307a:	4602      	mov	r2, r0
 800307c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308a:	3310      	adds	r3, #16
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fee5 	bl	8003e5c <xTaskRemoveFromEventList>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003098:	4b54      	ldr	r3, [pc, #336]	@ (80031ec <xQueueSemaphoreTake+0x21c>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030a8:	f001 fec8 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e098      	b.n	80031e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d112      	bne.n	80030dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	617b      	str	r3, [r7, #20]
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030d4:	f001 feb2 	bl	8004e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030d8:	2300      	movs	r3, #0
 80030da:	e082      	b.n	80031e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e2:	f107 030c 	add.w	r3, r7, #12
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 ff1c 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f0:	f001 fea4 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f4:	f000 fc88 	bl	8003a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f8:	f001 fe70 	bl	8004ddc <vPortEnterCritical>
 80030fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003102:	b25b      	sxtb	r3, r3
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d103      	bne.n	8003112 <xQueueSemaphoreTake+0x142>
 800310a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003118:	b25b      	sxtb	r3, r3
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d103      	bne.n	8003128 <xQueueSemaphoreTake+0x158>
 8003120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003128:	f001 fe88 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312c:	463a      	mov	r2, r7
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f000 ff0b 	bl	8003f50 <xTaskCheckForTimeOut>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d132      	bne.n	80031a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003140:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003142:	f000 f972 	bl	800342a <prvIsQueueEmpty>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d026      	beq.n	800319a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003154:	f001 fe42 	bl	8004ddc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f85f 	bl	8004220 <xTaskPriorityInherit>
 8003162:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003164:	f001 fe6a 	bl	8004e3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316a:	3324      	adds	r3, #36	@ 0x24
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fe21 	bl	8003db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003176:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003178:	f000 f905 	bl	8003386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800317c:	f000 fc52 	bl	8003a24 <xTaskResumeAll>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f af67 	bne.w	8003056 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003188:	4b18      	ldr	r3, [pc, #96]	@ (80031ec <xQueueSemaphoreTake+0x21c>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	e75d      	b.n	8003056 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800319a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800319c:	f000 f8f3 	bl	8003386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031a0:	f000 fc40 	bl	8003a24 <xTaskResumeAll>
 80031a4:	e757      	b.n	8003056 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80031a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031a8:	f000 f8ed 	bl	8003386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ac:	f000 fc3a 	bl	8003a24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031b2:	f000 f93a 	bl	800342a <prvIsQueueEmpty>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f43f af4c 	beq.w	8003056 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80031c4:	f001 fe0a 	bl	8004ddc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031ca:	f000 f835 	bl	8003238 <prvGetDisinheritPriorityAfterTimeout>
 80031ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80031d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f900 	bl	80043dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031dc:	f001 fe2e 	bl	8004e3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3738      	adds	r7, #56	@ 0x38
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <vQueueDelete+0x2a>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	60bb      	str	r3, [r7, #8]
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	e7fd      	b.n	8003216 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f95c 	bl	80034d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f001 ffa0 	bl	8005170 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e001      	b.n	800325a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800325a:	68fb      	ldr	r3, [r7, #12]
	}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d14d      	bne.n	8003328 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	f001 f833 	bl	80042fc <xTaskPriorityDisinherit>
 8003296:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	e043      	b.n	8003328 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d119      	bne.n	80032da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6898      	ldr	r0, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	461a      	mov	r2, r3
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	f002 f89f 	bl	80053f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d32b      	bcc.n	8003328 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e026      	b.n	8003328 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68d8      	ldr	r0, [r3, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	461a      	mov	r2, r3
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	f002 f885 	bl	80053f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	425b      	negs	r3, r3
 80032f4:	441a      	add	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d207      	bcs.n	8003316 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	425b      	negs	r3, r3
 8003310:	441a      	add	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d105      	bne.n	8003328 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	3b01      	subs	r3, #1
 8003326:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003330:	697b      	ldr	r3, [r7, #20]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d018      	beq.n	800337e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d303      	bcc.n	800336e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	461a      	mov	r2, r3
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	f002 f83b 	bl	80053f4 <memcpy>
	}
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800338e:	f001 fd25 	bl	8004ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003398:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800339a:	e011      	b.n	80033c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3324      	adds	r3, #36	@ 0x24
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fd57 	bl	8003e5c <xTaskRemoveFromEventList>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033b4:	f000 fe30 	bl	8004018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	dce9      	bgt.n	800339c <prvUnlockQueue+0x16>
 80033c8:	e000      	b.n	80033cc <prvUnlockQueue+0x46>
					break;
 80033ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	22ff      	movs	r2, #255	@ 0xff
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80033d4:	f001 fd32 	bl	8004e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033d8:	f001 fd00 	bl	8004ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033e4:	e011      	b.n	800340a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3310      	adds	r3, #16
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fd32 	bl	8003e5c <xTaskRemoveFromEventList>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033fe:	f000 fe0b 	bl	8004018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003402:	7bbb      	ldrb	r3, [r7, #14]
 8003404:	3b01      	subs	r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800340a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dce9      	bgt.n	80033e6 <prvUnlockQueue+0x60>
 8003412:	e000      	b.n	8003416 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003414:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	22ff      	movs	r2, #255	@ 0xff
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800341e:	f001 fd0d 	bl	8004e3c <vPortExitCritical>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003432:	f001 fcd3 	bl	8004ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800343e:	2301      	movs	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e001      	b.n	8003448 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003448:	f001 fcf8 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800345e:	f001 fcbd 	bl	8004ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346a:	429a      	cmp	r2, r3
 800346c:	d102      	bne.n	8003474 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800346e:	2301      	movs	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e001      	b.n	8003478 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003478:	f001 fce0 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e014      	b.n	80034c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003498:	4a0e      	ldr	r2, [pc, #56]	@ (80034d4 <vQueueAddToRegistry+0x4c>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034a4:	490b      	ldr	r1, [pc, #44]	@ (80034d4 <vQueueAddToRegistry+0x4c>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <vQueueAddToRegistry+0x4c>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034ba:	e006      	b.n	80034ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b07      	cmp	r3, #7
 80034c6:	d9e7      	bls.n	8003498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	200007f0 	.word	0x200007f0

080034d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e016      	b.n	8003514 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80034e6:	4a10      	ldr	r2, [pc, #64]	@ (8003528 <vQueueUnregisterQueue+0x50>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d10b      	bne.n	800350e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80034f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <vQueueUnregisterQueue+0x50>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2100      	movs	r1, #0
 80034fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003500:	4a09      	ldr	r2, [pc, #36]	@ (8003528 <vQueueUnregisterQueue+0x50>)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
				break;
 800350c:	e006      	b.n	800351c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3301      	adds	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b07      	cmp	r3, #7
 8003518:	d9e5      	bls.n	80034e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	200007f0 	.word	0x200007f0

0800352c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800353c:	f001 fc4e 	bl	8004ddc <vPortEnterCritical>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003546:	b25b      	sxtb	r3, r3
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d103      	bne.n	8003556 <vQueueWaitForMessageRestricted+0x2a>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800355c:	b25b      	sxtb	r3, r3
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d103      	bne.n	800356c <vQueueWaitForMessageRestricted+0x40>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800356c:	f001 fc66 	bl	8004e3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3324      	adds	r3, #36	@ 0x24
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fc3f 	bl	8003e04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff fefd 	bl	8003386 <prvUnlockQueue>
	}
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08e      	sub	sp, #56	@ 0x38
 8003598:	af04      	add	r7, sp, #16
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	623b      	str	r3, [r7, #32]
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <xTaskCreateStatic+0x4a>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	61fb      	str	r3, [r7, #28]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035de:	235c      	movs	r3, #92	@ 0x5c
 80035e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80035e6:	d00b      	beq.n	8003600 <xTaskCreateStatic+0x6c>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	61bb      	str	r3, [r7, #24]
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	e7fd      	b.n	80035fc <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01e      	beq.n	8003644 <xTaskCreateStatic+0xb0>
 8003606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	2202      	movs	r2, #2
 800361a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800361e:	2300      	movs	r3, #0
 8003620:	9303      	str	r3, [sp, #12]
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f850 	bl	80036dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800363c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800363e:	f000 f8d5 	bl	80037ec <prvAddNewTaskToReadyList>
 8003642:	e001      	b.n	8003648 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003648:	697b      	ldr	r3, [r7, #20]
	}
 800364a:	4618      	mov	r0, r3
 800364c:	3728      	adds	r7, #40	@ 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003652:	b580      	push	{r7, lr}
 8003654:	b08c      	sub	sp, #48	@ 0x30
 8003656:	af04      	add	r7, sp, #16
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fcba 	bl	8004fe0 <pvPortMalloc>
 800366c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003674:	205c      	movs	r0, #92	@ 0x5c
 8003676:	f001 fcb3 	bl	8004fe0 <pvPortMalloc>
 800367a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
 8003688:	e005      	b.n	8003696 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f001 fd70 	bl	8005170 <vPortFree>
 8003690:	e001      	b.n	8003696 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d017      	beq.n	80036cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	2300      	movs	r3, #0
 80036a8:	9303      	str	r3, [sp, #12]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	9302      	str	r3, [sp, #8]
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f80e 	bl	80036dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c0:	69f8      	ldr	r0, [r7, #28]
 80036c2:	f000 f893 	bl	80037ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	e002      	b.n	80036d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295
 80036d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036d2:	69bb      	ldr	r3, [r7, #24]
	}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	461a      	mov	r2, r3
 80036f4:	21a5      	movs	r1, #165	@ 0xa5
 80036f6:	f001 fe51 	bl	800539c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003704:	3b01      	subs	r3, #1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f023 0307 	bic.w	r3, r3, #7
 8003712:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	617b      	str	r3, [r7, #20]
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	e7fd      	b.n	8003732 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	e012      	b.n	8003762 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	7819      	ldrb	r1, [r3, #0]
 8003744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	3334      	adds	r3, #52	@ 0x34
 800374c:	460a      	mov	r2, r1
 800374e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	3301      	adds	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d9e9      	bls.n	800373c <prvInitialiseNewTask+0x60>
 8003768:	e000      	b.n	800376c <prvInitialiseNewTask+0x90>
		{
			break;
 800376a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003776:	2b37      	cmp	r3, #55	@ 0x37
 8003778:	d901      	bls.n	800377e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800377a:	2337      	movs	r3, #55	@ 0x37
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003782:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003788:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	2200      	movs	r2, #0
 800378e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	3304      	adds	r3, #4
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe ff54 	bl	8002642 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	3318      	adds	r3, #24
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe ff4f 	bl	8002642 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	69b8      	ldr	r0, [r7, #24]
 80037ce:	f001 fa15 	bl	8004bfc <pxPortInitialiseStack>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037e4:	bf00      	nop
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037f4:	f001 faf2 	bl	8004ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037f8:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <prvAddNewTaskToReadyList+0xc4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	4a2c      	ldr	r2, [pc, #176]	@ (80038b0 <prvAddNewTaskToReadyList+0xc4>)
 8003800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003802:	4b2c      	ldr	r3, [pc, #176]	@ (80038b4 <prvAddNewTaskToReadyList+0xc8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800380a:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <prvAddNewTaskToReadyList+0xc8>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003810:	4b27      	ldr	r3, [pc, #156]	@ (80038b0 <prvAddNewTaskToReadyList+0xc4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d110      	bne.n	800383a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003818:	f000 fc22 	bl	8004060 <prvInitialiseTaskLists>
 800381c:	e00d      	b.n	800383a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800381e:	4b26      	ldr	r3, [pc, #152]	@ (80038b8 <prvAddNewTaskToReadyList+0xcc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003826:	4b23      	ldr	r3, [pc, #140]	@ (80038b4 <prvAddNewTaskToReadyList+0xc8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	429a      	cmp	r2, r3
 8003832:	d802      	bhi.n	800383a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003834:	4a1f      	ldr	r2, [pc, #124]	@ (80038b4 <prvAddNewTaskToReadyList+0xc8>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800383a:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <prvAddNewTaskToReadyList+0xd0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	4a1e      	ldr	r2, [pc, #120]	@ (80038bc <prvAddNewTaskToReadyList+0xd0>)
 8003842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <prvAddNewTaskToReadyList+0xd0>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <prvAddNewTaskToReadyList+0xd4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d903      	bls.n	8003860 <prvAddNewTaskToReadyList+0x74>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <prvAddNewTaskToReadyList+0xd4>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4a15      	ldr	r2, [pc, #84]	@ (80038c4 <prvAddNewTaskToReadyList+0xd8>)
 800386e:	441a      	add	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7fe feef 	bl	800265a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800387c:	f001 fade 	bl	8004e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003880:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <prvAddNewTaskToReadyList+0xcc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <prvAddNewTaskToReadyList+0xc8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	429a      	cmp	r2, r3
 8003894:	d207      	bcs.n	80038a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003896:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <prvAddNewTaskToReadyList+0xdc>)
 8003898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000d04 	.word	0x20000d04
 80038b4:	20000830 	.word	0x20000830
 80038b8:	20000d10 	.word	0x20000d10
 80038bc:	20000d20 	.word	0x20000d20
 80038c0:	20000d0c 	.word	0x20000d0c
 80038c4:	20000834 	.word	0x20000834
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038de:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <vTaskDelay+0x64>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <vTaskDelay+0x32>
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	60bb      	str	r3, [r7, #8]
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	e7fd      	b.n	80038fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038fe:	f000 f883 	bl	8003a08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003902:	2100      	movs	r1, #0
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fe05 	bl	8004514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800390a:	f000 f88b 	bl	8003a24 <xTaskResumeAll>
 800390e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003916:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <vTaskDelay+0x68>)
 8003918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000d2c 	.word	0x20000d2c
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	@ 0x28
 800393c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003946:	463a      	mov	r2, r7
 8003948:	1d39      	adds	r1, r7, #4
 800394a:	f107 0308 	add.w	r3, r7, #8
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fe26 	bl	80025a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	9202      	str	r2, [sp, #8]
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	2300      	movs	r3, #0
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	460a      	mov	r2, r1
 8003966:	4922      	ldr	r1, [pc, #136]	@ (80039f0 <vTaskStartScheduler+0xb8>)
 8003968:	4822      	ldr	r0, [pc, #136]	@ (80039f4 <vTaskStartScheduler+0xbc>)
 800396a:	f7ff fe13 	bl	8003594 <xTaskCreateStatic>
 800396e:	4603      	mov	r3, r0
 8003970:	4a21      	ldr	r2, [pc, #132]	@ (80039f8 <vTaskStartScheduler+0xc0>)
 8003972:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003974:	4b20      	ldr	r3, [pc, #128]	@ (80039f8 <vTaskStartScheduler+0xc0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800397c:	2301      	movs	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e001      	b.n	8003986 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d102      	bne.n	8003992 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800398c:	f000 fe16 	bl	80045bc <xTimerCreateTimerTask>
 8003990:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d116      	bne.n	80039c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	613b      	str	r3, [r7, #16]
}
 80039aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039ac:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <vTaskStartScheduler+0xc4>)
 80039ae:	f04f 32ff 	mov.w	r2, #4294967295
 80039b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039b4:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <vTaskStartScheduler+0xc8>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039ba:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <vTaskStartScheduler+0xcc>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039c0:	f001 f99a 	bl	8004cf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039c4:	e00f      	b.n	80039e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d10b      	bne.n	80039e6 <vTaskStartScheduler+0xae>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	60fb      	str	r3, [r7, #12]
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <vTaskStartScheduler+0xaa>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	08005518 	.word	0x08005518
 80039f4:	08004031 	.word	0x08004031
 80039f8:	20000d28 	.word	0x20000d28
 80039fc:	20000d24 	.word	0x20000d24
 8003a00:	20000d10 	.word	0x20000d10
 8003a04:	20000d08 	.word	0x20000d08

08003a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a0c:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <vTaskSuspendAll+0x18>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a03      	ldr	r2, [pc, #12]	@ (8003a20 <vTaskSuspendAll+0x18>)
 8003a14:	6013      	str	r3, [r2, #0]
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000d2c 	.word	0x20000d2c

08003a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a32:	4b42      	ldr	r3, [pc, #264]	@ (8003b3c <xTaskResumeAll+0x118>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <xTaskResumeAll+0x2e>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	603b      	str	r3, [r7, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	e7fd      	b.n	8003a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a52:	f001 f9c3 	bl	8004ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a56:	4b39      	ldr	r3, [pc, #228]	@ (8003b3c <xTaskResumeAll+0x118>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	4a37      	ldr	r2, [pc, #220]	@ (8003b3c <xTaskResumeAll+0x118>)
 8003a5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a60:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <xTaskResumeAll+0x118>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d162      	bne.n	8003b2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a68:	4b35      	ldr	r3, [pc, #212]	@ (8003b40 <xTaskResumeAll+0x11c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05e      	beq.n	8003b2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a70:	e02f      	b.n	8003ad2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a72:	4b34      	ldr	r3, [pc, #208]	@ (8003b44 <xTaskResumeAll+0x120>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fe46 	bl	8002710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fe41 	bl	8002710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a92:	4b2d      	ldr	r3, [pc, #180]	@ (8003b48 <xTaskResumeAll+0x124>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d903      	bls.n	8003aa2 <xTaskResumeAll+0x7e>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b48 <xTaskResumeAll+0x124>)
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a27      	ldr	r2, [pc, #156]	@ (8003b4c <xTaskResumeAll+0x128>)
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7fe fdce 	bl	800265a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac2:	4b23      	ldr	r3, [pc, #140]	@ (8003b50 <xTaskResumeAll+0x12c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003acc:	4b21      	ldr	r3, [pc, #132]	@ (8003b54 <xTaskResumeAll+0x130>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <xTaskResumeAll+0x120>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1cb      	bne.n	8003a72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ae0:	f000 fb5c 	bl	800419c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <xTaskResumeAll+0x134>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d010      	beq.n	8003b12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003af0:	f000 f844 	bl	8003b7c <xTaskIncrementTick>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003afa:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <xTaskResumeAll+0x130>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f1      	bne.n	8003af0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <xTaskResumeAll+0x134>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b12:	4b10      	ldr	r3, [pc, #64]	@ (8003b54 <xTaskResumeAll+0x130>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <xTaskResumeAll+0x138>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b2e:	f001 f985 	bl	8004e3c <vPortExitCritical>

	return xAlreadyYielded;
 8003b32:	68bb      	ldr	r3, [r7, #8]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000d2c 	.word	0x20000d2c
 8003b40:	20000d04 	.word	0x20000d04
 8003b44:	20000cc4 	.word	0x20000cc4
 8003b48:	20000d0c 	.word	0x20000d0c
 8003b4c:	20000834 	.word	0x20000834
 8003b50:	20000830 	.word	0x20000830
 8003b54:	20000d18 	.word	0x20000d18
 8003b58:	20000d14 	.word	0x20000d14
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b66:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <xTaskGetTickCount+0x18>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b6c:	687b      	ldr	r3, [r7, #4]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	20000d08 	.word	0x20000d08

08003b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b86:	4b52      	ldr	r3, [pc, #328]	@ (8003cd0 <xTaskIncrementTick+0x154>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 808f 	bne.w	8003cae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b90:	4b50      	ldr	r3, [pc, #320]	@ (8003cd4 <xTaskIncrementTick+0x158>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b98:	4a4e      	ldr	r2, [pc, #312]	@ (8003cd4 <xTaskIncrementTick+0x158>)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d121      	bne.n	8003be8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd8 <xTaskIncrementTick+0x15c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	603b      	str	r3, [r7, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	e7fd      	b.n	8003bc2 <xTaskIncrementTick+0x46>
 8003bc6:	4b44      	ldr	r3, [pc, #272]	@ (8003cd8 <xTaskIncrementTick+0x15c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	4b43      	ldr	r3, [pc, #268]	@ (8003cdc <xTaskIncrementTick+0x160>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a41      	ldr	r2, [pc, #260]	@ (8003cd8 <xTaskIncrementTick+0x15c>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4a41      	ldr	r2, [pc, #260]	@ (8003cdc <xTaskIncrementTick+0x160>)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b41      	ldr	r3, [pc, #260]	@ (8003ce0 <xTaskIncrementTick+0x164>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce0 <xTaskIncrementTick+0x164>)
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	f000 fada 	bl	800419c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003be8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <xTaskIncrementTick+0x168>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d34e      	bcc.n	8003c90 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bf2:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <xTaskIncrementTick+0x15c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <xTaskIncrementTick+0x84>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <xTaskIncrementTick+0x86>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c06:	4b37      	ldr	r3, [pc, #220]	@ (8003ce4 <xTaskIncrementTick+0x168>)
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	601a      	str	r2, [r3, #0]
					break;
 8003c0e:	e03f      	b.n	8003c90 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c10:	4b31      	ldr	r3, [pc, #196]	@ (8003cd8 <xTaskIncrementTick+0x15c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d203      	bcs.n	8003c30 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c28:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce4 <xTaskIncrementTick+0x168>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
						break;
 8003c2e:	e02f      	b.n	8003c90 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fd6b 	bl	8002710 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3318      	adds	r3, #24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fd62 	bl	8002710 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c50:	4b25      	ldr	r3, [pc, #148]	@ (8003ce8 <xTaskIncrementTick+0x16c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d903      	bls.n	8003c60 <xTaskIncrementTick+0xe4>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ce8 <xTaskIncrementTick+0x16c>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cec <xTaskIncrementTick+0x170>)
 8003c6e:	441a      	add	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fe fcef 	bl	800265a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c80:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <xTaskIncrementTick+0x174>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3b3      	bcc.n	8003bf2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8e:	e7b0      	b.n	8003bf2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c90:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <xTaskIncrementTick+0x174>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c96:	4915      	ldr	r1, [pc, #84]	@ (8003cec <xTaskIncrementTick+0x170>)
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d907      	bls.n	8003cb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e004      	b.n	8003cb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cae:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <xTaskIncrementTick+0x178>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <xTaskIncrementTick+0x178>)
 8003cb6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <xTaskIncrementTick+0x17c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003cc4:	697b      	ldr	r3, [r7, #20]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000d2c 	.word	0x20000d2c
 8003cd4:	20000d08 	.word	0x20000d08
 8003cd8:	20000cbc 	.word	0x20000cbc
 8003cdc:	20000cc0 	.word	0x20000cc0
 8003ce0:	20000d1c 	.word	0x20000d1c
 8003ce4:	20000d24 	.word	0x20000d24
 8003ce8:	20000d0c 	.word	0x20000d0c
 8003cec:	20000834 	.word	0x20000834
 8003cf0:	20000830 	.word	0x20000830
 8003cf4:	20000d14 	.word	0x20000d14
 8003cf8:	20000d18 	.word	0x20000d18

08003cfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d02:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <vTaskSwitchContext+0xa8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d0a:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <vTaskSwitchContext+0xac>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d10:	e042      	b.n	8003d98 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003d12:	4b25      	ldr	r3, [pc, #148]	@ (8003da8 <vTaskSwitchContext+0xac>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d18:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <vTaskSwitchContext+0xb0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e011      	b.n	8003d44 <vTaskSwitchContext+0x48>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <vTaskSwitchContext+0x42>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	607b      	str	r3, [r7, #4]
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	e7fd      	b.n	8003d3a <vTaskSwitchContext+0x3e>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	491a      	ldr	r1, [pc, #104]	@ (8003db0 <vTaskSwitchContext+0xb4>)
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0e3      	beq.n	8003d20 <vTaskSwitchContext+0x24>
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4a13      	ldr	r2, [pc, #76]	@ (8003db0 <vTaskSwitchContext+0xb4>)
 8003d64:	4413      	add	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d104      	bne.n	8003d88 <vTaskSwitchContext+0x8c>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4a09      	ldr	r2, [pc, #36]	@ (8003db4 <vTaskSwitchContext+0xb8>)
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4a06      	ldr	r2, [pc, #24]	@ (8003dac <vTaskSwitchContext+0xb0>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000d2c 	.word	0x20000d2c
 8003da8:	20000d18 	.word	0x20000d18
 8003dac:	20000d0c 	.word	0x20000d0c
 8003db0:	20000834 	.word	0x20000834
 8003db4:	20000830 	.word	0x20000830

08003db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	60fb      	str	r3, [r7, #12]
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003de0:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <vTaskPlaceOnEventList+0x48>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3318      	adds	r3, #24
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fe fc59 	bl	80026a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dee:	2101      	movs	r1, #1
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	f000 fb8f 	bl	8004514 <prvAddCurrentTaskToDelayedList>
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000830 	.word	0x20000830

08003e04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4619      	mov	r1, r3
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7fe fc0f 	bl	800265a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f000 fb62 	bl	8004514 <prvAddCurrentTaskToDelayedList>
	}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000830 	.word	0x20000830

08003e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60fb      	str	r3, [r7, #12]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3318      	adds	r3, #24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fc3e 	bl	8002710 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e94:	4b1d      	ldr	r3, [pc, #116]	@ (8003f0c <xTaskRemoveFromEventList+0xb0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11d      	bne.n	8003ed8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fc35 	bl	8002710 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eaa:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <xTaskRemoveFromEventList+0xb4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d903      	bls.n	8003eba <xTaskRemoveFromEventList+0x5e>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <xTaskRemoveFromEventList+0xb4>)
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4a13      	ldr	r2, [pc, #76]	@ (8003f14 <xTaskRemoveFromEventList+0xb8>)
 8003ec8:	441a      	add	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fbc2 	bl	800265a <vListInsertEnd>
 8003ed6:	e005      	b.n	8003ee4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3318      	adds	r3, #24
 8003edc:	4619      	mov	r1, r3
 8003ede:	480e      	ldr	r0, [pc, #56]	@ (8003f18 <xTaskRemoveFromEventList+0xbc>)
 8003ee0:	f7fe fbbb 	bl	800265a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <xTaskRemoveFromEventList+0xc0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d905      	bls.n	8003efe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <xTaskRemoveFromEventList+0xc4>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e001      	b.n	8003f02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003f02:	697b      	ldr	r3, [r7, #20]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000d2c 	.word	0x20000d2c
 8003f10:	20000d0c 	.word	0x20000d0c
 8003f14:	20000834 	.word	0x20000834
 8003f18:	20000cc4 	.word	0x20000cc4
 8003f1c:	20000830 	.word	0x20000830
 8003f20:	20000d18 	.word	0x20000d18

08003f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <vTaskInternalSetTimeOutState+0x24>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <vTaskInternalSetTimeOutState+0x28>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000d1c 	.word	0x20000d1c
 8003f4c:	20000d08 	.word	0x20000d08

08003f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	613b      	str	r3, [r7, #16]
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	60fb      	str	r3, [r7, #12]
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	e7fd      	b.n	8003f92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f96:	f000 ff21 	bl	8004ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <xTaskCheckForTimeOut+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d102      	bne.n	8003fba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e023      	b.n	8004002 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <xTaskCheckForTimeOut+0xc4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d007      	beq.n	8003fd6 <xTaskCheckForTimeOut+0x86>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e015      	b.n	8004002 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d20b      	bcs.n	8003ff8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff99 	bl	8003f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e004      	b.n	8004002 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004002:	f000 ff1b 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 8004006:	69fb      	ldr	r3, [r7, #28]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000d08 	.word	0x20000d08
 8004014:	20000d1c 	.word	0x20000d1c

08004018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800401c:	4b03      	ldr	r3, [pc, #12]	@ (800402c <vTaskMissedYield+0x14>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000d18 	.word	0x20000d18

08004030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004038:	f000 f852 	bl	80040e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800403c:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <prvIdleTask+0x28>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d9f9      	bls.n	8004038 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <prvIdleTask+0x2c>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004054:	e7f0      	b.n	8004038 <prvIdleTask+0x8>
 8004056:	bf00      	nop
 8004058:	20000834 	.word	0x20000834
 800405c:	e000ed04 	.word	0xe000ed04

08004060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	e00c      	b.n	8004086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <prvInitialiseTaskLists+0x60>)
 8004078:	4413      	add	r3, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fac2 	bl	8002604 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3301      	adds	r3, #1
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b37      	cmp	r3, #55	@ 0x37
 800408a:	d9ef      	bls.n	800406c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800408c:	480d      	ldr	r0, [pc, #52]	@ (80040c4 <prvInitialiseTaskLists+0x64>)
 800408e:	f7fe fab9 	bl	8002604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004092:	480d      	ldr	r0, [pc, #52]	@ (80040c8 <prvInitialiseTaskLists+0x68>)
 8004094:	f7fe fab6 	bl	8002604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004098:	480c      	ldr	r0, [pc, #48]	@ (80040cc <prvInitialiseTaskLists+0x6c>)
 800409a:	f7fe fab3 	bl	8002604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800409e:	480c      	ldr	r0, [pc, #48]	@ (80040d0 <prvInitialiseTaskLists+0x70>)
 80040a0:	f7fe fab0 	bl	8002604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040a4:	480b      	ldr	r0, [pc, #44]	@ (80040d4 <prvInitialiseTaskLists+0x74>)
 80040a6:	f7fe faad 	bl	8002604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <prvInitialiseTaskLists+0x78>)
 80040ac:	4a05      	ldr	r2, [pc, #20]	@ (80040c4 <prvInitialiseTaskLists+0x64>)
 80040ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <prvInitialiseTaskLists+0x7c>)
 80040b2:	4a05      	ldr	r2, [pc, #20]	@ (80040c8 <prvInitialiseTaskLists+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000834 	.word	0x20000834
 80040c4:	20000c94 	.word	0x20000c94
 80040c8:	20000ca8 	.word	0x20000ca8
 80040cc:	20000cc4 	.word	0x20000cc4
 80040d0:	20000cd8 	.word	0x20000cd8
 80040d4:	20000cf0 	.word	0x20000cf0
 80040d8:	20000cbc 	.word	0x20000cbc
 80040dc:	20000cc0 	.word	0x20000cc0

080040e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040e6:	e019      	b.n	800411c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040e8:	f000 fe78 	bl	8004ddc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80040ec:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <prvCheckTasksWaitingTermination+0x50>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fb09 	bl	8002710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <prvCheckTasksWaitingTermination+0x54>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	4a0b      	ldr	r2, [pc, #44]	@ (8004134 <prvCheckTasksWaitingTermination+0x54>)
 8004106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <prvCheckTasksWaitingTermination+0x58>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3b01      	subs	r3, #1
 800410e:	4a0a      	ldr	r2, [pc, #40]	@ (8004138 <prvCheckTasksWaitingTermination+0x58>)
 8004110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004112:	f000 fe93 	bl	8004e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f810 	bl	800413c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <prvCheckTasksWaitingTermination+0x58>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e1      	bne.n	80040e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000cd8 	.word	0x20000cd8
 8004134:	20000d04 	.word	0x20000d04
 8004138:	20000cec 	.word	0x20000cec

0800413c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800414a:	2b00      	cmp	r3, #0
 800414c:	d108      	bne.n	8004160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f80c 	bl	8005170 <vPortFree>
				vPortFree( pxTCB );
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 f809 	bl	8005170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800415e:	e019      	b.n	8004194 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004166:	2b01      	cmp	r3, #1
 8004168:	d103      	bne.n	8004172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f001 f800 	bl	8005170 <vPortFree>
	}
 8004170:	e010      	b.n	8004194 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00b      	beq.n	8004194 <prvDeleteTCB+0x58>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <prvDeleteTCB+0x54>
	}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a2:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <prvResetNextTaskUnblockTime+0x40>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <prvResetNextTaskUnblockTime+0x14>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <prvResetNextTaskUnblockTime+0x16>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <prvResetNextTaskUnblockTime+0x44>)
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041be:	e008      	b.n	80041d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041c0:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <prvResetNextTaskUnblockTime+0x40>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <prvResetNextTaskUnblockTime+0x44>)
 80041d0:	6013      	str	r3, [r2, #0]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	20000cbc 	.word	0x20000cbc
 80041e0:	20000d24 	.word	0x20000d24

080041e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <xTaskGetSchedulerState+0x34>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041f2:	2301      	movs	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	e008      	b.n	800420a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f8:	4b08      	ldr	r3, [pc, #32]	@ (800421c <xTaskGetSchedulerState+0x38>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004200:	2302      	movs	r3, #2
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	e001      	b.n	800420a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800420a:	687b      	ldr	r3, [r7, #4]
	}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000d10 	.word	0x20000d10
 800421c:	20000d2c 	.word	0x20000d2c

08004220 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d056      	beq.n	80042e4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423a:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <xTaskPriorityInherit+0xd0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	429a      	cmp	r2, r3
 8004242:	d246      	bcs.n	80042d2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	db06      	blt.n	800425a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424c:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <xTaskPriorityInherit+0xd0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6959      	ldr	r1, [r3, #20]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4a22      	ldr	r2, [pc, #136]	@ (80042f4 <xTaskPriorityInherit+0xd4>)
 800426c:	4413      	add	r3, r2
 800426e:	4299      	cmp	r1, r3
 8004270:	d101      	bne.n	8004276 <xTaskPriorityInherit+0x56>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <xTaskPriorityInherit+0x58>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d022      	beq.n	80042c2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fa45 	bl	8002710 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <xTaskPriorityInherit+0xd0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004294:	4b18      	ldr	r3, [pc, #96]	@ (80042f8 <xTaskPriorityInherit+0xd8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d903      	bls.n	80042a4 <xTaskPriorityInherit+0x84>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <xTaskPriorityInherit+0xd8>)
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4a10      	ldr	r2, [pc, #64]	@ (80042f4 <xTaskPriorityInherit+0xd4>)
 80042b2:	441a      	add	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7fe f9cd 	bl	800265a <vListInsertEnd>
 80042c0:	e004      	b.n	80042cc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042c2:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <xTaskPriorityInherit+0xd0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	e008      	b.n	80042e4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042d6:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <xTaskPriorityInherit+0xd0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	429a      	cmp	r2, r3
 80042de:	d201      	bcs.n	80042e4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042e4:	68fb      	ldr	r3, [r7, #12]
	}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000830 	.word	0x20000830
 80042f4:	20000834 	.word	0x20000834
 80042f8:	20000d0c 	.word	0x20000d0c

080042fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d058      	beq.n	80043c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004312:	4b2f      	ldr	r3, [pc, #188]	@ (80043d0 <xTaskPriorityDisinherit+0xd4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	429a      	cmp	r2, r3
 800431a:	d00b      	beq.n	8004334 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	60fb      	str	r3, [r7, #12]
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60bb      	str	r3, [r7, #8]
}
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	e7fd      	b.n	8004350 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004358:	1e5a      	subs	r2, r3, #1
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	429a      	cmp	r2, r3
 8004368:	d02c      	beq.n	80043c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d128      	bne.n	80043c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe f9ca 	bl	8002710 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004394:	4b0f      	ldr	r3, [pc, #60]	@ (80043d4 <xTaskPriorityDisinherit+0xd8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d903      	bls.n	80043a4 <xTaskPriorityDisinherit+0xa8>
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	4a0c      	ldr	r2, [pc, #48]	@ (80043d4 <xTaskPriorityDisinherit+0xd8>)
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4a09      	ldr	r2, [pc, #36]	@ (80043d8 <xTaskPriorityDisinherit+0xdc>)
 80043b2:	441a      	add	r2, r3
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f7fe f94d 	bl	800265a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043c4:	697b      	ldr	r3, [r7, #20]
	}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000830 	.word	0x20000830
 80043d4:	20000d0c 	.word	0x20000d0c
 80043d8:	20000834 	.word	0x20000834

080043dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d071      	beq.n	80044d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60fb      	str	r3, [r7, #12]
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d902      	bls.n	8004424 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e002      	b.n	800442a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004428:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	429a      	cmp	r2, r3
 8004432:	d051      	beq.n	80044d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	429a      	cmp	r2, r3
 800443c:	d14c      	bne.n	80044d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800443e:	4b28      	ldr	r3, [pc, #160]	@ (80044e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	d10b      	bne.n	8004460 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60bb      	str	r3, [r7, #8]
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	db04      	blt.n	800447e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6959      	ldr	r1, [r3, #20]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a15      	ldr	r2, [pc, #84]	@ (80044e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800448e:	4413      	add	r3, r2
 8004490:	4299      	cmp	r1, r3
 8004492:	d101      	bne.n	8004498 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01c      	beq.n	80044d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe f934 	bl	8002710 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d903      	bls.n	80044bc <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	4a0b      	ldr	r2, [pc, #44]	@ (80044e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a06      	ldr	r2, [pc, #24]	@ (80044e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80044ca:	441a      	add	r2, r3
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f7fe f8c1 	bl	800265a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044d8:	bf00      	nop
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000830 	.word	0x20000830
 80044e4:	20000834 	.word	0x20000834
 80044e8:	20000d0c 	.word	0x20000d0c

080044ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80044f0:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <pvTaskIncrementMutexHeldCount+0x24>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <pvTaskIncrementMutexHeldCount+0x24>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044fe:	3201      	adds	r2, #1
 8004500:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004502:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <pvTaskIncrementMutexHeldCount+0x24>)
 8004504:	681b      	ldr	r3, [r3, #0]
	}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000830 	.word	0x20000830

08004514 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800451e:	4b21      	ldr	r3, [pc, #132]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004524:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe f8f0 	bl	8002710 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d10a      	bne.n	800454e <prvAddCurrentTaskToDelayedList+0x3a>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4819      	ldr	r0, [pc, #100]	@ (80045ac <prvAddCurrentTaskToDelayedList+0x98>)
 8004548:	f7fe f887 	bl	800265a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800454c:	e026      	b.n	800459c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004556:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	429a      	cmp	r2, r3
 8004564:	d209      	bcs.n	800457a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004566:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7fe f894 	bl	80026a0 <vListInsert>
}
 8004578:	e010      	b.n	800459c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fe f88a 	bl	80026a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d202      	bcs.n	800459c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004596:	4a08      	ldr	r2, [pc, #32]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000d08 	.word	0x20000d08
 80045a8:	20000830 	.word	0x20000830
 80045ac:	20000cf0 	.word	0x20000cf0
 80045b0:	20000cc0 	.word	0x20000cc0
 80045b4:	20000cbc 	.word	0x20000cbc
 80045b8:	20000d24 	.word	0x20000d24

080045bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	@ 0x28
 80045c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045c6:	f000 fad9 	bl	8004b7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <xTimerCreateTimerTask+0x84>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d021      	beq.n	8004616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045da:	1d3a      	adds	r2, r7, #4
 80045dc:	f107 0108 	add.w	r1, r7, #8
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd fff3 	bl	80025d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	9202      	str	r2, [sp, #8]
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	2302      	movs	r3, #2
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	460a      	mov	r2, r1
 80045fc:	4911      	ldr	r1, [pc, #68]	@ (8004644 <xTimerCreateTimerTask+0x88>)
 80045fe:	4812      	ldr	r0, [pc, #72]	@ (8004648 <xTimerCreateTimerTask+0x8c>)
 8004600:	f7fe ffc8 	bl	8003594 <xTaskCreateStatic>
 8004604:	4603      	mov	r3, r0
 8004606:	4a11      	ldr	r2, [pc, #68]	@ (800464c <xTimerCreateTimerTask+0x90>)
 8004608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800460a:	4b10      	ldr	r3, [pc, #64]	@ (800464c <xTimerCreateTimerTask+0x90>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	613b      	str	r3, [r7, #16]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004634:	697b      	ldr	r3, [r7, #20]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000d60 	.word	0x20000d60
 8004644:	08005520 	.word	0x08005520
 8004648:	08004771 	.word	0x08004771
 800464c:	20000d64 	.word	0x20000d64

08004650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	@ 0x28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800465e:	2300      	movs	r3, #0
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <xTimerGenericCommand+0x30>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	623b      	str	r3, [r7, #32]
}
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	e7fd      	b.n	800467c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <xTimerGenericCommand+0x98>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02a      	beq.n	80046de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b05      	cmp	r3, #5
 8004698:	dc18      	bgt.n	80046cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800469a:	f7ff fda3 	bl	80041e4 <xTaskGetSchedulerState>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d109      	bne.n	80046b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046a4:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <xTimerGenericCommand+0x98>)
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	f107 0110 	add.w	r1, r7, #16
 80046ac:	2300      	movs	r3, #0
 80046ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b0:	f7fe fa0e 	bl	8002ad0 <xQueueGenericSend>
 80046b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80046b6:	e012      	b.n	80046de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <xTimerGenericCommand+0x98>)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	f107 0110 	add.w	r1, r7, #16
 80046c0:	2300      	movs	r3, #0
 80046c2:	2200      	movs	r2, #0
 80046c4:	f7fe fa04 	bl	8002ad0 <xQueueGenericSend>
 80046c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80046ca:	e008      	b.n	80046de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046cc:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <xTimerGenericCommand+0x98>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	f107 0110 	add.w	r1, r7, #16
 80046d4:	2300      	movs	r3, #0
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	f7fe fafc 	bl	8002cd4 <xQueueGenericSendFromISR>
 80046dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3728      	adds	r7, #40	@ 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000d60 	.word	0x20000d60

080046ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046f6:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <prvProcessExpiredTimer+0x80>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3304      	adds	r3, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe f803 	bl	8002710 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d123      	bne.n	800475a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	18d1      	adds	r1, r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	6978      	ldr	r0, [r7, #20]
 8004720:	f000 f8cc 	bl	80048bc <prvInsertTimerInActiveList>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d017      	beq.n	800475a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800472a:	2300      	movs	r3, #0
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	2300      	movs	r3, #0
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	2100      	movs	r1, #0
 8004734:	6978      	ldr	r0, [r7, #20]
 8004736:	f7ff ff8b 	bl	8004650 <xTimerGenericCommand>
 800473a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60fb      	str	r3, [r7, #12]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	4798      	blx	r3
}
 8004762:	bf00      	nop
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000d58 	.word	0x20000d58

08004770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004778:	f107 0308 	add.w	r3, r7, #8
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f859 	bl	8004834 <prvGetNextExpireTime>
 8004782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4619      	mov	r1, r3
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f805 	bl	8004798 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800478e:	f000 f8d7 	bl	8004940 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004792:	bf00      	nop
 8004794:	e7f0      	b.n	8004778 <prvTimerTask+0x8>
	...

08004798 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047a2:	f7ff f931 	bl	8003a08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047a6:	f107 0308 	add.w	r3, r7, #8
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f866 	bl	800487c <prvSampleTimeNow>
 80047b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d130      	bne.n	800481a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <prvProcessTimerOrBlockTask+0x3c>
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d806      	bhi.n	80047d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047c6:	f7ff f92d 	bl	8003a24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff8d 	bl	80046ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047d2:	e024      	b.n	800481e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047da:	4b13      	ldr	r3, [pc, #76]	@ (8004828 <prvProcessTimerOrBlockTask+0x90>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <prvProcessTimerOrBlockTask+0x94>)
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4619      	mov	r1, r3
 80047fa:	f7fe fe97 	bl	800352c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047fe:	f7ff f911 	bl	8003a24 <xTaskResumeAll>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <prvProcessTimerOrBlockTask+0x98>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
}
 8004818:	e001      	b.n	800481e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800481a:	f7ff f903 	bl	8003a24 <xTaskResumeAll>
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000d5c 	.word	0x20000d5c
 800482c:	20000d60 	.word	0x20000d60
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800483c:	4b0e      	ldr	r3, [pc, #56]	@ (8004878 <prvGetNextExpireTime+0x44>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800485a:	4b07      	ldr	r3, [pc, #28]	@ (8004878 <prvGetNextExpireTime+0x44>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e001      	b.n	800486a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000d58 	.word	0x20000d58

0800487c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004884:	f7ff f96c 	bl	8003b60 <xTaskGetTickCount>
 8004888:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <prvSampleTimeNow+0x3c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	429a      	cmp	r2, r3
 8004892:	d205      	bcs.n	80048a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004894:	f000 f910 	bl	8004ab8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e002      	b.n	80048a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048a6:	4a04      	ldr	r2, [pc, #16]	@ (80048b8 <prvSampleTimeNow+0x3c>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048ac:	68fb      	ldr	r3, [r7, #12]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000d68 	.word	0x20000d68

080048bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d812      	bhi.n	8004908 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e01b      	b.n	800492e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048f6:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <prvInsertTimerInActiveList+0x7c>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7fd fecd 	bl	80026a0 <vListInsert>
 8004906:	e012      	b.n	800492e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d206      	bcs.n	800491e <prvInsertTimerInActiveList+0x62>
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e007      	b.n	800492e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800491e:	4b07      	ldr	r3, [pc, #28]	@ (800493c <prvInsertTimerInActiveList+0x80>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fd feb9 	bl	80026a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800492e:	697b      	ldr	r3, [r7, #20]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000d5c 	.word	0x20000d5c
 800493c:	20000d58 	.word	0x20000d58

08004940 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08e      	sub	sp, #56	@ 0x38
 8004944:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004946:	e0a5      	b.n	8004a94 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	da19      	bge.n	8004982 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	3304      	adds	r3, #4
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	61fb      	str	r3, [r7, #28]
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004978:	6850      	ldr	r0, [r2, #4]
 800497a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497c:	6892      	ldr	r2, [r2, #8]
 800497e:	4611      	mov	r1, r2
 8004980:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f2c0 8085 	blt.w	8004a94 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d004      	beq.n	80049a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	3304      	adds	r3, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd feb8 	bl	8002710 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049a0:	463b      	mov	r3, r7
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ff6a 	bl	800487c <prvSampleTimeNow>
 80049a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b09      	cmp	r3, #9
 80049ae:	d86c      	bhi.n	8004a8a <prvProcessReceivedCommands+0x14a>
 80049b0:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <prvProcessReceivedCommands+0x78>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e1 	.word	0x080049e1
 80049c4:	08004a8b 	.word	0x08004a8b
 80049c8:	08004a3f 	.word	0x08004a3f
 80049cc:	08004a79 	.word	0x08004a79
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049e1 	.word	0x080049e1
 80049d8:	08004a8b 	.word	0x08004a8b
 80049dc:	08004a3f 	.word	0x08004a3f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	18d1      	adds	r1, r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ee:	f7ff ff65 	bl	80048bc <prvInsertTimerInActiveList>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d04a      	beq.n	8004a8e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d142      	bne.n	8004a8e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	441a      	add	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2300      	movs	r3, #0
 8004a16:	2100      	movs	r1, #0
 8004a18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a1a:	f7ff fe19 	bl	8004650 <xTimerGenericCommand>
 8004a1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d133      	bne.n	8004a8e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	61bb      	str	r3, [r7, #24]
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	617b      	str	r3, [r7, #20]
}
 8004a5e:	bf00      	nop
 8004a60:	bf00      	nop
 8004a62:	e7fd      	b.n	8004a60 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	18d1      	adds	r1, r2, r3
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a72:	f7ff ff23 	bl	80048bc <prvInsertTimerInActiveList>
					break;
 8004a76:	e00d      	b.n	8004a94 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d107      	bne.n	8004a92 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a84:	f000 fb74 	bl	8005170 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a88:	e003      	b.n	8004a92 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <prvProcessReceivedCommands+0x154>
					break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <prvProcessReceivedCommands+0x154>
					break;
 8004a92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a94:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <prvProcessReceivedCommands+0x174>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	1d39      	adds	r1, r7, #4
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe f9b5 	bl	8002e0c <xQueueReceive>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f47f af4f 	bne.w	8004948 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	3730      	adds	r7, #48	@ 0x30
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000d60 	.word	0x20000d60

08004ab8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004abe:	e046      	b.n	8004b4e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8004b74 <prvSwitchTimerLists+0xbc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aca:	4b2a      	ldr	r3, [pc, #168]	@ (8004b74 <prvSwitchTimerLists+0xbc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fd fe19 	bl	8002710 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d12f      	bne.n	8004b4e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4413      	add	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d90e      	bls.n	8004b1e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b0c:	4b19      	ldr	r3, [pc, #100]	@ (8004b74 <prvSwitchTimerLists+0xbc>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fd fdc2 	bl	80026a0 <vListInsert>
 8004b1c:	e017      	b.n	8004b4e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b1e:	2300      	movs	r3, #0
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	2100      	movs	r1, #0
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7ff fd91 	bl	8004650 <xTimerGenericCommand>
 8004b2e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <prvSwitchTimerLists+0x96>
	__asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	603b      	str	r3, [r7, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	e7fd      	b.n	8004b4a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b4e:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <prvSwitchTimerLists+0xbc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1b3      	bne.n	8004ac0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b58:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <prvSwitchTimerLists+0xbc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <prvSwitchTimerLists+0xc0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <prvSwitchTimerLists+0xbc>)
 8004b64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b66:	4a04      	ldr	r2, [pc, #16]	@ (8004b78 <prvSwitchTimerLists+0xc0>)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	6013      	str	r3, [r2, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000d58 	.word	0x20000d58
 8004b78:	20000d5c 	.word	0x20000d5c

08004b7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b82:	f000 f92b 	bl	8004ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b86:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d120      	bne.n	8004bd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b8e:	4814      	ldr	r0, [pc, #80]	@ (8004be0 <prvCheckForValidListAndQueue+0x64>)
 8004b90:	f7fd fd38 	bl	8002604 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b94:	4813      	ldr	r0, [pc, #76]	@ (8004be4 <prvCheckForValidListAndQueue+0x68>)
 8004b96:	f7fd fd35 	bl	8002604 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	@ (8004be8 <prvCheckForValidListAndQueue+0x6c>)
 8004b9c:	4a10      	ldr	r2, [pc, #64]	@ (8004be0 <prvCheckForValidListAndQueue+0x64>)
 8004b9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	@ (8004bec <prvCheckForValidListAndQueue+0x70>)
 8004ba2:	4a10      	ldr	r2, [pc, #64]	@ (8004be4 <prvCheckForValidListAndQueue+0x68>)
 8004ba4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <prvCheckForValidListAndQueue+0x74>)
 8004bac:	4a11      	ldr	r2, [pc, #68]	@ (8004bf4 <prvCheckForValidListAndQueue+0x78>)
 8004bae:	2110      	movs	r1, #16
 8004bb0:	200a      	movs	r0, #10
 8004bb2:	f7fd fe41 	bl	8002838 <xQueueGenericCreateStatic>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4a08      	ldr	r2, [pc, #32]	@ (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004bba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bbc:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	490b      	ldr	r1, [pc, #44]	@ (8004bf8 <prvCheckForValidListAndQueue+0x7c>)
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fc5c 	bl	8003488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bd0:	f000 f934 	bl	8004e3c <vPortExitCritical>
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000d60 	.word	0x20000d60
 8004be0:	20000d30 	.word	0x20000d30
 8004be4:	20000d44 	.word	0x20000d44
 8004be8:	20000d58 	.word	0x20000d58
 8004bec:	20000d5c 	.word	0x20000d5c
 8004bf0:	20000e0c 	.word	0x20000e0c
 8004bf4:	20000d6c 	.word	0x20000d6c
 8004bf8:	08005528 	.word	0x08005528

08004bfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3b04      	subs	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c2c:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <pxPortInitialiseStack+0x54>)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b14      	subs	r3, #20
 8004c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b20      	subs	r3, #32
 8004c42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c44:	68fb      	ldr	r3, [r7, #12]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	08004c55 	.word	0x08004c55

08004c54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c5e:	4b12      	ldr	r3, [pc, #72]	@ (8004ca8 <prvTaskExitError+0x54>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d00b      	beq.n	8004c80 <prvTaskExitError+0x2c>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60fb      	str	r3, [r7, #12]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <prvTaskExitError+0x28>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60bb      	str	r3, [r7, #8]
}
 8004c92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c94:	bf00      	nop
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0fc      	beq.n	8004c96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	20000018 	.word	0x20000018
 8004cac:	00000000 	.word	0x00000000

08004cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cb0:	4b07      	ldr	r3, [pc, #28]	@ (8004cd0 <pxCurrentTCBConst2>)
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	6808      	ldr	r0, [r1, #0]
 8004cb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cba:	f380 8809 	msr	PSP, r0
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8811 	msr	BASEPRI, r0
 8004cca:	f04e 0e0d 	orr.w	lr, lr, #13
 8004cce:	4770      	bx	lr

08004cd0 <pxCurrentTCBConst2>:
 8004cd0:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004cd8:	4806      	ldr	r0, [pc, #24]	@ (8004cf4 <prvPortStartFirstTask+0x1c>)
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	6800      	ldr	r0, [r0, #0]
 8004cde:	f380 8808 	msr	MSP, r0
 8004ce2:	b662      	cpsie	i
 8004ce4:	b661      	cpsie	f
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	df00      	svc	0
 8004cf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cf2:	bf00      	nop
 8004cf4:	e000ed08 	.word	0xe000ed08

08004cf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cfe:	4b32      	ldr	r3, [pc, #200]	@ (8004dc8 <xPortStartScheduler+0xd0>)
 8004d00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	22ff      	movs	r2, #255	@ 0xff
 8004d0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	4b2a      	ldr	r3, [pc, #168]	@ (8004dcc <xPortStartScheduler+0xd4>)
 8004d24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d26:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d28:	2207      	movs	r2, #7
 8004d2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d2c:	e009      	b.n	8004d42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d2e:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b80      	cmp	r3, #128	@ 0x80
 8004d4c:	d0ef      	beq.n	8004d2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d4e:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1c3 0307 	rsb	r3, r3, #7
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d00b      	beq.n	8004d72 <xPortStartScheduler+0x7a>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60bb      	str	r3, [r7, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	4a15      	ldr	r2, [pc, #84]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d7c:	4b14      	ldr	r3, [pc, #80]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d84:	4a12      	ldr	r2, [pc, #72]	@ (8004dd0 <xPortStartScheduler+0xd8>)
 8004d86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d90:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <xPortStartScheduler+0xdc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd4 <xPortStartScheduler+0xdc>)
 8004d96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <xPortStartScheduler+0xdc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <xPortStartScheduler+0xdc>)
 8004da2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004da6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004da8:	f000 f8b8 	bl	8004f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <xPortStartScheduler+0xe0>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004db2:	f7ff ff91 	bl	8004cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004db6:	f7fe ffa1 	bl	8003cfc <vTaskSwitchContext>
	prvTaskExitError();
 8004dba:	f7ff ff4b 	bl	8004c54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	e000e400 	.word	0xe000e400
 8004dcc:	20000e5c 	.word	0x20000e5c
 8004dd0:	20000e60 	.word	0x20000e60
 8004dd4:	e000ed20 	.word	0xe000ed20
 8004dd8:	20000018 	.word	0x20000018

08004ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	607b      	str	r3, [r7, #4]
}
 8004df4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <vPortEnterCritical+0x58>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004e34 <vPortEnterCritical+0x58>)
 8004dfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e00:	4b0c      	ldr	r3, [pc, #48]	@ (8004e34 <vPortEnterCritical+0x58>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d110      	bne.n	8004e2a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <vPortEnterCritical+0x5c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <vPortEnterCritical+0x4e>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	603b      	str	r3, [r7, #0]
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	e7fd      	b.n	8004e26 <vPortEnterCritical+0x4a>
	}
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	20000018 	.word	0x20000018
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e42:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <vPortExitCritical+0x26>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	607b      	str	r3, [r7, #4]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <vPortExitCritical+0x44>
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
}
 8004e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000018 	.word	0x20000018

08004e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e90:	f3ef 8009 	mrs	r0, PSP
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <pxCurrentTCBConst>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ea0:	6010      	str	r0, [r2, #0]
 8004ea2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ea6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004eaa:	f380 8811 	msr	BASEPRI, r0
 8004eae:	f7fe ff25 	bl	8003cfc <vTaskSwitchContext>
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	6808      	ldr	r0, [r1, #0]
 8004ec2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ec6:	f380 8809 	msr	PSP, r0
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	4770      	bx	lr

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ef2:	f7fe fe43 	bl	8003b7c <xTaskIncrementTick>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004efc:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <SysTick_Handler+0x40>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
}
 8004f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f20:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <vPortSetupTimerInterrupt+0x30>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f26:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f2c:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <vPortSetupTimerInterrupt+0x38>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a09      	ldr	r2, [pc, #36]	@ (8004f58 <vPortSetupTimerInterrupt+0x3c>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	4a08      	ldr	r2, [pc, #32]	@ (8004f5c <vPortSetupTimerInterrupt+0x40>)
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f3e:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <vPortSetupTimerInterrupt+0x30>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	e000e010 	.word	0xe000e010
 8004f50:	e000e018 	.word	0xe000e018
 8004f54:	2000000c 	.word	0x2000000c
 8004f58:	10624dd3 	.word	0x10624dd3
 8004f5c:	e000e014 	.word	0xe000e014

08004f60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f66:	f3ef 8305 	mrs	r3, IPSR
 8004f6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d915      	bls.n	8004f9e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f72:	4a17      	ldr	r2, [pc, #92]	@ (8004fd0 <vPortValidateInterruptPriority+0x70>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f7c:	4b15      	ldr	r3, [pc, #84]	@ (8004fd4 <vPortValidateInterruptPriority+0x74>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	7afa      	ldrb	r2, [r7, #11]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d20b      	bcs.n	8004f9e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	607b      	str	r3, [r7, #4]
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	e7fd      	b.n	8004f9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <vPortValidateInterruptPriority+0x78>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <vPortValidateInterruptPriority+0x7c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d90b      	bls.n	8004fc6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	603b      	str	r3, [r7, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <vPortValidateInterruptPriority+0x62>
	}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr
 8004fd0:	e000e3f0 	.word	0xe000e3f0
 8004fd4:	20000e5c 	.word	0x20000e5c
 8004fd8:	e000ed0c 	.word	0xe000ed0c
 8004fdc:	20000e60 	.word	0x20000e60

08004fe0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	@ 0x28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fec:	f7fe fd0c 	bl	8003a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800515c <pvPortMalloc+0x17c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ff8:	f000 f916 	bl	8005228 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ffc:	4b58      	ldr	r3, [pc, #352]	@ (8005160 <pvPortMalloc+0x180>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 8090 	bne.w	800512a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01e      	beq.n	800504e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005010:	2208      	movs	r2, #8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	2b00      	cmp	r3, #0
 8005020:	d015      	beq.n	800504e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f023 0307 	bic.w	r3, r3, #7
 8005028:	3308      	adds	r3, #8
 800502a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <pvPortMalloc+0x6e>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	617b      	str	r3, [r7, #20]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d06a      	beq.n	800512a <pvPortMalloc+0x14a>
 8005054:	4b43      	ldr	r3, [pc, #268]	@ (8005164 <pvPortMalloc+0x184>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d865      	bhi.n	800512a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800505e:	4b42      	ldr	r3, [pc, #264]	@ (8005168 <pvPortMalloc+0x188>)
 8005060:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005062:	4b41      	ldr	r3, [pc, #260]	@ (8005168 <pvPortMalloc+0x188>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005068:	e004      	b.n	8005074 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d903      	bls.n	8005086 <pvPortMalloc+0xa6>
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f1      	bne.n	800506a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005086:	4b35      	ldr	r3, [pc, #212]	@ (800515c <pvPortMalloc+0x17c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508c:	429a      	cmp	r2, r3
 800508e:	d04c      	beq.n	800512a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2208      	movs	r2, #8
 8005096:	4413      	add	r3, r2
 8005098:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	1ad2      	subs	r2, r2, r3
 80050aa:	2308      	movs	r3, #8
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d920      	bls.n	80050f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <pvPortMalloc+0xfc>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	613b      	str	r3, [r7, #16]
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050ee:	69b8      	ldr	r0, [r7, #24]
 80050f0:	f000 f8fc 	bl	80052ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <pvPortMalloc+0x184>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <pvPortMalloc+0x184>)
 8005100:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005102:	4b18      	ldr	r3, [pc, #96]	@ (8005164 <pvPortMalloc+0x184>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b19      	ldr	r3, [pc, #100]	@ (800516c <pvPortMalloc+0x18c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d203      	bcs.n	8005116 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800510e:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <pvPortMalloc+0x184>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a16      	ldr	r2, [pc, #88]	@ (800516c <pvPortMalloc+0x18c>)
 8005114:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	4b11      	ldr	r3, [pc, #68]	@ (8005160 <pvPortMalloc+0x180>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	431a      	orrs	r2, r3
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800512a:	f7fe fc7b 	bl	8003a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <pvPortMalloc+0x170>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	60fb      	str	r3, [r7, #12]
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	e7fd      	b.n	800514c <pvPortMalloc+0x16c>
	return pvReturn;
 8005150:	69fb      	ldr	r3, [r7, #28]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3728      	adds	r7, #40	@ 0x28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20001a6c 	.word	0x20001a6c
 8005160:	20001a78 	.word	0x20001a78
 8005164:	20001a70 	.word	0x20001a70
 8005168:	20001a64 	.word	0x20001a64
 800516c:	20001a74 	.word	0x20001a74

08005170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d04a      	beq.n	8005218 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005182:	2308      	movs	r3, #8
 8005184:	425b      	negs	r3, r3
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	4b22      	ldr	r3, [pc, #136]	@ (8005220 <vPortFree+0xb0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <vPortFree+0x46>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <vPortFree+0x66>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60bb      	str	r3, [r7, #8]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	4b11      	ldr	r3, [pc, #68]	@ (8005220 <vPortFree+0xb0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d019      	beq.n	8005218 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d115      	bne.n	8005218 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <vPortFree+0xb0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051fc:	f7fe fc04 	bl	8003a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <vPortFree+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4413      	add	r3, r2
 800520a:	4a06      	ldr	r2, [pc, #24]	@ (8005224 <vPortFree+0xb4>)
 800520c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800520e:	6938      	ldr	r0, [r7, #16]
 8005210:	f000 f86c 	bl	80052ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005214:	f7fe fc06 	bl	8003a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005218:	bf00      	nop
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20001a78 	.word	0x20001a78
 8005224:	20001a70 	.word	0x20001a70

08005228 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800522e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005232:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005234:	4b27      	ldr	r3, [pc, #156]	@ (80052d4 <prvHeapInit+0xac>)
 8005236:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00c      	beq.n	800525c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3307      	adds	r3, #7
 8005246:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0307 	bic.w	r3, r3, #7
 800524e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	4a1f      	ldr	r2, [pc, #124]	@ (80052d4 <prvHeapInit+0xac>)
 8005258:	4413      	add	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005260:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <prvHeapInit+0xb0>)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005266:	4b1c      	ldr	r3, [pc, #112]	@ (80052d8 <prvHeapInit+0xb0>)
 8005268:	2200      	movs	r2, #0
 800526a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4413      	add	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005274:	2208      	movs	r2, #8
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0307 	bic.w	r3, r3, #7
 8005282:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a15      	ldr	r2, [pc, #84]	@ (80052dc <prvHeapInit+0xb4>)
 8005288:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800528a:	4b14      	ldr	r3, [pc, #80]	@ (80052dc <prvHeapInit+0xb4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <prvHeapInit+0xb4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	1ad2      	subs	r2, r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052a8:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <prvHeapInit+0xb4>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a0a      	ldr	r2, [pc, #40]	@ (80052e0 <prvHeapInit+0xb8>)
 80052b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4a09      	ldr	r2, [pc, #36]	@ (80052e4 <prvHeapInit+0xbc>)
 80052be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052c0:	4b09      	ldr	r3, [pc, #36]	@ (80052e8 <prvHeapInit+0xc0>)
 80052c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052c6:	601a      	str	r2, [r3, #0]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000e64 	.word	0x20000e64
 80052d8:	20001a64 	.word	0x20001a64
 80052dc:	20001a6c 	.word	0x20001a6c
 80052e0:	20001a74 	.word	0x20001a74
 80052e4:	20001a70 	.word	0x20001a70
 80052e8:	20001a78 	.word	0x20001a78

080052ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052f4:	4b27      	ldr	r3, [pc, #156]	@ (8005394 <prvInsertBlockIntoFreeList+0xa8>)
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e002      	b.n	8005300 <prvInsertBlockIntoFreeList+0x14>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	429a      	cmp	r2, r3
 8005308:	d8f7      	bhi.n	80052fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d108      	bne.n	800532e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	441a      	add	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	441a      	add	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d118      	bne.n	8005374 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b14      	ldr	r3, [pc, #80]	@ (8005398 <prvInsertBlockIntoFreeList+0xac>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d00d      	beq.n	800536a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	441a      	add	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e008      	b.n	800537c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800536a:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <prvInsertBlockIntoFreeList+0xac>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e003      	b.n	800537c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	429a      	cmp	r2, r3
 8005382:	d002      	beq.n	800538a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	20001a64 	.word	0x20001a64
 8005398:	20001a6c 	.word	0x20001a6c

0800539c <memset>:
 800539c:	4603      	mov	r3, r0
 800539e:	4402      	add	r2, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d100      	bne.n	80053a6 <memset+0xa>
 80053a4:	4770      	bx	lr
 80053a6:	f803 1b01 	strb.w	r1, [r3], #1
 80053aa:	e7f9      	b.n	80053a0 <memset+0x4>

080053ac <__libc_init_array>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	2600      	movs	r6, #0
 80053b0:	4d0c      	ldr	r5, [pc, #48]	@ (80053e4 <__libc_init_array+0x38>)
 80053b2:	4c0d      	ldr	r4, [pc, #52]	@ (80053e8 <__libc_init_array+0x3c>)
 80053b4:	1b64      	subs	r4, r4, r5
 80053b6:	10a4      	asrs	r4, r4, #2
 80053b8:	42a6      	cmp	r6, r4
 80053ba:	d109      	bne.n	80053d0 <__libc_init_array+0x24>
 80053bc:	f000 f828 	bl	8005410 <_init>
 80053c0:	2600      	movs	r6, #0
 80053c2:	4d0a      	ldr	r5, [pc, #40]	@ (80053ec <__libc_init_array+0x40>)
 80053c4:	4c0a      	ldr	r4, [pc, #40]	@ (80053f0 <__libc_init_array+0x44>)
 80053c6:	1b64      	subs	r4, r4, r5
 80053c8:	10a4      	asrs	r4, r4, #2
 80053ca:	42a6      	cmp	r6, r4
 80053cc:	d105      	bne.n	80053da <__libc_init_array+0x2e>
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d4:	4798      	blx	r3
 80053d6:	3601      	adds	r6, #1
 80053d8:	e7ee      	b.n	80053b8 <__libc_init_array+0xc>
 80053da:	f855 3b04 	ldr.w	r3, [r5], #4
 80053de:	4798      	blx	r3
 80053e0:	3601      	adds	r6, #1
 80053e2:	e7f2      	b.n	80053ca <__libc_init_array+0x1e>
 80053e4:	080055f8 	.word	0x080055f8
 80053e8:	080055f8 	.word	0x080055f8
 80053ec:	080055f8 	.word	0x080055f8
 80053f0:	080055fc 	.word	0x080055fc

080053f4 <memcpy>:
 80053f4:	440a      	add	r2, r1
 80053f6:	4291      	cmp	r1, r2
 80053f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053fc:	d100      	bne.n	8005400 <memcpy+0xc>
 80053fe:	4770      	bx	lr
 8005400:	b510      	push	{r4, lr}
 8005402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005406:	4291      	cmp	r1, r2
 8005408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800540c:	d1f9      	bne.n	8005402 <memcpy+0xe>
 800540e:	bd10      	pop	{r4, pc}

08005410 <_init>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr

0800541c <_fini>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr
