
HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006768  08006768  00007768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800680c  0800680c  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  0800680c  0800680c  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800680c  0800680c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800680c  0800680c  0000780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006814  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a58  20000010  08006824  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a68  08006824  00008a68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001720d  00000000  00000000  00008039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394f  00000000  00000000  0001f246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00022b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f90  00000000  00000000  00023fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019503  00000000  00000000  00024f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180b1  00000000  00000000  0003e43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093924  00000000  00000000  000564ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9e10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  000e9e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ef1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006750 	.word	0x08006750

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006750 	.word	0x08006750

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <delay>:
#include "main.h"
/*edit timer*/
extern TIM_HandleTypeDef htim4;
/*edit timer*/
void delay (uint16_t time)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	/*edit timer*/
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <delay+0x2c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 800093e:	bf00      	nop
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <delay+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	429a      	cmp	r2, r3
 800094a:	d3f9      	bcc.n	8000940 <delay+0x14>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	2000008c 	.word	0x2000008c
 800095c:	00000000 	.word	0x00000000

08000960 <HAL_TIM_IC_CaptureCallback>:

static Ultrasonic_t HCSR04_sensor;

//The callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	/*		edit tim 									edit channel	*/
	if (   (htim == &htim4)  && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a98 <HAL_TIM_IC_CaptureCallback+0x138>)
 800096c:	4293      	cmp	r3, r2
 800096e:	f040 8088 	bne.w	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f1b      	ldrb	r3, [r3, #28]
 8000976:	2b04      	cmp	r3, #4
 8000978:	f040 8083 	bne.w	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
	{
		if (HCSR04_sensor.Is_First_Captured==0) // if the first value is not captured
 800097c:	4b47      	ldr	r3, [pc, #284]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800097e:	7b1b      	ldrb	r3, [r3, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d11a      	bne.n	80009ba <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			/*														edit channel	*/
			HCSR04_sensor.IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000984:	2108      	movs	r1, #8
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f002 f876 	bl	8002a78 <HAL_TIM_ReadCapturedValue>
 800098c:	4603      	mov	r3, r0
 800098e:	4a43      	ldr	r2, [pc, #268]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000990:	6013      	str	r3, [r2, #0]
			HCSR04_sensor.Is_First_Captured = 1;  // set the first captured as true
 8000992:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000994:	2201      	movs	r2, #1
 8000996:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			/*									edit channel	*/
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6a1a      	ldr	r2, [r3, #32]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80009a6:	621a      	str	r2, [r3, #32]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6a1a      	ldr	r2, [r3, #32]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009b6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			/*		    	edit  timer    channel	*/
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
		}
	}
}
 80009b8:	e063      	b.n	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
		else if (HCSR04_sensor.Is_First_Captured==1)   // if the first is already captured
 80009ba:	4b38      	ldr	r3, [pc, #224]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009bc:	7b1b      	ldrb	r3, [r3, #12]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d15f      	bne.n	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
			HCSR04_sensor.IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80009c2:	2108      	movs	r1, #8
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f002 f857 	bl	8002a78 <HAL_TIM_ReadCapturedValue>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a33      	ldr	r2, [pc, #204]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009ce:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
			if (HCSR04_sensor.IC_Val2 > HCSR04_sensor.IC_Val1)
 80009d8:	4b30      	ldr	r3, [pc, #192]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d907      	bls.n	80009f4 <HAL_TIM_IC_CaptureCallback+0x94>
				HCSR04_sensor.Difference = HCSR04_sensor.IC_Val2-HCSR04_sensor.IC_Val1;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	4a2b      	ldr	r2, [pc, #172]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009f0:	6093      	str	r3, [r2, #8]
 80009f2:	e00f      	b.n	8000a14 <HAL_TIM_IC_CaptureCallback+0xb4>
			else if (HCSR04_sensor.IC_Val1 > HCSR04_sensor.IC_Val2)
 80009f4:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d909      	bls.n	8000a14 <HAL_TIM_IC_CaptureCallback+0xb4>
				HCSR04_sensor.Difference = (0xffff - HCSR04_sensor.IC_Val1) + HCSR04_sensor.IC_Val2;
 8000a00:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a0e:	33ff      	adds	r3, #255	@ 0xff
 8000a10:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a12:	6093      	str	r3, [r2, #8]
			HCSR04_sensor.Distance = HCSR04_sensor.Difference * .034/2;
 8000a14:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fcdb 	bl	80003d4 <__aeabi_ui2d>
 8000a1e:	a31c      	add	r3, pc, #112	@ (adr r3, 8000a90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a24:	f7ff fd50 	bl	80004c8 <__aeabi_dmul>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a38:	f7ff fe70 	bl	800071c <__aeabi_ddiv>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	460b      	mov	r3, r1
 8000a40:	4610      	mov	r0, r2
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff ff52 	bl	80008ec <__aeabi_d2uiz>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a4e:	735a      	strb	r2, [r3, #13]
			HCSR04_sensor.Is_First_Captured = 0; // set it back to false
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6a1a      	ldr	r2, [r3, #32]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000a64:	621a      	str	r2, [r3, #32]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6a12      	ldr	r2, [r2, #32]
 8000a70:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0208 	bic.w	r2, r2, #8
 8000a80:	60da      	str	r2, [r3, #12]
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	f3af 8000 	nop.w
 8000a90:	b020c49c 	.word	0xb020c49c
 8000a94:	3fa16872 	.word	0x3fa16872
 8000a98:	2000008c 	.word	0x2000008c
 8000a9c:	2000002c 	.word	0x2000002c

08000aa0 <HCSR04_Init>:

/*This function to start the timer*/
void HCSR04_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/*				edit  timer		channel  */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <HCSR04_Init+0x10>)
 8000aa8:	f001 fc6e 	bl	8002388 <HAL_TIM_IC_Start_IT>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000008c 	.word	0x2000008c

08000ab4 <HCSR04_Read1>:

void HCSR04_Read1 (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000abe:	480b      	ldr	r0, [pc, #44]	@ (8000aec <HCSR04_Read1+0x38>)
 8000ac0:	f000 fef6 	bl	80018b0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f7ff ff31 	bl	800092c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad0:	4806      	ldr	r0, [pc, #24]	@ (8000aec <HCSR04_Read1+0x38>)
 8000ad2:	f000 feed 	bl	80018b0 <HAL_GPIO_WritePin>
	/*edit 				timer    channel */
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HCSR04_Read1+0x3c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <HCSR04_Read1+0x3c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f042 0208 	orr.w	r2, r2, #8
 8000ae4:	60da      	str	r2, [r3, #12]
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	2000008c 	.word	0x2000008c

08000af4 <Get_Distance>:

uint8_t Get_Distance(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	HCSR04_Read1();
 8000af8:	f7ff ffdc 	bl	8000ab4 <HCSR04_Read1>
	osDelay(200);
 8000afc:	20c8      	movs	r0, #200	@ 0xc8
 8000afe:	f003 f9e9 	bl	8003ed4 <osDelay>
	return (HCSR04_sensor.Distance);
 8000b02:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <Get_Distance+0x18>)
 8000b04:	7b5b      	ldrb	r3, [r3, #13]
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000002c 	.word	0x2000002c

08000b10 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led */
  LedHandle = osThreadNew(Led_Task, NULL, &Led_attributes);
 8000b14:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <MX_FREERTOS_Init+0x28>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <MX_FREERTOS_Init+0x2c>)
 8000b1a:	f003 f931 	bl	8003d80 <osThreadNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <MX_FREERTOS_Init+0x30>)
 8000b22:	6013      	str	r3, [r2, #0]

  /* creation of distance */
  distanceHandle = osThreadNew(distance_get, NULL, &distance_attributes);
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <MX_FREERTOS_Init+0x34>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_FREERTOS_Init+0x38>)
 8000b2a:	f003 f929 	bl	8003d80 <osThreadNew>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a06      	ldr	r2, [pc, #24]	@ (8000b4c <MX_FREERTOS_Init+0x3c>)
 8000b32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08006798 	.word	0x08006798
 8000b3c:	08000b51 	.word	0x08000b51
 8000b40:	2000003c 	.word	0x2000003c
 8000b44:	080067bc 	.word	0x080067bc
 8000b48:	08000b89 	.word	0x08000b89
 8000b4c:	20000040 	.word	0x20000040

08000b50 <Led_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led_Task */
void Led_Task(void *argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led_Task */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000b58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5c:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <Led_Task+0x2c>)
 8000b5e:	f000 febf 	bl	80018e0 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1,(uint8_t*)"Led_T",6,HAL_MAX_DELAY);
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	2206      	movs	r2, #6
 8000b68:	4905      	ldr	r1, [pc, #20]	@ (8000b80 <Led_Task+0x30>)
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <Led_Task+0x34>)
 8000b6c:	f002 face 	bl	800310c <HAL_UART_Transmit>
    osDelay(200);
 8000b70:	20c8      	movs	r0, #200	@ 0xc8
 8000b72:	f003 f9af 	bl	8003ed4 <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000b76:	bf00      	nop
 8000b78:	e7ee      	b.n	8000b58 <Led_Task+0x8>
 8000b7a:	bf00      	nop
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	08006778 	.word	0x08006778
 8000b84:	200000d4 	.word	0x200000d4

08000b88 <distance_get>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_distance_get */
void distance_get(void *argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN distance_get */
  HCSR04_Init();
 8000b90:	f7ff ff86 	bl	8000aa0 <HCSR04_Init>
  uint8_t distance =0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    distance = Get_Distance();
 8000b98:	f7ff ffac 	bl	8000af4 <Get_Distance>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
    if(distance > 5)
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d906      	bls.n	8000bb4 <distance_get+0x2c>
    {
      HAL_GPIO_WritePin(LED_O_GPIO_Port,LED_O_Pin,GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bac:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <distance_get+0x48>)
 8000bae:	f000 fe7f 	bl	80018b0 <HAL_GPIO_WritePin>
 8000bb2:	e005      	b.n	8000bc0 <distance_get+0x38>
    }
    else{
      HAL_GPIO_WritePin(LED_O_GPIO_Port,LED_O_Pin,GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <distance_get+0x48>)
 8000bbc:	f000 fe78 	bl	80018b0 <HAL_GPIO_WritePin>
    }
    HAL_UART_Transmit(&huart1,&distance,1,10);
 8000bc0:	f107 010f 	add.w	r1, r7, #15
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <distance_get+0x4c>)
 8000bca:	f002 fa9f 	bl	800310c <HAL_UART_Transmit>
    distance = Get_Distance();
 8000bce:	e7e3      	b.n	8000b98 <distance_get+0x10>
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	200000d4 	.word	0x200000d4

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0320 	and.w	r3, r3, #32
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c52:	4816      	ldr	r0, [pc, #88]	@ (8000cac <MX_GPIO_Init+0xd4>)
 8000c54:	f000 fe2c 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_O_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000c5e:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c60:	f000 fe26 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <MX_GPIO_Init+0xd4>)
 8000c7e:	f000 fc93 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB13 */
  GPIO_InitStruct.Pin = LED_O_Pin|GPIO_PIN_13;
 8000c82:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c9c:	f000 fc84 	bl	80015a8 <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40010c00 	.word	0x40010c00

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fab2 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f80e 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff ff8a 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc4:	f000 fa08 	bl	80010d8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000cc8:	f000 f94e 	bl	8000f68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ccc:	f002 fff2 	bl	8003cb4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cd0:	f7ff ff1e 	bl	8000b10 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cd4:	f003 f820 	bl	8003d18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <main+0x24>

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b090      	sub	sp, #64	@ 0x40
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0318 	add.w	r3, r7, #24
 8000ce6:	2228      	movs	r2, #40	@ 0x28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f005 fcf6 	bl	80066dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d10:	2302      	movs	r3, #2
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fdf5 	bl	8001914 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d30:	f000 f82c 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 f862 	bl	8001e18 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d5a:	f000 f817 	bl	8000d8c <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3740      	adds	r7, #64	@ 0x40
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7a:	f000 fa67 	bl	800124c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <Error_Handler+0x8>

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_MspInit+0x68>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <HAL_MspInit+0x68>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_MspInit+0x68>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_MspInit+0x68>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a11      	ldr	r2, [pc, #68]	@ (8000e00 <HAL_MspInit+0x68>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <HAL_MspInit+0x68>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	f06f 0001 	mvn.w	r0, #1
 8000dd6:	f000 fb0a 	bl	80013ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_MspInit+0x6c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_MspInit+0x6c>)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	@ 0x30
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed8 <HAL_InitTick+0xd0>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed8 <HAL_InitTick+0xd0>)
 8000e24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <HAL_InitTick+0xd0>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e36:	f107 020c 	add.w	r2, r7, #12
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 f959 	bl	80020f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e46:	f001 f943 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8000e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e4e:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	0c9b      	lsrs	r3, r3, #18
 8000e56:	3b01      	subs	r3, #1
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ee4 <HAL_InitTick+0xdc>)
 8000e5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e66:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e80:	4817      	ldr	r0, [pc, #92]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e82:	f001 f987 	bl	8002194 <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d11b      	bne.n	8000ecc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e94:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e96:	f001 f9cd 	bl	8002234 <HAL_TIM_Base_Start_IT>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d111      	bne.n	8000ecc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ea8:	2019      	movs	r0, #25
 8000eaa:	f000 fabc 	bl	8001426 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d808      	bhi.n	8000ec6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	2019      	movs	r0, #25
 8000eba:	f000 fa98 	bl	80013ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_InitTick+0xe0>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e002      	b.n	8000ecc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3730      	adds	r7, #48	@ 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	431bde83 	.word	0x431bde83
 8000ee0:	20000044 	.word	0x20000044
 8000ee4:	40012c00 	.word	0x40012c00
 8000ee8:	20000004 	.word	0x20000004

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <TIM1_UP_IRQHandler+0x10>)
 8000f26:	f001 fb3b 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000044 	.word	0x20000044

08000f34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <TIM4_IRQHandler+0x10>)
 8000f3a:	f001 fb31 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000008c 	.word	0x2000008c

08000f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <USART1_IRQHandler+0x10>)
 8000f4e:	f002 f961 	bl	8003214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000d4 	.word	0x200000d4

08000f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f92:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000f94:	4a2b      	ldr	r2, [pc, #172]	@ (8001044 <MX_TIM4_Init+0xdc>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000f98:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000f9a:	2247      	movs	r2, #71	@ 0x47
 8000f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b28      	ldr	r3, [pc, #160]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fa4:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000faa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fb8:	4821      	ldr	r0, [pc, #132]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000fba:	f001 f8eb 	bl	8002194 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000fc4:	f7ff fee2 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481a      	ldr	r0, [pc, #104]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000fd6:	f001 fc87 	bl	80028e8 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f7ff fed4 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000fe4:	4816      	ldr	r0, [pc, #88]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8000fe6:	f001 f977 	bl	80022d8 <HAL_TIM_IC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f7ff fecc 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <MX_TIM4_Init+0xd8>)
 8001004:	f001 ffc2 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800100e:	f7ff febd 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001016:	2301      	movs	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	2208      	movs	r2, #8
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_TIM4_Init+0xd8>)
 800102a:	f001 fbc1 	bl	80027b0 <HAL_TIM_IC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001034:	f7ff feaa 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000008c 	.word	0x2000008c
 8001044:	40000800 	.word	0x40000800

08001048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM4)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <HAL_TIM_Base_MspInit+0x84>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d12c      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_TIM_Base_MspInit+0x88>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	4a18      	ldr	r2, [pc, #96]	@ (80010d0 <HAL_TIM_Base_MspInit+0x88>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	61d3      	str	r3, [r2, #28]
 8001074:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <HAL_TIM_Base_MspInit+0x88>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <HAL_TIM_Base_MspInit+0x88>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_TIM_Base_MspInit+0x88>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_TIM_Base_MspInit+0x88>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800109c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <HAL_TIM_Base_MspInit+0x8c>)
 80010ae:	f000 fa7b 	bl	80015a8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2105      	movs	r1, #5
 80010b6:	201e      	movs	r0, #30
 80010b8:	f000 f999 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010bc:	201e      	movs	r0, #30
 80010be:	f000 f9b2 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40000800 	.word	0x40000800
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_USART1_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001110:	f001 ffac 	bl	800306c <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f7ff fe37 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000d4 	.word	0x200000d4
 8001128:	40013800 	.word	0x40013800

0800112c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a20      	ldr	r2, [pc, #128]	@ (80011c8 <HAL_UART_MspInit+0x9c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d139      	bne.n	80011c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <HAL_UART_MspInit+0xa0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a1e      	ldr	r2, [pc, #120]	@ (80011cc <HAL_UART_MspInit+0xa0>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <HAL_UART_MspInit+0xa0>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <HAL_UART_MspInit+0xa0>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a18      	ldr	r2, [pc, #96]	@ (80011cc <HAL_UART_MspInit+0xa0>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <HAL_UART_MspInit+0xa0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800117c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <HAL_UART_MspInit+0xa4>)
 8001192:	f000 fa09 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4809      	ldr	r0, [pc, #36]	@ (80011d0 <HAL_UART_MspInit+0xa4>)
 80011ac:	f000 f9fc 	bl	80015a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2105      	movs	r1, #5
 80011b4:	2025      	movs	r0, #37	@ 0x25
 80011b6:	f000 f91a 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ba:	2025      	movs	r0, #37	@ 0x25
 80011bc:	f000 f933 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010800 	.word	0x40010800

080011d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d4:	f7ff fec2 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011da:	490c      	ldr	r1, [pc, #48]	@ (800120c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001210 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011f0:	4c09      	ldr	r4, [pc, #36]	@ (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f005 fa75 	bl	80066ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001202:	f7ff fd57 	bl	8000cb4 <main>
  bx lr
 8001206:	4770      	bx	lr
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001210:	08006814 	.word	0x08006814
  ldr r2, =_sbss
 8001214:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001218:	20001a68 	.word	0x20001a68

0800121c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_2_IRQHandler>
	...

08001220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_Init+0x28>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_Init+0x28>)
 800122a:	f043 0310 	orr.w	r3, r3, #16
 800122e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f8d1 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f7ff fde6 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff fdac 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40022000 	.word	0x40022000

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	@ (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000008 	.word	0x20000008
 800126c:	2000011c 	.word	0x2000011c

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	@ (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	2000011c 	.word	0x2000011c

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4906      	ldr	r1, [pc, #24]	@ (800131c <__NVIC_EnableIRQ+0x34>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff4f 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff64 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ffb2 	bl	8001374 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff81 	bl	8001320 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff57 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d008      	beq.n	800146c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2204      	movs	r2, #4
 800145e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e020      	b.n	80014ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 020e 	bic.w	r2, r2, #14
 800147a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d005      	beq.n	80014dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e051      	b.n	8001580 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020e 	bic.w	r2, r2, #14
 80014ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_DMA_Abort_IT+0xd4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d029      	beq.n	800155a <HAL_DMA_Abort_IT+0xa2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <HAL_DMA_Abort_IT+0xd8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d022      	beq.n	8001556 <HAL_DMA_Abort_IT+0x9e>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1f      	ldr	r2, [pc, #124]	@ (8001594 <HAL_DMA_Abort_IT+0xdc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01a      	beq.n	8001550 <HAL_DMA_Abort_IT+0x98>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_DMA_Abort_IT+0xe0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d012      	beq.n	800154a <HAL_DMA_Abort_IT+0x92>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <HAL_DMA_Abort_IT+0xe4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00a      	beq.n	8001544 <HAL_DMA_Abort_IT+0x8c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <HAL_DMA_Abort_IT+0xe8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d102      	bne.n	800153e <HAL_DMA_Abort_IT+0x86>
 8001538:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800153c:	e00e      	b.n	800155c <HAL_DMA_Abort_IT+0xa4>
 800153e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001542:	e00b      	b.n	800155c <HAL_DMA_Abort_IT+0xa4>
 8001544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001548:	e008      	b.n	800155c <HAL_DMA_Abort_IT+0xa4>
 800154a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154e:	e005      	b.n	800155c <HAL_DMA_Abort_IT+0xa4>
 8001550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001554:	e002      	b.n	800155c <HAL_DMA_Abort_IT+0xa4>
 8001556:	2310      	movs	r3, #16
 8001558:	e000      	b.n	800155c <HAL_DMA_Abort_IT+0xa4>
 800155a:	2301      	movs	r3, #1
 800155c:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_DMA_Abort_IT+0xec>)
 800155e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4798      	blx	r3
    } 
  }
  return status;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40020008 	.word	0x40020008
 8001590:	4002001c 	.word	0x4002001c
 8001594:	40020030 	.word	0x40020030
 8001598:	40020044 	.word	0x40020044
 800159c:	40020058 	.word	0x40020058
 80015a0:	4002006c 	.word	0x4002006c
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b08b      	sub	sp, #44	@ 0x2c
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ba:	e169      	b.n	8001890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015bc:	2201      	movs	r2, #1
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	f040 8158 	bne.w	800188a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a9a      	ldr	r2, [pc, #616]	@ (8001848 <HAL_GPIO_Init+0x2a0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d05e      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 80015e4:	4a98      	ldr	r2, [pc, #608]	@ (8001848 <HAL_GPIO_Init+0x2a0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d875      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 80015ea:	4a98      	ldr	r2, [pc, #608]	@ (800184c <HAL_GPIO_Init+0x2a4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d058      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 80015f0:	4a96      	ldr	r2, [pc, #600]	@ (800184c <HAL_GPIO_Init+0x2a4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d86f      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 80015f6:	4a96      	ldr	r2, [pc, #600]	@ (8001850 <HAL_GPIO_Init+0x2a8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d052      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 80015fc:	4a94      	ldr	r2, [pc, #592]	@ (8001850 <HAL_GPIO_Init+0x2a8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d869      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 8001602:	4a94      	ldr	r2, [pc, #592]	@ (8001854 <HAL_GPIO_Init+0x2ac>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d04c      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 8001608:	4a92      	ldr	r2, [pc, #584]	@ (8001854 <HAL_GPIO_Init+0x2ac>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d863      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 800160e:	4a92      	ldr	r2, [pc, #584]	@ (8001858 <HAL_GPIO_Init+0x2b0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d046      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
 8001614:	4a90      	ldr	r2, [pc, #576]	@ (8001858 <HAL_GPIO_Init+0x2b0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d85d      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 800161a:	2b12      	cmp	r3, #18
 800161c:	d82a      	bhi.n	8001674 <HAL_GPIO_Init+0xcc>
 800161e:	2b12      	cmp	r3, #18
 8001620:	d859      	bhi.n	80016d6 <HAL_GPIO_Init+0x12e>
 8001622:	a201      	add	r2, pc, #4	@ (adr r2, 8001628 <HAL_GPIO_Init+0x80>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	080016a3 	.word	0x080016a3
 800162c:	0800167d 	.word	0x0800167d
 8001630:	0800168f 	.word	0x0800168f
 8001634:	080016d1 	.word	0x080016d1
 8001638:	080016d7 	.word	0x080016d7
 800163c:	080016d7 	.word	0x080016d7
 8001640:	080016d7 	.word	0x080016d7
 8001644:	080016d7 	.word	0x080016d7
 8001648:	080016d7 	.word	0x080016d7
 800164c:	080016d7 	.word	0x080016d7
 8001650:	080016d7 	.word	0x080016d7
 8001654:	080016d7 	.word	0x080016d7
 8001658:	080016d7 	.word	0x080016d7
 800165c:	080016d7 	.word	0x080016d7
 8001660:	080016d7 	.word	0x080016d7
 8001664:	080016d7 	.word	0x080016d7
 8001668:	080016d7 	.word	0x080016d7
 800166c:	08001685 	.word	0x08001685
 8001670:	08001699 	.word	0x08001699
 8001674:	4a79      	ldr	r2, [pc, #484]	@ (800185c <HAL_GPIO_Init+0x2b4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800167a:	e02c      	b.n	80016d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e029      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	3304      	adds	r3, #4
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e024      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	3308      	adds	r3, #8
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e01f      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	330c      	adds	r3, #12
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e01a      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016aa:	2304      	movs	r3, #4
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e013      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b8:	2308      	movs	r3, #8
 80016ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	611a      	str	r2, [r3, #16]
          break;
 80016c2:	e009      	b.n	80016d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	615a      	str	r2, [r3, #20]
          break;
 80016ce:	e003      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x130>
          break;
 80016d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2bff      	cmp	r3, #255	@ 0xff
 80016dc:	d801      	bhi.n	80016e2 <HAL_GPIO_Init+0x13a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	e001      	b.n	80016e6 <HAL_GPIO_Init+0x13e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2bff      	cmp	r3, #255	@ 0xff
 80016ec:	d802      	bhi.n	80016f4 <HAL_GPIO_Init+0x14c>
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0x152>
 80016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f6:	3b08      	subs	r3, #8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	210f      	movs	r1, #15
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	6a39      	ldr	r1, [r7, #32]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	431a      	orrs	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80b1 	beq.w	800188a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001728:	4b4d      	ldr	r3, [pc, #308]	@ (8001860 <HAL_GPIO_Init+0x2b8>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a4c      	ldr	r2, [pc, #304]	@ (8001860 <HAL_GPIO_Init+0x2b8>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <HAL_GPIO_Init+0x2b8>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001740:	4a48      	ldr	r2, [pc, #288]	@ (8001864 <HAL_GPIO_Init+0x2bc>)
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a40      	ldr	r2, [pc, #256]	@ (8001868 <HAL_GPIO_Init+0x2c0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d013      	beq.n	8001794 <HAL_GPIO_Init+0x1ec>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3f      	ldr	r2, [pc, #252]	@ (800186c <HAL_GPIO_Init+0x2c4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_GPIO_Init+0x1e8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3e      	ldr	r2, [pc, #248]	@ (8001870 <HAL_GPIO_Init+0x2c8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <HAL_GPIO_Init+0x1e4>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3d      	ldr	r2, [pc, #244]	@ (8001874 <HAL_GPIO_Init+0x2cc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_GPIO_Init+0x1e0>
 8001784:	2303      	movs	r3, #3
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 8001788:	2304      	movs	r3, #4
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 8001794:	2300      	movs	r3, #0
 8001796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a6:	492f      	ldr	r1, [pc, #188]	@ (8001864 <HAL_GPIO_Init+0x2bc>)
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	492c      	ldr	r1, [pc, #176]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4928      	ldr	r1, [pc, #160]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e8:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4922      	ldr	r1, [pc, #136]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	491e      	ldr	r1, [pc, #120]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 8001800:	4013      	ands	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4918      	ldr	r1, [pc, #96]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	4914      	ldr	r1, [pc, #80]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 8001828:	4013      	ands	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d021      	beq.n	800187c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001838:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	490e      	ldr	r1, [pc, #56]	@ (8001878 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e021      	b.n	800188a <HAL_GPIO_Init+0x2e2>
 8001846:	bf00      	nop
 8001848:	10320000 	.word	0x10320000
 800184c:	10310000 	.word	0x10310000
 8001850:	10220000 	.word	0x10220000
 8001854:	10210000 	.word	0x10210000
 8001858:	10120000 	.word	0x10120000
 800185c:	10110000 	.word	0x10110000
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40011000 	.word	0x40011000
 8001874:	40011400 	.word	0x40011400
 8001878:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_GPIO_Init+0x304>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	43db      	mvns	r3, r3
 8001884:	4909      	ldr	r1, [pc, #36]	@ (80018ac <HAL_GPIO_Init+0x304>)
 8001886:	4013      	ands	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	3301      	adds	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	f47f ae8e 	bne.w	80015bc <HAL_GPIO_Init+0x14>
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	372c      	adds	r7, #44	@ 0x2c
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018cc:	e003      	b.n	80018d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	041a      	lsls	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	611a      	str	r2, [r3, #16]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4013      	ands	r3, r2
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43d9      	mvns	r1, r3
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	400b      	ands	r3, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e272      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b92      	ldr	r3, [pc, #584]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001940:	4b8f      	ldr	r3, [pc, #572]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
 800194c:	4b8c      	ldr	r3, [pc, #560]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b89      	ldr	r3, [pc, #548]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x12c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e24c      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x76>
 800197c:	4b80      	ldr	r3, [pc, #512]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7f      	ldr	r2, [pc, #508]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b7b      	ldr	r3, [pc, #492]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7a      	ldr	r2, [pc, #488]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b78      	ldr	r3, [pc, #480]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xbc>
 80019b6:	4b72      	ldr	r3, [pc, #456]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a71      	ldr	r2, [pc, #452]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b68      	ldr	r3, [pc, #416]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a67      	ldr	r2, [pc, #412]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc3e 	bl	8001270 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fc3a 	bl	8001270 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e200      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe4>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fc2a 	bl	8001270 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fc26 	bl	8001270 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1ec      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x10c>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5a:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
 8001a66:	4b46      	ldr	r3, [pc, #280]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b43      	ldr	r3, [pc, #268]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1c0      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4939      	ldr	r1, [pc, #228]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b36      	ldr	r3, [pc, #216]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fbdf 	bl	8001270 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fbdb 	bl	8001270 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1a1      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4927      	ldr	r1, [pc, #156]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b26      	ldr	r3, [pc, #152]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fbbe 	bl	8001270 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fbba 	bl	8001270 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e180      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03a      	beq.n	8001b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fb9e 	bl	8001270 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fb9a 	bl	8001270 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e160      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 fafe 	bl	8002158 <RCC_Delay>
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb84 	bl	8001270 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fb80 	bl	8001270 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e146      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	42420000 	.word	0x42420000
 8001b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b92      	ldr	r3, [pc, #584]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e9      	bne.n	8001b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a6 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b88      	ldr	r3, [pc, #544]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a87      	ldr	r2, [pc, #540]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b85      	ldr	r3, [pc, #532]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b82      	ldr	r3, [pc, #520]	@ (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d118      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bde:	4b7f      	ldr	r3, [pc, #508]	@ (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fb41 	bl	8001270 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff fb3d 	bl	8001270 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	@ 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e103      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b75      	ldr	r3, [pc, #468]	@ (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x312>
 8001c18:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a69      	ldr	r2, [pc, #420]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b67      	ldr	r3, [pc, #412]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a66      	ldr	r2, [pc, #408]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	e01c      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x356>
 8001c50:	4b61      	ldr	r3, [pc, #388]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a60      	ldr	r2, [pc, #384]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a5d      	ldr	r2, [pc, #372]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e00b      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a5a      	ldr	r2, [pc, #360]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a57      	ldr	r2, [pc, #348]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d015      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff faf1 	bl	8001270 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff faed 	bl	8001270 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0b1      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ee      	beq.n	8001c92 <HAL_RCC_OscConfig+0x37e>
 8001cb4:	e014      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fadb 	bl	8001270 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fad7 	bl	8001270 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e09b      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8087 	beq.w	8001e0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d061      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d146      	bne.n	8001d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff faab 	bl	8001270 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff faa7 	bl	8001270 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e06d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d46:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4921      	ldr	r1, [pc, #132]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d58:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a19      	ldr	r1, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	491b      	ldr	r1, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fa7b 	bl	8001270 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fa77 	bl	8001270 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e03d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46a>
 8001d9c:	e035      	b.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fa64 	bl	8001270 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fa60 	bl	8001270 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e026      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x498>
 8001dca:	e01e      	b.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e019      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_RCC_OscConfig+0x500>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0d0      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b67      	ldr	r3, [pc, #412]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4965      	ldr	r1, [pc, #404]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b63      	ldr	r3, [pc, #396]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0b8      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e74:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a58      	ldr	r2, [pc, #352]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e8c:	4b53      	ldr	r3, [pc, #332]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a52      	ldr	r2, [pc, #328]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b50      	ldr	r3, [pc, #320]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	494d      	ldr	r1, [pc, #308]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d040      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e073      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 0203 	bic.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4936      	ldr	r1, [pc, #216]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f08:	f7ff f9b2 	bl	8001270 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7ff f9ae 	bl	8001270 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e053      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 020c 	and.w	r2, r3, #12
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1eb      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b27      	ldr	r3, [pc, #156]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d210      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4922      	ldr	r1, [pc, #136]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e032      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4916      	ldr	r1, [pc, #88]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	490e      	ldr	r1, [pc, #56]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa6:	f000 f821 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001faa:	4602      	mov	r2, r0
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	490a      	ldr	r1, [pc, #40]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	5ccb      	ldrb	r3, [r1, r3]
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ff1e 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	080067e0 	.word	0x080067e0
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002006:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x94>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b04      	cmp	r3, #4
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x30>
 8002016:	2b08      	cmp	r3, #8
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x36>
 800201a:	e027      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800201e:	613b      	str	r3, [r7, #16]
      break;
 8002020:	e027      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x9c>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d010      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x94>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0c5b      	lsrs	r3, r3, #17
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800204e:	fb03 f202 	mul.w	r2, r3, r2
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e004      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	613b      	str	r3, [r7, #16]
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800206e:	613b      	str	r3, [r7, #16]
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	693b      	ldr	r3, [r7, #16]
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	080067f8 	.word	0x080067f8
 800208c:	08006808 	.word	0x08006808
 8002090:	003d0900 	.word	0x003d0900

08002094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b02      	ldr	r3, [pc, #8]	@ (80020a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff2 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	@ (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080067f0 	.word	0x080067f0

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffde 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0adb      	lsrs	r3, r3, #11
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	@ (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	080067f0 	.word	0x080067f0

080020f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	220f      	movs	r2, #15
 8002106:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_GetClockConfig+0x58>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_RCC_GetClockConfig+0x58>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_RCC_GetClockConfig+0x58>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_RCC_GetClockConfig+0x58>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_RCC_GetClockConfig+0x5c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0207 	and.w	r2, r3, #7
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	40022000 	.word	0x40022000

08002158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <RCC_Delay+0x34>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <RCC_Delay+0x38>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002174:	bf00      	nop
  }
  while (Delay --);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <RCC_Delay+0x1c>
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000000 	.word	0x20000000
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e041      	b.n	800222a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe ff44 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 fcb0 	bl	8002b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e03a      	b.n	80022c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <HAL_TIM_Base_Start_IT+0x98>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00e      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x58>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002276:	d009      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x58>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d004      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x58>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d111      	bne.n	80022b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d010      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	e007      	b.n	80022c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800

080022d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e041      	b.n	800236e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f839 	bl	8002376 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 fc0e 	bl	8002b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <HAL_TIM_IC_Start_IT+0x1e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e013      	b.n	80023ce <HAL_TIM_IC_Start_IT+0x46>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d104      	bne.n	80023b6 <HAL_TIM_IC_Start_IT+0x2e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e00b      	b.n	80023ce <HAL_TIM_IC_Start_IT+0x46>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d104      	bne.n	80023c6 <HAL_TIM_IC_Start_IT+0x3e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	e003      	b.n	80023ce <HAL_TIM_IC_Start_IT+0x46>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_TIM_IC_Start_IT+0x58>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	e013      	b.n	8002408 <HAL_TIM_IC_Start_IT+0x80>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d104      	bne.n	80023f0 <HAL_TIM_IC_Start_IT+0x68>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e00b      	b.n	8002408 <HAL_TIM_IC_Start_IT+0x80>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d104      	bne.n	8002400 <HAL_TIM_IC_Start_IT+0x78>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e003      	b.n	8002408 <HAL_TIM_IC_Start_IT+0x80>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002406:	b2db      	uxtb	r3, r3
 8002408:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d102      	bne.n	8002416 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0b8      	b.n	800258c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_TIM_IC_Start_IT+0xa2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002428:	e013      	b.n	8002452 <HAL_TIM_IC_Start_IT+0xca>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d104      	bne.n	800243a <HAL_TIM_IC_Start_IT+0xb2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002438:	e00b      	b.n	8002452 <HAL_TIM_IC_Start_IT+0xca>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d104      	bne.n	800244a <HAL_TIM_IC_Start_IT+0xc2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002448:	e003      	b.n	8002452 <HAL_TIM_IC_Start_IT+0xca>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_TIM_IC_Start_IT+0xda>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002460:	e013      	b.n	800248a <HAL_TIM_IC_Start_IT+0x102>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d104      	bne.n	8002472 <HAL_TIM_IC_Start_IT+0xea>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002470:	e00b      	b.n	800248a <HAL_TIM_IC_Start_IT+0x102>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d104      	bne.n	8002482 <HAL_TIM_IC_Start_IT+0xfa>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002480:	e003      	b.n	800248a <HAL_TIM_IC_Start_IT+0x102>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b0c      	cmp	r3, #12
 800248e:	d841      	bhi.n	8002514 <HAL_TIM_IC_Start_IT+0x18c>
 8002490:	a201      	add	r2, pc, #4	@ (adr r2, 8002498 <HAL_TIM_IC_Start_IT+0x110>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024cd 	.word	0x080024cd
 800249c:	08002515 	.word	0x08002515
 80024a0:	08002515 	.word	0x08002515
 80024a4:	08002515 	.word	0x08002515
 80024a8:	080024df 	.word	0x080024df
 80024ac:	08002515 	.word	0x08002515
 80024b0:	08002515 	.word	0x08002515
 80024b4:	08002515 	.word	0x08002515
 80024b8:	080024f1 	.word	0x080024f1
 80024bc:	08002515 	.word	0x08002515
 80024c0:	08002515 	.word	0x08002515
 80024c4:	08002515 	.word	0x08002515
 80024c8:	08002503 	.word	0x08002503
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0202 	orr.w	r2, r2, #2
 80024da:	60da      	str	r2, [r3, #12]
      break;
 80024dc:	e01d      	b.n	800251a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0204 	orr.w	r2, r2, #4
 80024ec:	60da      	str	r2, [r3, #12]
      break;
 80024ee:	e014      	b.n	800251a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0208 	orr.w	r2, r2, #8
 80024fe:	60da      	str	r2, [r3, #12]
      break;
 8002500:	e00b      	b.n	800251a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0210 	orr.w	r2, r2, #16
 8002510:	60da      	str	r2, [r3, #12]
      break;
 8002512:	e002      	b.n	800251a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      break;
 8002518:	bf00      	nop
  }

  if (status == HAL_OK)
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d134      	bne.n	800258a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fd0a 	bl	8002f42 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <HAL_TIM_IC_Start_IT+0x20c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00e      	beq.n	8002556 <HAL_TIM_IC_Start_IT+0x1ce>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002540:	d009      	beq.n	8002556 <HAL_TIM_IC_Start_IT+0x1ce>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <HAL_TIM_IC_Start_IT+0x210>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_TIM_IC_Start_IT+0x1ce>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a12      	ldr	r2, [pc, #72]	@ (800259c <HAL_TIM_IC_Start_IT+0x214>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d111      	bne.n	800257a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b06      	cmp	r3, #6
 8002566:	d010      	beq.n	800258a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	e007      	b.n	800258a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800

080025a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0202 	mvn.w	r2, #2
 80025cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f9bc 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa88 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fa8e 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0204 	mvn.w	r2, #4
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe f992 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa5e 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fa64 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0208 	mvn.w	r2, #8
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2204      	movs	r2, #4
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f968 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa34 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa3a 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe f93e 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa0a 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa10 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0201 	mvn.w	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fb22 	bl	8000d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272e:	2b80      	cmp	r3, #128	@ 0x80
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273c:	2b80      	cmp	r3, #128	@ 0x80
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fc85 	bl	800305a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	2b40      	cmp	r3, #64	@ 0x40
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002768:	2b40      	cmp	r3, #64	@ 0x40
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f9d4 	bl	8002b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0220 	mvn.w	r2, #32
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc50 	bl	8003048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e088      	b.n	80028e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80027ec:	f000 fa06 	bl	8002bfc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 020c 	bic.w	r2, r2, #12
 80027fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6999      	ldr	r1, [r3, #24]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	e060      	b.n	80028d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d11c      	bne.n	8002854 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800282a:	f000 fa6f 	bl	8002d0c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800283c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6999      	ldr	r1, [r3, #24]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	021a      	lsls	r2, r3, #8
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	619a      	str	r2, [r3, #24]
 8002852:	e040      	b.n	80028d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b08      	cmp	r3, #8
 8002858:	d11b      	bne.n	8002892 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800286a:	f000 faba 	bl	8002de2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 020c 	bic.w	r2, r2, #12
 800287c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69d9      	ldr	r1, [r3, #28]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	61da      	str	r2, [r3, #28]
 8002890:	e021      	b.n	80028d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d11c      	bne.n	80028d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80028a8:	f000 fad6 	bl	8002e58 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80028ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69d9      	ldr	r1, [r3, #28]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	021a      	lsls	r2, r3, #8
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
 80028d0:	e001      	b.n	80028d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_TIM_ConfigClockSource+0x1c>
 8002900:	2302      	movs	r3, #2
 8002902:	e0b4      	b.n	8002a6e <HAL_TIM_ConfigClockSource+0x186>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800292a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800293c:	d03e      	beq.n	80029bc <HAL_TIM_ConfigClockSource+0xd4>
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002942:	f200 8087 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294a:	f000 8086 	beq.w	8002a5a <HAL_TIM_ConfigClockSource+0x172>
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002952:	d87f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b70      	cmp	r3, #112	@ 0x70
 8002956:	d01a      	beq.n	800298e <HAL_TIM_ConfigClockSource+0xa6>
 8002958:	2b70      	cmp	r3, #112	@ 0x70
 800295a:	d87b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b60      	cmp	r3, #96	@ 0x60
 800295e:	d050      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x11a>
 8002960:	2b60      	cmp	r3, #96	@ 0x60
 8002962:	d877      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b50      	cmp	r3, #80	@ 0x50
 8002966:	d03c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002968:	2b50      	cmp	r3, #80	@ 0x50
 800296a:	d873      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d058      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x13a>
 8002970:	2b40      	cmp	r3, #64	@ 0x40
 8002972:	d86f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b30      	cmp	r3, #48	@ 0x30
 8002976:	d064      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 8002978:	2b30      	cmp	r3, #48	@ 0x30
 800297a:	d86b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d060      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d867      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05c      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 8002988:	2b10      	cmp	r3, #16
 800298a:	d05a      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	e062      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800299e:	f000 fab1 	bl	8002f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	609a      	str	r2, [r3, #8]
      break;
 80029ba:	e04f      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029cc:	f000 fa9a 	bl	8002f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029de:	609a      	str	r2, [r3, #8]
      break;
 80029e0:	e03c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	461a      	mov	r2, r3
 80029f0:	f000 f95e 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2150      	movs	r1, #80	@ 0x50
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fa68 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e02c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f000 f9b8 	bl	8002d84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2160      	movs	r1, #96	@ 0x60
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fa58 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002a20:	e01c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 f93e 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2140      	movs	r1, #64	@ 0x40
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fa48 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e00c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f000 fa3f 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002a52:	e003      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e000      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d831      	bhi.n	8002af0 <HAL_TIM_ReadCapturedValue+0x78>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002af1 	.word	0x08002af1
 8002a9c:	08002af1 	.word	0x08002af1
 8002aa0:	08002af1 	.word	0x08002af1
 8002aa4:	08002ad3 	.word	0x08002ad3
 8002aa8:	08002af1 	.word	0x08002af1
 8002aac:	08002af1 	.word	0x08002af1
 8002ab0:	08002af1 	.word	0x08002af1
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	08002af1 	.word	0x08002af1
 8002abc:	08002af1 	.word	0x08002af1
 8002ac0:	08002af1 	.word	0x08002af1
 8002ac4:	08002ae7 	.word	0x08002ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	60fb      	str	r3, [r7, #12]

      break;
 8002ad0:	e00f      	b.n	8002af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	60fb      	str	r3, [r7, #12]

      break;
 8002ada:	e00a      	b.n	8002af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	60fb      	str	r3, [r7, #12]

      break;
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	60fb      	str	r3, [r7, #12]

      break;
 8002aee:	e000      	b.n	8002af2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002af0:	bf00      	nop
  }

  return tmpreg;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop

08002b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a29      	ldr	r2, [pc, #164]	@ (8002bf0 <TIM_Base_SetConfig+0xb8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00b      	beq.n	8002b68 <TIM_Base_SetConfig+0x30>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b56:	d007      	beq.n	8002b68 <TIM_Base_SetConfig+0x30>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a26      	ldr	r2, [pc, #152]	@ (8002bf4 <TIM_Base_SetConfig+0xbc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_Base_SetConfig+0x30>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a25      	ldr	r2, [pc, #148]	@ (8002bf8 <TIM_Base_SetConfig+0xc0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d108      	bne.n	8002b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <TIM_Base_SetConfig+0xb8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00b      	beq.n	8002b9a <TIM_Base_SetConfig+0x62>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b88:	d007      	beq.n	8002b9a <TIM_Base_SetConfig+0x62>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a19      	ldr	r2, [pc, #100]	@ (8002bf4 <TIM_Base_SetConfig+0xbc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <TIM_Base_SetConfig+0x62>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a18      	ldr	r2, [pc, #96]	@ (8002bf8 <TIM_Base_SetConfig+0xc0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d108      	bne.n	8002bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a07      	ldr	r2, [pc, #28]	@ (8002bf0 <TIM_Base_SetConfig+0xb8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d103      	bne.n	8002be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	615a      	str	r2, [r3, #20]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800

08002bfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f023 0201 	bic.w	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca4 <TIM_TI1_SetConfig+0xa8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00b      	beq.n	8002c42 <TIM_TI1_SetConfig+0x46>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c30:	d007      	beq.n	8002c42 <TIM_TI1_SetConfig+0x46>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <TIM_TI1_SetConfig+0xac>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d003      	beq.n	8002c42 <TIM_TI1_SetConfig+0x46>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cac <TIM_TI1_SetConfig+0xb0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <TIM_TI1_SetConfig+0x4a>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <TIM_TI1_SetConfig+0x4c>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e003      	b.n	8002c66 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f023 030a 	bic.w	r3, r3, #10
 8002c80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 030a 	and.w	r3, r3, #10
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	621a      	str	r2, [r3, #32]
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800

08002cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f023 030a 	bic.w	r3, r3, #10
 8002cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f023 0210 	bic.w	r2, r3, #16
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f023 0210 	bic.w	r2, r3, #16
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	031b      	lsls	r3, r3, #12
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	621a      	str	r2, [r3, #32]
}
 8002dd8:	bf00      	nop
 8002dda:	371c      	adds	r7, #28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b087      	sub	sp, #28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	031b      	lsls	r3, r3, #12
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	031b      	lsls	r3, r3, #12
 8002eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f043 0307 	orr.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	609a      	str	r2, [r3, #8]
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b087      	sub	sp, #28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2201      	movs	r2, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	401a      	ands	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	621a      	str	r2, [r3, #32]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e046      	b.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a16      	ldr	r2, [pc, #88]	@ (800303c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff0:	d009      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	@ (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a10      	ldr	r2, [pc, #64]	@ (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10c      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800300c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800

08003048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e042      	b.n	8003104 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe f84a 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	@ 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fd71 	bl	8003b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	@ 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	d16d      	bne.n	8003208 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_UART_Transmit+0x2c>
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e066      	b.n	800320a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2221      	movs	r2, #33	@ 0x21
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800314a:	f7fe f891 	bl	8001270 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003164:	d108      	bne.n	8003178 <HAL_UART_Transmit+0x6c>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	e003      	b.n	8003180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003180:	e02a      	b.n	80031d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	2180      	movs	r1, #128	@ 0x80
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 faf9 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e036      	b.n	800320a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3302      	adds	r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e007      	b.n	80031ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1cf      	bne.n	8003182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2140      	movs	r1, #64	@ 0x40
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fac9 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e006      	b.n	800320a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0ba      	sub	sp, #232	@ 0xe8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0x66>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fbd1 	bl	8003a1a <UART_Receive_IT>
      return;
 8003278:	e25b      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800327a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80de 	beq.w	8003440 <HAL_UART_IRQHandler+0x22c>
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003294:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80d1 	beq.w	8003440 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_UART_IRQHandler+0xae>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0xd2>
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
 80032f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d011      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
 8003316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f043 0208 	orr.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 81f2 	beq.w	8003728 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_UART_IRQHandler+0x14e>
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fb5c 	bl	8003a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <HAL_UART_IRQHandler+0x17a>
 8003386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04f      	beq.n	800342e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa66 	bl	8003860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d041      	beq.n	8003426 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1d9      	bne.n	80033a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d013      	beq.n	800341e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	4a7e      	ldr	r2, [pc, #504]	@ (80035f4 <HAL_UART_IRQHandler+0x3e0>)
 80033fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe f858 	bl	80014b8 <HAL_DMA_Abort_IT>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003418:	4610      	mov	r0, r2
 800341a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	e00e      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f99c 	bl	800375c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	e00a      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f998 	bl	800375c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	e006      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f994 	bl	800375c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800343a:	e175      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	bf00      	nop
    return;
 800343e:	e173      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 814f 	bne.w	80036e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8148 	beq.w	80036e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8141 	beq.w	80036e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80b6 	beq.w	80035f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003498:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8145 	beq.w	800372c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034aa:	429a      	cmp	r2, r3
 80034ac:	f080 813e 	bcs.w	800372c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	f000 8088 	beq.w	80035d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1d9      	bne.n	80034c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3314      	adds	r3, #20
 8003516:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003520:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3314      	adds	r3, #20
 8003530:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003534:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003538:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800353c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e1      	bne.n	8003510 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800355c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800355e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3314      	adds	r3, #20
 800356c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003570:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003572:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003576:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800357e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e3      	bne.n	800354c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a4:	f023 0310 	bic.w	r3, r3, #16
 80035a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e3      	bne.n	8003592 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd ff37 	bl	8001442 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8bf 	bl	800376e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035f0:	e09c      	b.n	800372c <HAL_UART_IRQHandler+0x518>
 80035f2:	bf00      	nop
 80035f4:	08003925 	.word	0x08003925
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003600:	b29b      	uxth	r3, r3
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 808e 	beq.w	8003730 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8089 	beq.w	8003730 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003642:	647a      	str	r2, [r7, #68]	@ 0x44
 8003644:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e3      	bne.n	800361e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	623b      	str	r3, [r7, #32]
   return(result);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800367a:	633a      	str	r2, [r7, #48]	@ 0x30
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e3      	bne.n	8003656 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0310 	bic.w	r3, r3, #16
 80036b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	617b      	str	r3, [r7, #20]
   return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e3      	bne.n	800369c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f844 	bl	800376e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036e6:	e023      	b.n	8003730 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_UART_IRQHandler+0x4f4>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f923 	bl	800394c <UART_Transmit_IT>
    return;
 8003706:	e014      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <HAL_UART_IRQHandler+0x51e>
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f962 	bl	80039ea <UART_EndTransmit_IT>
    return;
 8003726:	e004      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
    return;
 8003728:	bf00      	nop
 800372a:	e002      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
      return;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <HAL_UART_IRQHandler+0x51e>
      return;
 8003730:	bf00      	nop
  }
}
 8003732:	37e8      	adds	r7, #232	@ 0xe8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b090      	sub	sp, #64	@ 0x40
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e050      	b.n	8003838 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d04c      	beq.n	8003838 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800379e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037a4:	f7fd fd64 	bl	8001270 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d241      	bcs.n	8003838 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80037e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	613b      	str	r3, [r7, #16]
   return(result);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003808:	623a      	str	r2, [r7, #32]
 800380a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	69f9      	ldr	r1, [r7, #28]
 800380e:	6a3a      	ldr	r2, [r7, #32]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	61bb      	str	r3, [r7, #24]
   return(result);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e00f      	b.n	8003858 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	d09f      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3740      	adds	r7, #64	@ 0x40
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b095      	sub	sp, #84	@ 0x54
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800387e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003888:	643a      	str	r2, [r7, #64]	@ 0x40
 800388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800388e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3314      	adds	r3, #20
 80038a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d119      	bne.n	800390c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f023 0310 	bic.w	r3, r3, #16
 80038ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038f8:	61ba      	str	r2, [r7, #24]
 80038fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6979      	ldr	r1, [r7, #20]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	613b      	str	r3, [r7, #16]
   return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800391a:	bf00      	nop
 800391c:	3754      	adds	r7, #84	@ 0x54
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff ff0c 	bl	800375c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b21      	cmp	r3, #33	@ 0x21
 800395e:	d13e      	bne.n	80039de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003968:	d114      	bne.n	8003994 <UART_Transmit_IT+0x48>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d110      	bne.n	8003994 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003986:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]
 8003992:	e008      	b.n	80039a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	1c59      	adds	r1, r3, #1
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6211      	str	r1, [r2, #32]
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4619      	mov	r1, r3
 80039b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fe94 	bl	8003738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08c      	sub	sp, #48	@ 0x30
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b22      	cmp	r3, #34	@ 0x22
 8003a2c:	f040 80ae 	bne.w	8003b8c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a38:	d117      	bne.n	8003a6a <UART_Receive_IT+0x50>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d113      	bne.n	8003a6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	1c9a      	adds	r2, r3, #2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a68:	e026      	b.n	8003ab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a7c:	d007      	beq.n	8003a8e <UART_Receive_IT+0x74>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <UART_Receive_IT+0x82>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e008      	b.n	8003aae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d15d      	bne.n	8003b88 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0220 	bic.w	r2, r2, #32
 8003ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d135      	bne.n	8003b7e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	613b      	str	r3, [r7, #16]
   return(result);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f023 0310 	bic.w	r3, r3, #16
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b38:	623a      	str	r2, [r7, #32]
 8003b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	69f9      	ldr	r1, [r7, #28]
 8003b3e:	6a3a      	ldr	r2, [r7, #32]
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e5      	bne.n	8003b18 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d10a      	bne.n	8003b70 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fdf9 	bl	800376e <HAL_UARTEx_RxEventCallback>
 8003b7c:	e002      	b.n	8003b84 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fde3 	bl	800374a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e002      	b.n	8003b8e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3730      	adds	r7, #48	@ 0x30
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bd2:	f023 030c 	bic.w	r3, r3, #12
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8003cac <UART_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7fe fa66 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	e002      	b.n	8003c0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe fa4e 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	4a22      	ldr	r2, [pc, #136]	@ (8003cb0 <UART_SetConfig+0x118>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	0119      	lsls	r1, r3, #4
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <UART_SetConfig+0x118>)
 8003c46:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2064      	movs	r0, #100	@ 0x64
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	3332      	adds	r3, #50	@ 0x32
 8003c58:	4a15      	ldr	r2, [pc, #84]	@ (8003cb0 <UART_SetConfig+0x118>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c64:	4419      	add	r1, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <UART_SetConfig+0x118>)
 8003c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2064      	movs	r0, #100	@ 0x64
 8003c86:	fb00 f303 	mul.w	r3, r0, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	@ 0x32
 8003c90:	4a07      	ldr	r2, [pc, #28]	@ (8003cb0 <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	51eb851f 	.word	0x51eb851f

08003cb4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cba:	f3ef 8305 	mrs	r3, IPSR
 8003cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cca:	607b      	str	r3, [r7, #4]
  return(result);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <osKernelInitialize+0x32>
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <osKernelInitialize+0x60>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d109      	bne.n	8003cee <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cda:	f3ef 8311 	mrs	r3, BASEPRI
 8003cde:	603b      	str	r3, [r7, #0]
  return(result);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003ce6:	f06f 0305 	mvn.w	r3, #5
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e00c      	b.n	8003d08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <osKernelInitialize+0x60>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <osKernelInitialize+0x60>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e002      	b.n	8003d08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	20000120 	.word	0x20000120

08003d18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d1e:	f3ef 8305 	mrs	r3, IPSR
 8003d22:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2e:	607b      	str	r3, [r7, #4]
  return(result);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <osKernelStart+0x32>
 8003d36:	4b11      	ldr	r3, [pc, #68]	@ (8003d7c <osKernelStart+0x64>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d109      	bne.n	8003d52 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d42:	603b      	str	r3, [r7, #0]
  return(result);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d4a:	f06f 0305 	mvn.w	r3, #5
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e00e      	b.n	8003d70 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d52:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <osKernelStart+0x64>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d107      	bne.n	8003d6a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003d5a:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <osKernelStart+0x64>)
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d60:	f001 f890 	bl	8004e84 <vTaskStartScheduler>
      stat = osOK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e002      	b.n	8003d70 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d70:	68fb      	ldr	r3, [r7, #12]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000120 	.word	0x20000120

08003d80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b092      	sub	sp, #72	@ 0x48
 8003d84:	af04      	add	r7, sp, #16
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d90:	f3ef 8305 	mrs	r3, IPSR
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 8094 	bne.w	8003ec6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003da2:	623b      	str	r3, [r7, #32]
  return(result);
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 808d 	bne.w	8003ec6 <osThreadNew+0x146>
 8003dac:	4b48      	ldr	r3, [pc, #288]	@ (8003ed0 <osThreadNew+0x150>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d106      	bne.n	8003dc2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003db4:	f3ef 8311 	mrs	r3, BASEPRI
 8003db8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 8082 	bne.w	8003ec6 <osThreadNew+0x146>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d07e      	beq.n	8003ec6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003dcc:	2318      	movs	r3, #24
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003dd4:	f107 031b 	add.w	r3, r7, #27
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d045      	beq.n	8003e72 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <osThreadNew+0x74>
        name = attr->name;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <osThreadNew+0x9a>
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	2b38      	cmp	r3, #56	@ 0x38
 8003e0c:	d805      	bhi.n	8003e1a <osThreadNew+0x9a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <osThreadNew+0x9e>
        return (NULL);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e054      	b.n	8003ec8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <osThreadNew+0xd4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b5b      	cmp	r3, #91	@ 0x5b
 8003e3c:	d90a      	bls.n	8003e54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <osThreadNew+0xd4>
        mem = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e52:	e010      	b.n	8003e76 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10c      	bne.n	8003e76 <osThreadNew+0xf6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <osThreadNew+0xf6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <osThreadNew+0xf6>
          mem = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e70:	e001      	b.n	8003e76 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d110      	bne.n	8003e9e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e84:	9202      	str	r2, [sp, #8]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e90:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fe24 	bl	8004ae0 <xTaskCreateStatic>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e013      	b.n	8003ec6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d110      	bne.n	8003ec6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fe71 	bl	8004b9e <xTaskCreate>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <osThreadNew+0x146>
          hTask = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ec6:	697b      	ldr	r3, [r7, #20]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3738      	adds	r7, #56	@ 0x38
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000120 	.word	0x20000120

08003ed4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003edc:	f3ef 8305 	mrs	r3, IPSR
 8003ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8003eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <osDelay+0x34>
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <osDelay+0x58>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d109      	bne.n	8003f10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003efc:	f3ef 8311 	mrs	r3, BASEPRI
 8003f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <osDelay+0x3c>
    stat = osErrorISR;
 8003f08:	f06f 0305 	mvn.w	r3, #5
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e007      	b.n	8003f20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 ff7c 	bl	8004e18 <vTaskDelay>
    }
  }

  return (stat);
 8003f20:	697b      	ldr	r3, [r7, #20]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000120 	.word	0x20000120

08003f30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a06      	ldr	r2, [pc, #24]	@ (8003f58 <vApplicationGetIdleTaskMemory+0x28>)
 8003f40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4a05      	ldr	r2, [pc, #20]	@ (8003f5c <vApplicationGetIdleTaskMemory+0x2c>)
 8003f46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2280      	movs	r2, #128	@ 0x80
 8003f4c:	601a      	str	r2, [r3, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	20000124 	.word	0x20000124
 8003f5c:	20000180 	.word	0x20000180

08003f60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a07      	ldr	r2, [pc, #28]	@ (8003f8c <vApplicationGetTimerTaskMemory+0x2c>)
 8003f70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4a06      	ldr	r2, [pc, #24]	@ (8003f90 <vApplicationGetTimerTaskMemory+0x30>)
 8003f76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f7e:	601a      	str	r2, [r3, #0]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000380 	.word	0x20000380
 8003f90:	200003dc 	.word	0x200003dc

08003f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f103 0208 	add.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f103 0208 	add.w	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f103 0208 	add.w	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr

08003fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d103      	bne.n	8004050 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e00c      	b.n	800406a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3308      	adds	r3, #8
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e002      	b.n	800405e <vListInsert+0x2e>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d2f6      	bcs.n	8004058 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6892      	ldr	r2, [r2, #8]
 80040b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6852      	ldr	r2, [r2, #4]
 80040c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d103      	bne.n	80040d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1e5a      	subs	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr
	...

080040f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004120:	f001 fffc 	bl	800611c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	441a      	add	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	3b01      	subs	r3, #1
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	22ff      	movs	r2, #255	@ 0xff
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	22ff      	movs	r2, #255	@ 0xff
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d114      	bne.n	80041a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01a      	beq.n	80041b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3310      	adds	r3, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f001 f910 	bl	80053a8 <xTaskRemoveFromEventList>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <xQueueGenericReset+0xd0>)
 8004190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	e009      	b.n	80041b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3310      	adds	r3, #16
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fef5 	bl	8003f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3324      	adds	r3, #36	@ 0x24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fef0 	bl	8003f94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041b4:	f001 ffe2 	bl	800617c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041b8:	2301      	movs	r3, #1
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	@ 0x38
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <xQueueGenericCreateStatic+0x56>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <xQueueGenericCreateStatic+0x5a>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <xQueueGenericCreateStatic+0x5c>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	623b      	str	r3, [r7, #32]
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <xQueueGenericCreateStatic+0x84>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <xQueueGenericCreateStatic+0x88>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <xQueueGenericCreateStatic+0x8a>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	61fb      	str	r3, [r7, #28]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800426e:	2350      	movs	r3, #80	@ 0x50
 8004270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b50      	cmp	r3, #80	@ 0x50
 8004276:	d00b      	beq.n	8004290 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	61bb      	str	r3, [r7, #24]
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00d      	beq.n	80042b6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042a2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f805 	bl	80042c0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3730      	adds	r7, #48	@ 0x30
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e002      	b.n	80042e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042ee:	2101      	movs	r1, #1
 80042f0:	69b8      	ldr	r0, [r7, #24]
 80042f2:	f7ff feff 	bl	80040f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	@ 0x38
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <xQueueGenericSend+0x34>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <xQueueGenericSend+0x42>
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <xQueueGenericSend+0x46>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xQueueGenericSend+0x48>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <xQueueGenericSend+0x64>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d103      	bne.n	800437a <xQueueGenericSend+0x72>
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <xQueueGenericSend+0x76>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueGenericSend+0x78>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <xQueueGenericSend+0x94>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800439c:	f001 f9c8 	bl	8005730 <xTaskGetSchedulerState>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <xQueueGenericSend+0xa4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <xQueueGenericSend+0xa8>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <xQueueGenericSend+0xaa>
 80043b0:	2300      	movs	r3, #0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <xQueueGenericSend+0xc6>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	61fb      	str	r3, [r7, #28]
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	e7fd      	b.n	80043ca <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043ce:	f001 fea5 	bl	800611c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <xQueueGenericSend+0xdc>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d129      	bne.n	8004438 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ea:	f000 fa0d 	bl	8004808 <prvCopyDataToQueue>
 80043ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	3324      	adds	r3, #36	@ 0x24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 ffd3 	bl	80053a8 <xTaskRemoveFromEventList>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004408:	4b3f      	ldr	r3, [pc, #252]	@ (8004508 <xQueueGenericSend+0x200>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	e00a      	b.n	8004430 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800441a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004420:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <xQueueGenericSend+0x200>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004430:	f001 fea4 	bl	800617c <vPortExitCritical>
				return pdPASS;
 8004434:	2301      	movs	r3, #1
 8004436:	e063      	b.n	8004500 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800443e:	f001 fe9d 	bl	800617c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004442:	2300      	movs	r3, #0
 8004444:	e05c      	b.n	8004500 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4618      	mov	r0, r3
 8004452:	f001 f80d 	bl	8005470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800445a:	f001 fe8f 	bl	800617c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800445e:	f000 fd79 	bl	8004f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004462:	f001 fe5b 	bl	800611c <vPortEnterCritical>
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800446c:	b25b      	sxtb	r3, r3
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d103      	bne.n	800447c <xQueueGenericSend+0x174>
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004482:	b25b      	sxtb	r3, r3
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d103      	bne.n	8004492 <xQueueGenericSend+0x18a>
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004492:	f001 fe73 	bl	800617c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004496:	1d3a      	adds	r2, r7, #4
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fffc 	bl	800549c <xTaskCheckForTimeOut>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d124      	bne.n	80044f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044ac:	f000 faa4 	bl	80049f8 <prvIsQueueFull>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d018      	beq.n	80044e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	3310      	adds	r3, #16
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 ff20 	bl	8005304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044c6:	f000 fa2f 	bl	8004928 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044ca:	f000 fd51 	bl	8004f70 <xTaskResumeAll>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f af7c 	bne.w	80043ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80044d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <xQueueGenericSend+0x200>)
 80044d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	e772      	b.n	80043ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044ea:	f000 fa1d 	bl	8004928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044ee:	f000 fd3f 	bl	8004f70 <xTaskResumeAll>
 80044f2:	e76c      	b.n	80043ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044f6:	f000 fa17 	bl	8004928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044fa:	f000 fd39 	bl	8004f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044fe:	2300      	movs	r3, #0
		}
	}
}
 8004500:	4618      	mov	r0, r3
 8004502:	3738      	adds	r7, #56	@ 0x38
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	@ 0x38
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <xQueueGenericSendFromISR+0x3e>
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <xQueueGenericSendFromISR+0x42>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <xQueueGenericSendFromISR+0x44>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	623b      	str	r3, [r7, #32]
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d103      	bne.n	800457a <xQueueGenericSendFromISR+0x6e>
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <xQueueGenericSendFromISR+0x72>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xQueueGenericSendFromISR+0x74>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	61fb      	str	r3, [r7, #28]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800459c:	f001 fe80 	bl	80062a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045a0:	f3ef 8211 	mrs	r2, BASEPRI
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61ba      	str	r2, [r7, #24]
 80045b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <xQueueGenericSendFromISR+0xc2>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d12c      	bne.n	8004628 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045de:	f000 f913 	bl	8004808 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d112      	bne.n	8004612 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d016      	beq.n	8004622 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	3324      	adds	r3, #36	@ 0x24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fed5 	bl	80053a8 <xTaskRemoveFromEventList>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e007      	b.n	8004622 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004612:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004616:	3301      	adds	r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	b25a      	sxtb	r2, r3
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004622:	2301      	movs	r3, #1
 8004624:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004626:	e001      	b.n	800462c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	@ 0x34
 800462c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004636:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800463a:	4618      	mov	r0, r3
 800463c:	3738      	adds	r7, #56	@ 0x38
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	@ 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <xQueueReceive+0x32>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	623b      	str	r3, [r7, #32]
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	e7fd      	b.n	8004672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <xQueueReceive+0x40>
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <xQueueReceive+0x44>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <xQueueReceive+0x46>
 8004688:	2300      	movs	r3, #0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <xQueueReceive+0x62>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	61fb      	str	r3, [r7, #28]
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	e7fd      	b.n	80046a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046a6:	f001 f843 	bl	8005730 <xTaskGetSchedulerState>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <xQueueReceive+0x72>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <xQueueReceive+0x76>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <xQueueReceive+0x78>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <xQueueReceive+0x94>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	61bb      	str	r3, [r7, #24]
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d8:	f001 fd20 	bl	800611c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01f      	beq.n	8004728 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046ec:	f000 f8f6 	bl	80048dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	3310      	adds	r3, #16
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fe4f 	bl	80053a8 <xTaskRemoveFromEventList>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004710:	4b3c      	ldr	r3, [pc, #240]	@ (8004804 <xQueueReceive+0x1c0>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004720:	f001 fd2c 	bl	800617c <vPortExitCritical>
				return pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	e069      	b.n	80047fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800472e:	f001 fd25 	bl	800617c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004732:	2300      	movs	r3, #0
 8004734:	e062      	b.n	80047fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fe95 	bl	8005470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004746:	2301      	movs	r3, #1
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800474a:	f001 fd17 	bl	800617c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800474e:	f000 fc01 	bl	8004f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004752:	f001 fce3 	bl	800611c <vPortEnterCritical>
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800475c:	b25b      	sxtb	r3, r3
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d103      	bne.n	800476c <xQueueReceive+0x128>
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004772:	b25b      	sxtb	r3, r3
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d103      	bne.n	8004782 <xQueueReceive+0x13e>
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004782:	f001 fcfb 	bl	800617c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004786:	1d3a      	adds	r2, r7, #4
 8004788:	f107 0310 	add.w	r3, r7, #16
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fe84 	bl	800549c <xTaskCheckForTimeOut>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d123      	bne.n	80047e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800479a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800479c:	f000 f916 	bl	80049cc <prvIsQueueEmpty>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d017      	beq.n	80047d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a8:	3324      	adds	r3, #36	@ 0x24
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fda8 	bl	8005304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047b6:	f000 f8b7 	bl	8004928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047ba:	f000 fbd9 	bl	8004f70 <xTaskResumeAll>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d189      	bne.n	80046d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80047c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004804 <xQueueReceive+0x1c0>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	e780      	b.n	80046d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047d8:	f000 f8a6 	bl	8004928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047dc:	f000 fbc8 	bl	8004f70 <xTaskResumeAll>
 80047e0:	e77a      	b.n	80046d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047e4:	f000 f8a0 	bl	8004928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e8:	f000 fbc2 	bl	8004f70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047ee:	f000 f8ed 	bl	80049cc <prvIsQueueEmpty>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f43f af6f 	beq.w	80046d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3730      	adds	r7, #48	@ 0x30
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d14d      	bne.n	80048ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 ff9a 	bl	800576c <xTaskPriorityDisinherit>
 8004838:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	e043      	b.n	80048ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d119      	bne.n	800487c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6898      	ldr	r0, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	461a      	mov	r2, r3
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	f001 ff6e 	bl	8006734 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	441a      	add	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d32b      	bcc.n	80048ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	e026      	b.n	80048ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68d8      	ldr	r0, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	461a      	mov	r2, r3
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	f001 ff54 	bl	8006734 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	425b      	negs	r3, r3
 8004896:	441a      	add	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d207      	bcs.n	80048b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b0:	425b      	negs	r3, r3
 80048b2:	441a      	add	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d105      	bne.n	80048ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80048d2:	697b      	ldr	r3, [r7, #20]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d018      	beq.n	8004920 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	441a      	add	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d303      	bcc.n	8004910 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68d9      	ldr	r1, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	461a      	mov	r2, r3
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	f001 ff0a 	bl	8006734 <memcpy>
	}
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004930:	f001 fbf4 	bl	800611c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800493a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800493c:	e011      	b.n	8004962 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3324      	adds	r3, #36	@ 0x24
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fd2c 	bl	80053a8 <xTaskRemoveFromEventList>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004956:	f000 fe05 	bl	8005564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	3b01      	subs	r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	dce9      	bgt.n	800493e <prvUnlockQueue+0x16>
 800496a:	e000      	b.n	800496e <prvUnlockQueue+0x46>
					break;
 800496c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	22ff      	movs	r2, #255	@ 0xff
 8004972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004976:	f001 fc01 	bl	800617c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800497a:	f001 fbcf 	bl	800611c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004984:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004986:	e011      	b.n	80049ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3310      	adds	r3, #16
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fd07 	bl	80053a8 <xTaskRemoveFromEventList>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049a0:	f000 fde0 	bl	8005564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dce9      	bgt.n	8004988 <prvUnlockQueue+0x60>
 80049b4:	e000      	b.n	80049b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	22ff      	movs	r2, #255	@ 0xff
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80049c0:	f001 fbdc 	bl	800617c <vPortExitCritical>
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049d4:	f001 fba2 	bl	800611c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e001      	b.n	80049ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049ea:	f001 fbc7 	bl	800617c <vPortExitCritical>

	return xReturn;
 80049ee:	68fb      	ldr	r3, [r7, #12]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a00:	f001 fb8c 	bl	800611c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d102      	bne.n	8004a16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e001      	b.n	8004a1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a1a:	f001 fbaf 	bl	800617c <vPortExitCritical>

	return xReturn;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e014      	b.n	8004a62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a38:	4a0e      	ldr	r2, [pc, #56]	@ (8004a74 <vQueueAddToRegistry+0x4c>)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a44:	490b      	ldr	r1, [pc, #44]	@ (8004a74 <vQueueAddToRegistry+0x4c>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a4e:	4a09      	ldr	r2, [pc, #36]	@ (8004a74 <vQueueAddToRegistry+0x4c>)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a5a:	e006      	b.n	8004a6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b07      	cmp	r3, #7
 8004a66:	d9e7      	bls.n	8004a38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	200007dc 	.word	0x200007dc

08004a78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a88:	f001 fb48 	bl	800611c <vPortEnterCritical>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d103      	bne.n	8004aa2 <vQueueWaitForMessageRestricted+0x2a>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d103      	bne.n	8004ab8 <vQueueWaitForMessageRestricted+0x40>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ab8:	f001 fb60 	bl	800617c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	3324      	adds	r3, #36	@ 0x24
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fc3f 	bl	8005350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ad2:	6978      	ldr	r0, [r7, #20]
 8004ad4:	f7ff ff28 	bl	8004928 <prvUnlockQueue>
	}
 8004ad8:	bf00      	nop
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08e      	sub	sp, #56	@ 0x38
 8004ae4:	af04      	add	r7, sp, #16
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	623b      	str	r3, [r7, #32]
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	e7fd      	b.n	8004b08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10b      	bne.n	8004b2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	61fb      	str	r3, [r7, #28]
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	e7fd      	b.n	8004b26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b2a:	235c      	movs	r3, #92	@ 0x5c
 8004b2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b32:	d00b      	beq.n	8004b4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	61bb      	str	r3, [r7, #24]
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	e7fd      	b.n	8004b48 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01e      	beq.n	8004b90 <xTaskCreateStatic+0xb0>
 8004b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b60:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9303      	str	r3, [sp, #12]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	9302      	str	r3, [sp, #8]
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f850 	bl	8004c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b8a:	f000 f8d5 	bl	8004d38 <prvAddNewTaskToReadyList>
 8004b8e:	e001      	b.n	8004b94 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b94:	697b      	ldr	r3, [r7, #20]
	}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3728      	adds	r7, #40	@ 0x28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b08c      	sub	sp, #48	@ 0x30
 8004ba2:	af04      	add	r7, sp, #16
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fbb4 	bl	8006320 <pvPortMalloc>
 8004bb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004bc0:	205c      	movs	r0, #92	@ 0x5c
 8004bc2:	f001 fbad 	bl	8006320 <pvPortMalloc>
 8004bc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bd4:	e005      	b.n	8004be2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	f001 fc6a 	bl	80064b0 <vPortFree>
 8004bdc:	e001      	b.n	8004be2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bf0:	88fa      	ldrh	r2, [r7, #6]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9303      	str	r3, [sp, #12]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	9302      	str	r3, [sp, #8]
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f80e 	bl	8004c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c0c:	69f8      	ldr	r0, [r7, #28]
 8004c0e:	f000 f893 	bl	8004d38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c12:	2301      	movs	r3, #1
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e002      	b.n	8004c1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	461a      	mov	r2, r3
 8004c40:	21a5      	movs	r1, #165	@ 0xa5
 8004c42:	f001 fd4b 	bl	80066dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c50:	3b01      	subs	r3, #1
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f023 0307 	bic.w	r3, r3, #7
 8004c5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	617b      	str	r3, [r7, #20]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e012      	b.n	8004cae <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	7819      	ldrb	r1, [r3, #0]
 8004c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	3334      	adds	r3, #52	@ 0x34
 8004c98:	460a      	mov	r2, r1
 8004c9a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	3301      	adds	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2b0f      	cmp	r3, #15
 8004cb2:	d9e9      	bls.n	8004c88 <prvInitialiseNewTask+0x60>
 8004cb4:	e000      	b.n	8004cb8 <prvInitialiseNewTask+0x90>
		{
			break;
 8004cb6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc2:	2b37      	cmp	r3, #55	@ 0x37
 8004cc4:	d901      	bls.n	8004cca <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cc6:	2337      	movs	r3, #55	@ 0x37
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	2200      	movs	r2, #0
 8004cda:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff f976 	bl	8003fd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	3318      	adds	r3, #24
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f971 	bl	8003fd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d04:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	2200      	movs	r2, #0
 8004d0a:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	69b8      	ldr	r0, [r7, #24]
 8004d1a:	f001 f90b 	bl	8005f34 <pxPortInitialiseStack>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d30:	bf00      	nop
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d40:	f001 f9ec 	bl	800611c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d44:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <prvAddNewTaskToReadyList+0xc4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dfc <prvAddNewTaskToReadyList+0xc4>)
 8004d4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e00 <prvAddNewTaskToReadyList+0xc8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d56:	4a2a      	ldr	r2, [pc, #168]	@ (8004e00 <prvAddNewTaskToReadyList+0xc8>)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d5c:	4b27      	ldr	r3, [pc, #156]	@ (8004dfc <prvAddNewTaskToReadyList+0xc4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d110      	bne.n	8004d86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d64:	f000 fc22 	bl	80055ac <prvInitialiseTaskLists>
 8004d68:	e00d      	b.n	8004d86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d6a:	4b26      	ldr	r3, [pc, #152]	@ (8004e04 <prvAddNewTaskToReadyList+0xcc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d72:	4b23      	ldr	r3, [pc, #140]	@ (8004e00 <prvAddNewTaskToReadyList+0xc8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d802      	bhi.n	8004d86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d80:	4a1f      	ldr	r2, [pc, #124]	@ (8004e00 <prvAddNewTaskToReadyList+0xc8>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d86:	4b20      	ldr	r3, [pc, #128]	@ (8004e08 <prvAddNewTaskToReadyList+0xd0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e08 <prvAddNewTaskToReadyList+0xd0>)
 8004d8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d90:	4b1d      	ldr	r3, [pc, #116]	@ (8004e08 <prvAddNewTaskToReadyList+0xd0>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <prvAddNewTaskToReadyList+0xd4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d903      	bls.n	8004dac <prvAddNewTaskToReadyList+0x74>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	4a18      	ldr	r2, [pc, #96]	@ (8004e0c <prvAddNewTaskToReadyList+0xd4>)
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4a15      	ldr	r2, [pc, #84]	@ (8004e10 <prvAddNewTaskToReadyList+0xd8>)
 8004dba:	441a      	add	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f7ff f911 	bl	8003fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dc8:	f001 f9d8 	bl	800617c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <prvAddNewTaskToReadyList+0xcc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <prvAddNewTaskToReadyList+0xc8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d207      	bcs.n	8004df2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004de2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <prvAddNewTaskToReadyList+0xdc>)
 8004de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000cf0 	.word	0x20000cf0
 8004e00:	2000081c 	.word	0x2000081c
 8004e04:	20000cfc 	.word	0x20000cfc
 8004e08:	20000d0c 	.word	0x20000d0c
 8004e0c:	20000cf8 	.word	0x20000cf8
 8004e10:	20000820 	.word	0x20000820
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e2a:	4b14      	ldr	r3, [pc, #80]	@ (8004e7c <vTaskDelay+0x64>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <vTaskDelay+0x32>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60bb      	str	r3, [r7, #8]
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	e7fd      	b.n	8004e46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e4a:	f000 f883 	bl	8004f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e4e:	2100      	movs	r1, #0
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fcfb 	bl	800584c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e56:	f000 f88b 	bl	8004f70 <xTaskResumeAll>
 8004e5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d107      	bne.n	8004e72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004e62:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <vTaskDelay+0x68>)
 8004e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000d18 	.word	0x20000d18
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	@ 0x28
 8004e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e92:	463a      	mov	r2, r7
 8004e94:	1d39      	adds	r1, r7, #4
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f848 	bl	8003f30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	9202      	str	r2, [sp, #8]
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	460a      	mov	r2, r1
 8004eb2:	4922      	ldr	r1, [pc, #136]	@ (8004f3c <vTaskStartScheduler+0xb8>)
 8004eb4:	4822      	ldr	r0, [pc, #136]	@ (8004f40 <vTaskStartScheduler+0xbc>)
 8004eb6:	f7ff fe13 	bl	8004ae0 <xTaskCreateStatic>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4a21      	ldr	r2, [pc, #132]	@ (8004f44 <vTaskStartScheduler+0xc0>)
 8004ebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ec0:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <vTaskStartScheduler+0xc0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e001      	b.n	8004ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d102      	bne.n	8004ede <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ed8:	f000 fd0c 	bl	80058f4 <xTimerCreateTimerTask>
 8004edc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d116      	bne.n	8004f12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	613b      	str	r3, [r7, #16]
}
 8004ef6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef8:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <vTaskStartScheduler+0xc4>)
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f00:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <vTaskStartScheduler+0xc8>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f06:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <vTaskStartScheduler+0xcc>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f0c:	f001 f894 	bl	8006038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f10:	e00f      	b.n	8004f32 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d10b      	bne.n	8004f32 <vTaskStartScheduler+0xae>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60fb      	str	r3, [r7, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <vTaskStartScheduler+0xaa>
}
 8004f32:	bf00      	nop
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	08006780 	.word	0x08006780
 8004f40:	0800557d 	.word	0x0800557d
 8004f44:	20000d14 	.word	0x20000d14
 8004f48:	20000d10 	.word	0x20000d10
 8004f4c:	20000cfc 	.word	0x20000cfc
 8004f50:	20000cf4 	.word	0x20000cf4

08004f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f58:	4b04      	ldr	r3, [pc, #16]	@ (8004f6c <vTaskSuspendAll+0x18>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	4a03      	ldr	r2, [pc, #12]	@ (8004f6c <vTaskSuspendAll+0x18>)
 8004f60:	6013      	str	r3, [r2, #0]
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000d18 	.word	0x20000d18

08004f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f7e:	4b42      	ldr	r3, [pc, #264]	@ (8005088 <xTaskResumeAll+0x118>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <xTaskResumeAll+0x2e>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	603b      	str	r3, [r7, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	e7fd      	b.n	8004f9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f9e:	f001 f8bd 	bl	800611c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fa2:	4b39      	ldr	r3, [pc, #228]	@ (8005088 <xTaskResumeAll+0x118>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	4a37      	ldr	r2, [pc, #220]	@ (8005088 <xTaskResumeAll+0x118>)
 8004faa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fac:	4b36      	ldr	r3, [pc, #216]	@ (8005088 <xTaskResumeAll+0x118>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d162      	bne.n	800507a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fb4:	4b35      	ldr	r3, [pc, #212]	@ (800508c <xTaskResumeAll+0x11c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d05e      	beq.n	800507a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fbc:	e02f      	b.n	800501e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004fbe:	4b34      	ldr	r3, [pc, #208]	@ (8005090 <xTaskResumeAll+0x120>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3318      	adds	r3, #24
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff f868 	bl	80040a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff f863 	bl	80040a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fde:	4b2d      	ldr	r3, [pc, #180]	@ (8005094 <xTaskResumeAll+0x124>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d903      	bls.n	8004fee <xTaskResumeAll+0x7e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	4a2a      	ldr	r2, [pc, #168]	@ (8005094 <xTaskResumeAll+0x124>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4a27      	ldr	r2, [pc, #156]	@ (8005098 <xTaskResumeAll+0x128>)
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe fff0 	bl	8003fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500e:	4b23      	ldr	r3, [pc, #140]	@ (800509c <xTaskResumeAll+0x12c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005018:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <xTaskResumeAll+0x130>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501e:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <xTaskResumeAll+0x120>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1cb      	bne.n	8004fbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800502c:	f000 fb5c 	bl	80056e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005030:	4b1c      	ldr	r3, [pc, #112]	@ (80050a4 <xTaskResumeAll+0x134>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d010      	beq.n	800505e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800503c:	f000 f844 	bl	80050c8 <xTaskIncrementTick>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005046:	4b16      	ldr	r3, [pc, #88]	@ (80050a0 <xTaskResumeAll+0x130>)
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f1      	bne.n	800503c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005058:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <xTaskResumeAll+0x134>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800505e:	4b10      	ldr	r3, [pc, #64]	@ (80050a0 <xTaskResumeAll+0x130>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800506a:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <xTaskResumeAll+0x138>)
 800506c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800507a:	f001 f87f 	bl	800617c <vPortExitCritical>

	return xAlreadyYielded;
 800507e:	68bb      	ldr	r3, [r7, #8]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000d18 	.word	0x20000d18
 800508c:	20000cf0 	.word	0x20000cf0
 8005090:	20000cb0 	.word	0x20000cb0
 8005094:	20000cf8 	.word	0x20000cf8
 8005098:	20000820 	.word	0x20000820
 800509c:	2000081c 	.word	0x2000081c
 80050a0:	20000d04 	.word	0x20000d04
 80050a4:	20000d00 	.word	0x20000d00
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050b2:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <xTaskGetTickCount+0x18>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050b8:	687b      	ldr	r3, [r7, #4]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	20000cf4 	.word	0x20000cf4

080050c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d2:	4b52      	ldr	r3, [pc, #328]	@ (800521c <xTaskIncrementTick+0x154>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 808f 	bne.w	80051fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050dc:	4b50      	ldr	r3, [pc, #320]	@ (8005220 <xTaskIncrementTick+0x158>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050e4:	4a4e      	ldr	r2, [pc, #312]	@ (8005220 <xTaskIncrementTick+0x158>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d121      	bne.n	8005134 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80050f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005224 <xTaskIncrementTick+0x15c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <xTaskIncrementTick+0x4a>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	603b      	str	r3, [r7, #0]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <xTaskIncrementTick+0x46>
 8005112:	4b44      	ldr	r3, [pc, #272]	@ (8005224 <xTaskIncrementTick+0x15c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	4b43      	ldr	r3, [pc, #268]	@ (8005228 <xTaskIncrementTick+0x160>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a41      	ldr	r2, [pc, #260]	@ (8005224 <xTaskIncrementTick+0x15c>)
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	4a41      	ldr	r2, [pc, #260]	@ (8005228 <xTaskIncrementTick+0x160>)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b41      	ldr	r3, [pc, #260]	@ (800522c <xTaskIncrementTick+0x164>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a3f      	ldr	r2, [pc, #252]	@ (800522c <xTaskIncrementTick+0x164>)
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	f000 fada 	bl	80056e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005134:	4b3e      	ldr	r3, [pc, #248]	@ (8005230 <xTaskIncrementTick+0x168>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	d34e      	bcc.n	80051dc <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800513e:	4b39      	ldr	r3, [pc, #228]	@ (8005224 <xTaskIncrementTick+0x15c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <xTaskIncrementTick+0x84>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <xTaskIncrementTick+0x86>
 800514c:	2300      	movs	r3, #0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005152:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <xTaskIncrementTick+0x168>)
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	601a      	str	r2, [r3, #0]
					break;
 800515a:	e03f      	b.n	80051dc <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800515c:	4b31      	ldr	r3, [pc, #196]	@ (8005224 <xTaskIncrementTick+0x15c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d203      	bcs.n	800517c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005174:	4a2e      	ldr	r2, [pc, #184]	@ (8005230 <xTaskIncrementTick+0x168>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6013      	str	r3, [r2, #0]
						break;
 800517a:	e02f      	b.n	80051dc <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe ff8d 	bl	80040a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3318      	adds	r3, #24
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe ff84 	bl	80040a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <xTaskIncrementTick+0x16c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <xTaskIncrementTick+0xe4>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <xTaskIncrementTick+0x16c>)
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005238 <xTaskIncrementTick+0x170>)
 80051ba:	441a      	add	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fe ff11 	bl	8003fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051cc:	4b1b      	ldr	r3, [pc, #108]	@ (800523c <xTaskIncrementTick+0x174>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d3b3      	bcc.n	800513e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80051d6:	2301      	movs	r3, #1
 80051d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051da:	e7b0      	b.n	800513e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051dc:	4b17      	ldr	r3, [pc, #92]	@ (800523c <xTaskIncrementTick+0x174>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e2:	4915      	ldr	r1, [pc, #84]	@ (8005238 <xTaskIncrementTick+0x170>)
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d907      	bls.n	8005204 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e004      	b.n	8005204 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051fa:	4b11      	ldr	r3, [pc, #68]	@ (8005240 <xTaskIncrementTick+0x178>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	4a0f      	ldr	r2, [pc, #60]	@ (8005240 <xTaskIncrementTick+0x178>)
 8005202:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005204:	4b0f      	ldr	r3, [pc, #60]	@ (8005244 <xTaskIncrementTick+0x17c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005210:	697b      	ldr	r3, [r7, #20]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000d18 	.word	0x20000d18
 8005220:	20000cf4 	.word	0x20000cf4
 8005224:	20000ca8 	.word	0x20000ca8
 8005228:	20000cac 	.word	0x20000cac
 800522c:	20000d08 	.word	0x20000d08
 8005230:	20000d10 	.word	0x20000d10
 8005234:	20000cf8 	.word	0x20000cf8
 8005238:	20000820 	.word	0x20000820
 800523c:	2000081c 	.word	0x2000081c
 8005240:	20000d00 	.word	0x20000d00
 8005244:	20000d04 	.word	0x20000d04

08005248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800524e:	4b28      	ldr	r3, [pc, #160]	@ (80052f0 <vTaskSwitchContext+0xa8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005256:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <vTaskSwitchContext+0xac>)
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800525c:	e042      	b.n	80052e4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800525e:	4b25      	ldr	r3, [pc, #148]	@ (80052f4 <vTaskSwitchContext+0xac>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005264:	4b24      	ldr	r3, [pc, #144]	@ (80052f8 <vTaskSwitchContext+0xb0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	e011      	b.n	8005290 <vTaskSwitchContext+0x48>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <vTaskSwitchContext+0x42>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	607b      	str	r3, [r7, #4]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <vTaskSwitchContext+0x3e>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b01      	subs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	491a      	ldr	r1, [pc, #104]	@ (80052fc <vTaskSwitchContext+0xb4>)
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0e3      	beq.n	800526c <vTaskSwitchContext+0x24>
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4a13      	ldr	r2, [pc, #76]	@ (80052fc <vTaskSwitchContext+0xb4>)
 80052b0:	4413      	add	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	3308      	adds	r3, #8
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d104      	bne.n	80052d4 <vTaskSwitchContext+0x8c>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <vTaskSwitchContext+0xb8>)
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4a06      	ldr	r2, [pc, #24]	@ (80052f8 <vTaskSwitchContext+0xb0>)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6013      	str	r3, [r2, #0]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000d18 	.word	0x20000d18
 80052f4:	20000d04 	.word	0x20000d04
 80052f8:	20000cf8 	.word	0x20000cf8
 80052fc:	20000820 	.word	0x20000820
 8005300:	2000081c 	.word	0x2000081c

08005304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	60fb      	str	r3, [r7, #12]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800532c:	4b07      	ldr	r3, [pc, #28]	@ (800534c <vTaskPlaceOnEventList+0x48>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3318      	adds	r3, #24
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fe fe7b 	bl	8004030 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800533a:	2101      	movs	r1, #1
 800533c:	6838      	ldr	r0, [r7, #0]
 800533e:	f000 fa85 	bl	800584c <prvAddCurrentTaskToDelayedList>
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	2000081c 	.word	0x2000081c

08005350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	617b      	str	r3, [r7, #20]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800537a:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3318      	adds	r3, #24
 8005380:	4619      	mov	r1, r3
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7fe fe31 	bl	8003fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800538e:	f04f 33ff 	mov.w	r3, #4294967295
 8005392:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f000 fa58 	bl	800584c <prvAddCurrentTaskToDelayedList>
	}
 800539c:	bf00      	nop
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	2000081c 	.word	0x2000081c

080053a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60fb      	str	r3, [r7, #12]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3318      	adds	r3, #24
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fe60 	bl	80040a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005458 <xTaskRemoveFromEventList+0xb0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11d      	bne.n	8005424 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fe57 	bl	80040a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	4b19      	ldr	r3, [pc, #100]	@ (800545c <xTaskRemoveFromEventList+0xb4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d903      	bls.n	8005406 <xTaskRemoveFromEventList+0x5e>
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	4a16      	ldr	r2, [pc, #88]	@ (800545c <xTaskRemoveFromEventList+0xb4>)
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a13      	ldr	r2, [pc, #76]	@ (8005460 <xTaskRemoveFromEventList+0xb8>)
 8005414:	441a      	add	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3304      	adds	r3, #4
 800541a:	4619      	mov	r1, r3
 800541c:	4610      	mov	r0, r2
 800541e:	f7fe fde4 	bl	8003fea <vListInsertEnd>
 8005422:	e005      	b.n	8005430 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3318      	adds	r3, #24
 8005428:	4619      	mov	r1, r3
 800542a:	480e      	ldr	r0, [pc, #56]	@ (8005464 <xTaskRemoveFromEventList+0xbc>)
 800542c:	f7fe fddd 	bl	8003fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005434:	4b0c      	ldr	r3, [pc, #48]	@ (8005468 <xTaskRemoveFromEventList+0xc0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d905      	bls.n	800544a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800543e:	2301      	movs	r3, #1
 8005440:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005442:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <xTaskRemoveFromEventList+0xc4>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e001      	b.n	800544e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800544e:	697b      	ldr	r3, [r7, #20]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000d18 	.word	0x20000d18
 800545c:	20000cf8 	.word	0x20000cf8
 8005460:	20000820 	.word	0x20000820
 8005464:	20000cb0 	.word	0x20000cb0
 8005468:	2000081c 	.word	0x2000081c
 800546c:	20000d04 	.word	0x20000d04

08005470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005478:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <vTaskInternalSetTimeOutState+0x24>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005480:	4b05      	ldr	r3, [pc, #20]	@ (8005498 <vTaskInternalSetTimeOutState+0x28>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	605a      	str	r2, [r3, #4]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000d08 	.word	0x20000d08
 8005498:	20000cf4 	.word	0x20000cf4

0800549c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	613b      	str	r3, [r7, #16]
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	60fb      	str	r3, [r7, #12]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80054e2:	f000 fe1b 	bl	800611c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054e6:	4b1d      	ldr	r3, [pc, #116]	@ (800555c <xTaskCheckForTimeOut+0xc0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d102      	bne.n	8005506 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e023      	b.n	800554e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b15      	ldr	r3, [pc, #84]	@ (8005560 <xTaskCheckForTimeOut+0xc4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d007      	beq.n	8005522 <xTaskCheckForTimeOut+0x86>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	429a      	cmp	r2, r3
 800551a:	d302      	bcc.n	8005522 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800551c:	2301      	movs	r3, #1
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e015      	b.n	800554e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	429a      	cmp	r2, r3
 800552a:	d20b      	bcs.n	8005544 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	1ad2      	subs	r2, r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff99 	bl	8005470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e004      	b.n	800554e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800554e:	f000 fe15 	bl	800617c <vPortExitCritical>

	return xReturn;
 8005552:	69fb      	ldr	r3, [r7, #28]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000cf4 	.word	0x20000cf4
 8005560:	20000d08 	.word	0x20000d08

08005564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005568:	4b03      	ldr	r3, [pc, #12]	@ (8005578 <vTaskMissedYield+0x14>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000d04 	.word	0x20000d04

0800557c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005584:	f000 f852 	bl	800562c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005588:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <prvIdleTask+0x28>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d9f9      	bls.n	8005584 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <prvIdleTask+0x2c>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055a0:	e7f0      	b.n	8005584 <prvIdleTask+0x8>
 80055a2:	bf00      	nop
 80055a4:	20000820 	.word	0x20000820
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b2:	2300      	movs	r3, #0
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	e00c      	b.n	80055d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4a12      	ldr	r2, [pc, #72]	@ (800560c <prvInitialiseTaskLists+0x60>)
 80055c4:	4413      	add	r3, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fce4 	bl	8003f94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3301      	adds	r3, #1
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b37      	cmp	r3, #55	@ 0x37
 80055d6:	d9ef      	bls.n	80055b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055d8:	480d      	ldr	r0, [pc, #52]	@ (8005610 <prvInitialiseTaskLists+0x64>)
 80055da:	f7fe fcdb 	bl	8003f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055de:	480d      	ldr	r0, [pc, #52]	@ (8005614 <prvInitialiseTaskLists+0x68>)
 80055e0:	f7fe fcd8 	bl	8003f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055e4:	480c      	ldr	r0, [pc, #48]	@ (8005618 <prvInitialiseTaskLists+0x6c>)
 80055e6:	f7fe fcd5 	bl	8003f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055ea:	480c      	ldr	r0, [pc, #48]	@ (800561c <prvInitialiseTaskLists+0x70>)
 80055ec:	f7fe fcd2 	bl	8003f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055f0:	480b      	ldr	r0, [pc, #44]	@ (8005620 <prvInitialiseTaskLists+0x74>)
 80055f2:	f7fe fccf 	bl	8003f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <prvInitialiseTaskLists+0x78>)
 80055f8:	4a05      	ldr	r2, [pc, #20]	@ (8005610 <prvInitialiseTaskLists+0x64>)
 80055fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <prvInitialiseTaskLists+0x7c>)
 80055fe:	4a05      	ldr	r2, [pc, #20]	@ (8005614 <prvInitialiseTaskLists+0x68>)
 8005600:	601a      	str	r2, [r3, #0]
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000820 	.word	0x20000820
 8005610:	20000c80 	.word	0x20000c80
 8005614:	20000c94 	.word	0x20000c94
 8005618:	20000cb0 	.word	0x20000cb0
 800561c:	20000cc4 	.word	0x20000cc4
 8005620:	20000cdc 	.word	0x20000cdc
 8005624:	20000ca8 	.word	0x20000ca8
 8005628:	20000cac 	.word	0x20000cac

0800562c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005632:	e019      	b.n	8005668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005634:	f000 fd72 	bl	800611c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005638:	4b10      	ldr	r3, [pc, #64]	@ (800567c <prvCheckTasksWaitingTermination+0x50>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fd2b 	bl	80040a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <prvCheckTasksWaitingTermination+0x54>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3b01      	subs	r3, #1
 8005650:	4a0b      	ldr	r2, [pc, #44]	@ (8005680 <prvCheckTasksWaitingTermination+0x54>)
 8005652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <prvCheckTasksWaitingTermination+0x58>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	4a0a      	ldr	r2, [pc, #40]	@ (8005684 <prvCheckTasksWaitingTermination+0x58>)
 800565c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800565e:	f000 fd8d 	bl	800617c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f810 	bl	8005688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005668:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <prvCheckTasksWaitingTermination+0x58>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e1      	bne.n	8005634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000cc4 	.word	0x20000cc4
 8005680:	20000cf0 	.word	0x20000cf0
 8005684:	20000cd8 	.word	0x20000cd8

08005688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 ff06 	bl	80064b0 <vPortFree>
				vPortFree( pxTCB );
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 ff03 	bl	80064b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056aa:	e019      	b.n	80056e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d103      	bne.n	80056be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fefa 	bl	80064b0 <vPortFree>
	}
 80056bc:	e010      	b.n	80056e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d00b      	beq.n	80056e0 <prvDeleteTCB+0x58>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	60fb      	str	r3, [r7, #12]
}
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	e7fd      	b.n	80056dc <prvDeleteTCB+0x54>
	}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <prvResetNextTaskUnblockTime+0x40>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <prvResetNextTaskUnblockTime+0x14>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <prvResetNextTaskUnblockTime+0x16>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005702:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <prvResetNextTaskUnblockTime+0x44>)
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800570a:	e008      	b.n	800571e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800570c:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <prvResetNextTaskUnblockTime+0x40>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4a04      	ldr	r2, [pc, #16]	@ (800572c <prvResetNextTaskUnblockTime+0x44>)
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr
 8005728:	20000ca8 	.word	0x20000ca8
 800572c:	20000d10 	.word	0x20000d10

08005730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005736:	4b0b      	ldr	r3, [pc, #44]	@ (8005764 <xTaskGetSchedulerState+0x34>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800573e:	2301      	movs	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e008      	b.n	8005756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005744:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <xTaskGetSchedulerState+0x38>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800574c:	2302      	movs	r3, #2
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	e001      	b.n	8005756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005756:	687b      	ldr	r3, [r7, #4]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000cfc 	.word	0x20000cfc
 8005768:	20000d18 	.word	0x20000d18

0800576c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d058      	beq.n	8005834 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005782:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <xTaskPriorityDisinherit+0xd4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d00b      	beq.n	80057a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60bb      	str	r3, [r7, #8]
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d02c      	beq.n	8005834 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d128      	bne.n	8005834 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fc5a 	bl	80040a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005804:	4b0f      	ldr	r3, [pc, #60]	@ (8005844 <xTaskPriorityDisinherit+0xd8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskPriorityDisinherit+0xa8>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	4a0c      	ldr	r2, [pc, #48]	@ (8005844 <xTaskPriorityDisinherit+0xd8>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a09      	ldr	r2, [pc, #36]	@ (8005848 <xTaskPriorityDisinherit+0xdc>)
 8005822:	441a      	add	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fbdd 	bl	8003fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005830:	2301      	movs	r3, #1
 8005832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005834:	697b      	ldr	r3, [r7, #20]
	}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	2000081c 	.word	0x2000081c
 8005844:	20000cf8 	.word	0x20000cf8
 8005848:	20000820 	.word	0x20000820

0800584c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005856:	4b21      	ldr	r3, [pc, #132]	@ (80058dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800585c:	4b20      	ldr	r3, [pc, #128]	@ (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fc1c 	bl	80040a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d10a      	bne.n	8005886 <prvAddCurrentTaskToDelayedList+0x3a>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005876:	4b1a      	ldr	r3, [pc, #104]	@ (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4819      	ldr	r0, [pc, #100]	@ (80058e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005880:	f7fe fbb3 	bl	8003fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005884:	e026      	b.n	80058d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800588e:	4b14      	ldr	r3, [pc, #80]	@ (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	429a      	cmp	r2, r3
 800589c:	d209      	bcs.n	80058b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800589e:	4b12      	ldr	r3, [pc, #72]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b0f      	ldr	r3, [pc, #60]	@ (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7fe fbc0 	bl	8004030 <vListInsert>
}
 80058b0:	e010      	b.n	80058d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b2:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b0a      	ldr	r3, [pc, #40]	@ (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7fe fbb6 	bl	8004030 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058c4:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d202      	bcs.n	80058d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058ce:	4a08      	ldr	r2, [pc, #32]	@ (80058f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6013      	str	r3, [r2, #0]
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000cf4 	.word	0x20000cf4
 80058e0:	2000081c 	.word	0x2000081c
 80058e4:	20000cdc 	.word	0x20000cdc
 80058e8:	20000cac 	.word	0x20000cac
 80058ec:	20000ca8 	.word	0x20000ca8
 80058f0:	20000d10 	.word	0x20000d10

080058f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	@ 0x28
 80058f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058fe:	f000 fad9 	bl	8005eb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005902:	4b1d      	ldr	r3, [pc, #116]	@ (8005978 <xTimerCreateTimerTask+0x84>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d021      	beq.n	800594e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005912:	1d3a      	adds	r2, r7, #4
 8005914:	f107 0108 	add.w	r1, r7, #8
 8005918:	f107 030c 	add.w	r3, r7, #12
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fb1f 	bl	8003f60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	9202      	str	r2, [sp, #8]
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	2302      	movs	r3, #2
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2300      	movs	r3, #0
 8005932:	460a      	mov	r2, r1
 8005934:	4911      	ldr	r1, [pc, #68]	@ (800597c <xTimerCreateTimerTask+0x88>)
 8005936:	4812      	ldr	r0, [pc, #72]	@ (8005980 <xTimerCreateTimerTask+0x8c>)
 8005938:	f7ff f8d2 	bl	8004ae0 <xTaskCreateStatic>
 800593c:	4603      	mov	r3, r0
 800593e:	4a11      	ldr	r2, [pc, #68]	@ (8005984 <xTimerCreateTimerTask+0x90>)
 8005940:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005942:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <xTimerCreateTimerTask+0x90>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800594a:	2301      	movs	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	613b      	str	r3, [r7, #16]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800596c:	697b      	ldr	r3, [r7, #20]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000d4c 	.word	0x20000d4c
 800597c:	08006788 	.word	0x08006788
 8005980:	08005aa9 	.word	0x08005aa9
 8005984:	20000d50 	.word	0x20000d50

08005988 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08a      	sub	sp, #40	@ 0x28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005996:	2300      	movs	r3, #0
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	623b      	str	r3, [r7, #32]
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	e7fd      	b.n	80059b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059b8:	4b19      	ldr	r3, [pc, #100]	@ (8005a20 <xTimerGenericCommand+0x98>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02a      	beq.n	8005a16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	dc18      	bgt.n	8005a04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059d2:	f7ff fead 	bl	8005730 <xTaskGetSchedulerState>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d109      	bne.n	80059f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059dc:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <xTimerGenericCommand+0x98>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	f107 0110 	add.w	r1, r7, #16
 80059e4:	2300      	movs	r3, #0
 80059e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e8:	f7fe fc8e 	bl	8004308 <xQueueGenericSend>
 80059ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80059ee:	e012      	b.n	8005a16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <xTimerGenericCommand+0x98>)
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	f107 0110 	add.w	r1, r7, #16
 80059f8:	2300      	movs	r3, #0
 80059fa:	2200      	movs	r2, #0
 80059fc:	f7fe fc84 	bl	8004308 <xQueueGenericSend>
 8005a00:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a02:	e008      	b.n	8005a16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a04:	4b06      	ldr	r3, [pc, #24]	@ (8005a20 <xTimerGenericCommand+0x98>)
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	f107 0110 	add.w	r1, r7, #16
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	f7fe fd7c 	bl	800450c <xQueueGenericSendFromISR>
 8005a14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3728      	adds	r7, #40	@ 0x28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000d4c 	.word	0x20000d4c

08005a24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <prvProcessExpiredTimer+0x80>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe fb2f 	bl	80040a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d123      	bne.n	8005a92 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	18d1      	adds	r1, r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	6978      	ldr	r0, [r7, #20]
 8005a58:	f000 f8cc 	bl	8005bf4 <prvInsertTimerInActiveList>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6978      	ldr	r0, [r7, #20]
 8005a6e:	f7ff ff8b 	bl	8005988 <xTimerGenericCommand>
 8005a72:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60fb      	str	r3, [r7, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	6978      	ldr	r0, [r7, #20]
 8005a98:	4798      	blx	r3
}
 8005a9a:	bf00      	nop
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000d44 	.word	0x20000d44

08005aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ab0:	f107 0308 	add.w	r3, r7, #8
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f859 	bl	8005b6c <prvGetNextExpireTime>
 8005aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f805 	bl	8005ad0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ac6:	f000 f8d7 	bl	8005c78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aca:	bf00      	nop
 8005acc:	e7f0      	b.n	8005ab0 <prvTimerTask+0x8>
	...

08005ad0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ada:	f7ff fa3b 	bl	8004f54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ade:	f107 0308 	add.w	r3, r7, #8
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f866 	bl	8005bb4 <prvSampleTimeNow>
 8005ae8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d130      	bne.n	8005b52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <prvProcessTimerOrBlockTask+0x3c>
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d806      	bhi.n	8005b0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005afe:	f7ff fa37 	bl	8004f70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff ff8d 	bl	8005a24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b0a:	e024      	b.n	8005b56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b12:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <prvProcessTimerOrBlockTask+0x90>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b24:	4b0f      	ldr	r3, [pc, #60]	@ (8005b64 <prvProcessTimerOrBlockTask+0x94>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	4619      	mov	r1, r3
 8005b32:	f7fe ffa1 	bl	8004a78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b36:	f7ff fa1b 	bl	8004f70 <xTaskResumeAll>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <prvProcessTimerOrBlockTask+0x98>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
}
 8005b50:	e001      	b.n	8005b56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b52:	f7ff fa0d 	bl	8004f70 <xTaskResumeAll>
}
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000d48 	.word	0x20000d48
 8005b64:	20000d4c 	.word	0x20000d4c
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b74:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb0 <prvGetNextExpireTime+0x44>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b92:	4b07      	ldr	r3, [pc, #28]	@ (8005bb0 <prvGetNextExpireTime+0x44>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e001      	b.n	8005ba2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000d44 	.word	0x20000d44

08005bb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bbc:	f7ff fa76 	bl	80050ac <xTaskGetTickCount>
 8005bc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <prvSampleTimeNow+0x3c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d205      	bcs.n	8005bd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bcc:	f000 f910 	bl	8005df0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e002      	b.n	8005bde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bde:	4a04      	ldr	r2, [pc, #16]	@ (8005bf0 <prvSampleTimeNow+0x3c>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005be4:	68fb      	ldr	r3, [r7, #12]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000d54 	.word	0x20000d54

08005bf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d812      	bhi.n	8005c40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e01b      	b.n	8005c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c2e:	4b10      	ldr	r3, [pc, #64]	@ (8005c70 <prvInsertTimerInActiveList+0x7c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7fe f9f9 	bl	8004030 <vListInsert>
 8005c3e:	e012      	b.n	8005c66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d206      	bcs.n	8005c56 <prvInsertTimerInActiveList+0x62>
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d302      	bcc.n	8005c56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e007      	b.n	8005c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c56:	4b07      	ldr	r3, [pc, #28]	@ (8005c74 <prvInsertTimerInActiveList+0x80>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f7fe f9e5 	bl	8004030 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c66:	697b      	ldr	r3, [r7, #20]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000d48 	.word	0x20000d48
 8005c74:	20000d44 	.word	0x20000d44

08005c78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08e      	sub	sp, #56	@ 0x38
 8005c7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c7e:	e0a5      	b.n	8005dcc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da19      	bge.n	8005cba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	3304      	adds	r3, #4
 8005c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61fb      	str	r3, [r7, #28]
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb0:	6850      	ldr	r0, [r2, #4]
 8005cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb4:	6892      	ldr	r2, [r2, #8]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f2c0 8085 	blt.w	8005dcc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe f9e4 	bl	80040a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cd8:	463b      	mov	r3, r7
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff ff6a 	bl	8005bb4 <prvSampleTimeNow>
 8005ce0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b09      	cmp	r3, #9
 8005ce6:	d86c      	bhi.n	8005dc2 <prvProcessReceivedCommands+0x14a>
 8005ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <prvProcessReceivedCommands+0x78>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005dc3 	.word	0x08005dc3
 8005d00:	08005d77 	.word	0x08005d77
 8005d04:	08005db1 	.word	0x08005db1
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d19 	.word	0x08005d19
 8005d10:	08005dc3 	.word	0x08005dc3
 8005d14:	08005d77 	.word	0x08005d77
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	18d1      	adds	r1, r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d26:	f7ff ff65 	bl	8005bf4 <prvInsertTimerInActiveList>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d04a      	beq.n	8005dc6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d36:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d142      	bne.n	8005dc6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	441a      	add	r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2100      	movs	r1, #0
 8005d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d52:	f7ff fe19 	bl	8005988 <xTimerGenericCommand>
 8005d56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d133      	bne.n	8005dc6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	61bb      	str	r3, [r7, #24]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	617b      	str	r3, [r7, #20]
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	e7fd      	b.n	8005d98 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	18d1      	adds	r1, r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005daa:	f7ff ff23 	bl	8005bf4 <prvInsertTimerInActiveList>
					break;
 8005dae:	e00d      	b.n	8005dcc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dbc:	f000 fb78 	bl	80064b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005dc0:	e003      	b.n	8005dca <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <prvProcessReceivedCommands+0x154>
					break;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <prvProcessReceivedCommands+0x154>
					break;
 8005dca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dcc:	4b07      	ldr	r3, [pc, #28]	@ (8005dec <prvProcessReceivedCommands+0x174>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	1d39      	adds	r1, r7, #4
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fc35 	bl	8004644 <xQueueReceive>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f af4f 	bne.w	8005c80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	3730      	adds	r7, #48	@ 0x30
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000d4c 	.word	0x20000d4c

08005df0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005df6:	e046      	b.n	8005e86 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005df8:	4b2c      	ldr	r3, [pc, #176]	@ (8005eac <prvSwitchTimerLists+0xbc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e02:	4b2a      	ldr	r3, [pc, #168]	@ (8005eac <prvSwitchTimerLists+0xbc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe f945 	bl	80040a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d12f      	bne.n	8005e86 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d90e      	bls.n	8005e56 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e44:	4b19      	ldr	r3, [pc, #100]	@ (8005eac <prvSwitchTimerLists+0xbc>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f7fe f8ee 	bl	8004030 <vListInsert>
 8005e54:	e017      	b.n	8005e86 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff fd91 	bl	8005988 <xTimerGenericCommand>
 8005e66:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10b      	bne.n	8005e86 <prvSwitchTimerLists+0x96>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	603b      	str	r3, [r7, #0]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e86:	4b09      	ldr	r3, [pc, #36]	@ (8005eac <prvSwitchTimerLists+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1b3      	bne.n	8005df8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <prvSwitchTimerLists+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e96:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <prvSwitchTimerLists+0xc0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a04      	ldr	r2, [pc, #16]	@ (8005eac <prvSwitchTimerLists+0xbc>)
 8005e9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e9e:	4a04      	ldr	r2, [pc, #16]	@ (8005eb0 <prvSwitchTimerLists+0xc0>)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	6013      	str	r3, [r2, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000d44 	.word	0x20000d44
 8005eb0:	20000d48 	.word	0x20000d48

08005eb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eba:	f000 f92f 	bl	800611c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ebe:	4b15      	ldr	r3, [pc, #84]	@ (8005f14 <prvCheckForValidListAndQueue+0x60>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d120      	bne.n	8005f08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ec6:	4814      	ldr	r0, [pc, #80]	@ (8005f18 <prvCheckForValidListAndQueue+0x64>)
 8005ec8:	f7fe f864 	bl	8003f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ecc:	4813      	ldr	r0, [pc, #76]	@ (8005f1c <prvCheckForValidListAndQueue+0x68>)
 8005ece:	f7fe f861 	bl	8003f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ed2:	4b13      	ldr	r3, [pc, #76]	@ (8005f20 <prvCheckForValidListAndQueue+0x6c>)
 8005ed4:	4a10      	ldr	r2, [pc, #64]	@ (8005f18 <prvCheckForValidListAndQueue+0x64>)
 8005ed6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ed8:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <prvCheckForValidListAndQueue+0x70>)
 8005eda:	4a10      	ldr	r2, [pc, #64]	@ (8005f1c <prvCheckForValidListAndQueue+0x68>)
 8005edc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4b11      	ldr	r3, [pc, #68]	@ (8005f28 <prvCheckForValidListAndQueue+0x74>)
 8005ee4:	4a11      	ldr	r2, [pc, #68]	@ (8005f2c <prvCheckForValidListAndQueue+0x78>)
 8005ee6:	2110      	movs	r1, #16
 8005ee8:	200a      	movs	r0, #10
 8005eea:	f7fe f96d 	bl	80041c8 <xQueueGenericCreateStatic>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4a08      	ldr	r2, [pc, #32]	@ (8005f14 <prvCheckForValidListAndQueue+0x60>)
 8005ef2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ef4:	4b07      	ldr	r3, [pc, #28]	@ (8005f14 <prvCheckForValidListAndQueue+0x60>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <prvCheckForValidListAndQueue+0x60>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	490b      	ldr	r1, [pc, #44]	@ (8005f30 <prvCheckForValidListAndQueue+0x7c>)
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe fd90 	bl	8004a28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f08:	f000 f938 	bl	800617c <vPortExitCritical>
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000d4c 	.word	0x20000d4c
 8005f18:	20000d1c 	.word	0x20000d1c
 8005f1c:	20000d30 	.word	0x20000d30
 8005f20:	20000d44 	.word	0x20000d44
 8005f24:	20000d48 	.word	0x20000d48
 8005f28:	20000df8 	.word	0x20000df8
 8005f2c:	20000d58 	.word	0x20000d58
 8005f30:	08006790 	.word	0x08006790

08005f34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3b04      	subs	r3, #4
 8005f44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3b04      	subs	r3, #4
 8005f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3b04      	subs	r3, #4
 8005f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f64:	4a08      	ldr	r2, [pc, #32]	@ (8005f88 <pxPortInitialiseStack+0x54>)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3b14      	subs	r3, #20
 8005f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b20      	subs	r3, #32
 8005f7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	08005f8d 	.word	0x08005f8d

08005f8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f96:	4b12      	ldr	r3, [pc, #72]	@ (8005fe0 <prvTaskExitError+0x54>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d00b      	beq.n	8005fb8 <prvTaskExitError+0x2c>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <prvTaskExitError+0x28>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60bb      	str	r3, [r7, #8]
}
 8005fca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fcc:	bf00      	nop
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0fc      	beq.n	8005fce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr
 8005fe0:	2000000c 	.word	0x2000000c
	...

08005ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <pxCurrentTCBConst2>)
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6808      	ldr	r0, [r1, #0]
 8005ff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ffa:	f380 8809 	msr	PSP, r0
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	f04e 0e0d 	orr.w	lr, lr, #13
 800600e:	4770      	bx	lr

08006010 <pxCurrentTCBConst2>:
 8006010:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006018:	4806      	ldr	r0, [pc, #24]	@ (8006034 <prvPortStartFirstTask+0x1c>)
 800601a:	6800      	ldr	r0, [r0, #0]
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f380 8808 	msr	MSP, r0
 8006022:	b662      	cpsie	i
 8006024:	b661      	cpsie	f
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	df00      	svc	0
 8006030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006032:	bf00      	nop
 8006034:	e000ed08 	.word	0xe000ed08

08006038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800603e:	4b32      	ldr	r3, [pc, #200]	@ (8006108 <xPortStartScheduler+0xd0>)
 8006040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22ff      	movs	r2, #255	@ 0xff
 800604e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b2a      	ldr	r3, [pc, #168]	@ (800610c <xPortStartScheduler+0xd4>)
 8006064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006066:	4b2a      	ldr	r3, [pc, #168]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006068:	2207      	movs	r2, #7
 800606a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606c:	e009      	b.n	8006082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800606e:	4b28      	ldr	r3, [pc, #160]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3b01      	subs	r3, #1
 8006074:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608a:	2b80      	cmp	r3, #128	@ 0x80
 800608c:	d0ef      	beq.n	800606e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800608e:	4b20      	ldr	r3, [pc, #128]	@ (8006110 <xPortStartScheduler+0xd8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1c3 0307 	rsb	r3, r3, #7
 8006096:	2b04      	cmp	r3, #4
 8006098:	d00b      	beq.n	80060b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	60bb      	str	r3, [r7, #8]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060b2:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	4a15      	ldr	r2, [pc, #84]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060c4:	4a12      	ldr	r2, [pc, #72]	@ (8006110 <xPortStartScheduler+0xd8>)
 80060c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060d0:	4b10      	ldr	r3, [pc, #64]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006114 <xPortStartScheduler+0xdc>)
 80060e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060e8:	f000 f8b8 	bl	800625c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006118 <xPortStartScheduler+0xe0>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060f2:	f7ff ff91 	bl	8006018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060f6:	f7ff f8a7 	bl	8005248 <vTaskSwitchContext>
	prvTaskExitError();
 80060fa:	f7ff ff47 	bl	8005f8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000e400 	.word	0xe000e400
 800610c:	20000e48 	.word	0x20000e48
 8006110:	20000e4c 	.word	0x20000e4c
 8006114:	e000ed20 	.word	0xe000ed20
 8006118:	2000000c 	.word	0x2000000c

0800611c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	607b      	str	r3, [r7, #4]
}
 8006134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006136:	4b0f      	ldr	r3, [pc, #60]	@ (8006174 <vPortEnterCritical+0x58>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3301      	adds	r3, #1
 800613c:	4a0d      	ldr	r2, [pc, #52]	@ (8006174 <vPortEnterCritical+0x58>)
 800613e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006140:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <vPortEnterCritical+0x58>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d110      	bne.n	800616a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <vPortEnterCritical+0x5c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <vPortEnterCritical+0x4e>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	603b      	str	r3, [r7, #0]
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	e7fd      	b.n	8006166 <vPortEnterCritical+0x4a>
	}
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	2000000c 	.word	0x2000000c
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006182:	4b12      	ldr	r3, [pc, #72]	@ (80061cc <vPortExitCritical+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <vPortExitCritical+0x26>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	607b      	str	r3, [r7, #4]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061a2:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <vPortExitCritical+0x50>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	4a08      	ldr	r2, [pc, #32]	@ (80061cc <vPortExitCritical+0x50>)
 80061aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061ac:	4b07      	ldr	r3, [pc, #28]	@ (80061cc <vPortExitCritical+0x50>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <vPortExitCritical+0x44>
 80061b4:	2300      	movs	r3, #0
 80061b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f383 8811 	msr	BASEPRI, r3
}
 80061be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	2000000c 	.word	0x2000000c

080061d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061d0:	f3ef 8009 	mrs	r0, PSP
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <pxCurrentTCBConst>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061e0:	6010      	str	r0, [r2, #0]
 80061e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80061e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061ea:	f380 8811 	msr	BASEPRI, r0
 80061ee:	f7ff f82b 	bl	8005248 <vTaskSwitchContext>
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	6808      	ldr	r0, [r1, #0]
 8006202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006206:	f380 8809 	msr	PSP, r0
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	4770      	bx	lr

08006210 <pxCurrentTCBConst>:
 8006210:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006232:	f7fe ff49 	bl	80050c8 <xTaskIncrementTick>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <SysTick_Handler+0x40>)
 800623e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006260:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <vPortSetupTimerInterrupt+0x30>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800626c:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <vPortSetupTimerInterrupt+0x38>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a09      	ldr	r2, [pc, #36]	@ (8006298 <vPortSetupTimerInterrupt+0x3c>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	099b      	lsrs	r3, r3, #6
 8006278:	4a08      	ldr	r2, [pc, #32]	@ (800629c <vPortSetupTimerInterrupt+0x40>)
 800627a:	3b01      	subs	r3, #1
 800627c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800627e:	4b03      	ldr	r3, [pc, #12]	@ (800628c <vPortSetupTimerInterrupt+0x30>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	e000e010 	.word	0xe000e010
 8006290:	e000e018 	.word	0xe000e018
 8006294:	20000000 	.word	0x20000000
 8006298:	10624dd3 	.word	0x10624dd3
 800629c:	e000e014 	.word	0xe000e014

080062a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062a6:	f3ef 8305 	mrs	r3, IPSR
 80062aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d915      	bls.n	80062de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062b2:	4a17      	ldr	r2, [pc, #92]	@ (8006310 <vPortValidateInterruptPriority+0x70>)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062bc:	4b15      	ldr	r3, [pc, #84]	@ (8006314 <vPortValidateInterruptPriority+0x74>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	7afa      	ldrb	r2, [r7, #11]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d20b      	bcs.n	80062de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	607b      	str	r3, [r7, #4]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062de:	4b0e      	ldr	r3, [pc, #56]	@ (8006318 <vPortValidateInterruptPriority+0x78>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <vPortValidateInterruptPriority+0x7c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d90b      	bls.n	8006306 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	603b      	str	r3, [r7, #0]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <vPortValidateInterruptPriority+0x62>
	}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	e000e3f0 	.word	0xe000e3f0
 8006314:	20000e48 	.word	0x20000e48
 8006318:	e000ed0c 	.word	0xe000ed0c
 800631c:	20000e4c 	.word	0x20000e4c

08006320 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	@ 0x28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800632c:	f7fe fe12 	bl	8004f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006330:	4b5a      	ldr	r3, [pc, #360]	@ (800649c <pvPortMalloc+0x17c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006338:	f000 f916 	bl	8006568 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800633c:	4b58      	ldr	r3, [pc, #352]	@ (80064a0 <pvPortMalloc+0x180>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4013      	ands	r3, r2
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 8090 	bne.w	800646a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01e      	beq.n	800638e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006350:	2208      	movs	r2, #8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4413      	add	r3, r2
 8006356:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	2b00      	cmp	r3, #0
 8006360:	d015      	beq.n	800638e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f023 0307 	bic.w	r3, r3, #7
 8006368:	3308      	adds	r3, #8
 800636a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <pvPortMalloc+0x6e>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	617b      	str	r3, [r7, #20]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d06a      	beq.n	800646a <pvPortMalloc+0x14a>
 8006394:	4b43      	ldr	r3, [pc, #268]	@ (80064a4 <pvPortMalloc+0x184>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d865      	bhi.n	800646a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800639e:	4b42      	ldr	r3, [pc, #264]	@ (80064a8 <pvPortMalloc+0x188>)
 80063a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063a2:	4b41      	ldr	r3, [pc, #260]	@ (80064a8 <pvPortMalloc+0x188>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063a8:	e004      	b.n	80063b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d903      	bls.n	80063c6 <pvPortMalloc+0xa6>
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f1      	bne.n	80063aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063c6:	4b35      	ldr	r3, [pc, #212]	@ (800649c <pvPortMalloc+0x17c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d04c      	beq.n	800646a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2208      	movs	r2, #8
 80063d6:	4413      	add	r3, r2
 80063d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	2308      	movs	r3, #8
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d920      	bls.n	8006434 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <pvPortMalloc+0xfc>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	613b      	str	r3, [r7, #16]
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800642e:	69b8      	ldr	r0, [r7, #24]
 8006430:	f000 f8fc 	bl	800662c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006434:	4b1b      	ldr	r3, [pc, #108]	@ (80064a4 <pvPortMalloc+0x184>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	4a19      	ldr	r2, [pc, #100]	@ (80064a4 <pvPortMalloc+0x184>)
 8006440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006442:	4b18      	ldr	r3, [pc, #96]	@ (80064a4 <pvPortMalloc+0x184>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b19      	ldr	r3, [pc, #100]	@ (80064ac <pvPortMalloc+0x18c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d203      	bcs.n	8006456 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <pvPortMalloc+0x184>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a16      	ldr	r2, [pc, #88]	@ (80064ac <pvPortMalloc+0x18c>)
 8006454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4b11      	ldr	r3, [pc, #68]	@ (80064a0 <pvPortMalloc+0x180>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	431a      	orrs	r2, r3
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800646a:	f7fe fd81 	bl	8004f70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00b      	beq.n	8006490 <pvPortMalloc+0x170>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	bf00      	nop
 800648e:	e7fd      	b.n	800648c <pvPortMalloc+0x16c>
	return pvReturn;
 8006490:	69fb      	ldr	r3, [r7, #28]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3728      	adds	r7, #40	@ 0x28
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20001a58 	.word	0x20001a58
 80064a0:	20001a64 	.word	0x20001a64
 80064a4:	20001a5c 	.word	0x20001a5c
 80064a8:	20001a50 	.word	0x20001a50
 80064ac:	20001a60 	.word	0x20001a60

080064b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d04a      	beq.n	8006558 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064c2:	2308      	movs	r3, #8
 80064c4:	425b      	negs	r3, r3
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4413      	add	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	4b22      	ldr	r3, [pc, #136]	@ (8006560 <vPortFree+0xb0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <vPortFree+0x46>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	60fb      	str	r3, [r7, #12]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <vPortFree+0x66>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60bb      	str	r3, [r7, #8]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	4b11      	ldr	r3, [pc, #68]	@ (8006560 <vPortFree+0xb0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d019      	beq.n	8006558 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d115      	bne.n	8006558 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <vPortFree+0xb0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	43db      	mvns	r3, r3
 8006536:	401a      	ands	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800653c:	f7fe fd0a 	bl	8004f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	4b07      	ldr	r3, [pc, #28]	@ (8006564 <vPortFree+0xb4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4413      	add	r3, r2
 800654a:	4a06      	ldr	r2, [pc, #24]	@ (8006564 <vPortFree+0xb4>)
 800654c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800654e:	6938      	ldr	r0, [r7, #16]
 8006550:	f000 f86c 	bl	800662c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006554:	f7fe fd0c 	bl	8004f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006558:	bf00      	nop
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20001a64 	.word	0x20001a64
 8006564:	20001a5c 	.word	0x20001a5c

08006568 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800656e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006572:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006574:	4b27      	ldr	r3, [pc, #156]	@ (8006614 <prvHeapInit+0xac>)
 8006576:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3307      	adds	r3, #7
 8006586:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	4a1f      	ldr	r2, [pc, #124]	@ (8006614 <prvHeapInit+0xac>)
 8006598:	4413      	add	r3, r2
 800659a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006618 <prvHeapInit+0xb0>)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006618 <prvHeapInit+0xb0>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4413      	add	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065b4:	2208      	movs	r2, #8
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4a15      	ldr	r2, [pc, #84]	@ (800661c <prvHeapInit+0xb4>)
 80065c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065ca:	4b14      	ldr	r3, [pc, #80]	@ (800661c <prvHeapInit+0xb4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2200      	movs	r2, #0
 80065d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065d2:	4b12      	ldr	r3, [pc, #72]	@ (800661c <prvHeapInit+0xb4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	1ad2      	subs	r2, r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065e8:	4b0c      	ldr	r3, [pc, #48]	@ (800661c <prvHeapInit+0xb4>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006620 <prvHeapInit+0xb8>)
 80065f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4a09      	ldr	r2, [pc, #36]	@ (8006624 <prvHeapInit+0xbc>)
 80065fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006600:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <prvHeapInit+0xc0>)
 8006602:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006606:	601a      	str	r2, [r3, #0]
}
 8006608:	bf00      	nop
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20000e50 	.word	0x20000e50
 8006618:	20001a50 	.word	0x20001a50
 800661c:	20001a58 	.word	0x20001a58
 8006620:	20001a60 	.word	0x20001a60
 8006624:	20001a5c 	.word	0x20001a5c
 8006628:	20001a64 	.word	0x20001a64

0800662c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006634:	4b27      	ldr	r3, [pc, #156]	@ (80066d4 <prvInsertBlockIntoFreeList+0xa8>)
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e002      	b.n	8006640 <prvInsertBlockIntoFreeList+0x14>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d8f7      	bhi.n	800663a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4413      	add	r3, r2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	429a      	cmp	r2, r3
 800665a:	d108      	bne.n	800666e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	441a      	add	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d118      	bne.n	80066b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b14      	ldr	r3, [pc, #80]	@ (80066d8 <prvInsertBlockIntoFreeList+0xac>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d00d      	beq.n	80066aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	441a      	add	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e008      	b.n	80066bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066aa:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <prvInsertBlockIntoFreeList+0xac>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e003      	b.n	80066bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d002      	beq.n	80066ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr
 80066d4:	20001a50 	.word	0x20001a50
 80066d8:	20001a58 	.word	0x20001a58

080066dc <memset>:
 80066dc:	4603      	mov	r3, r0
 80066de:	4402      	add	r2, r0
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d100      	bne.n	80066e6 <memset+0xa>
 80066e4:	4770      	bx	lr
 80066e6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ea:	e7f9      	b.n	80066e0 <memset+0x4>

080066ec <__libc_init_array>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	2600      	movs	r6, #0
 80066f0:	4d0c      	ldr	r5, [pc, #48]	@ (8006724 <__libc_init_array+0x38>)
 80066f2:	4c0d      	ldr	r4, [pc, #52]	@ (8006728 <__libc_init_array+0x3c>)
 80066f4:	1b64      	subs	r4, r4, r5
 80066f6:	10a4      	asrs	r4, r4, #2
 80066f8:	42a6      	cmp	r6, r4
 80066fa:	d109      	bne.n	8006710 <__libc_init_array+0x24>
 80066fc:	f000 f828 	bl	8006750 <_init>
 8006700:	2600      	movs	r6, #0
 8006702:	4d0a      	ldr	r5, [pc, #40]	@ (800672c <__libc_init_array+0x40>)
 8006704:	4c0a      	ldr	r4, [pc, #40]	@ (8006730 <__libc_init_array+0x44>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	42a6      	cmp	r6, r4
 800670c:	d105      	bne.n	800671a <__libc_init_array+0x2e>
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	f855 3b04 	ldr.w	r3, [r5], #4
 8006714:	4798      	blx	r3
 8006716:	3601      	adds	r6, #1
 8006718:	e7ee      	b.n	80066f8 <__libc_init_array+0xc>
 800671a:	f855 3b04 	ldr.w	r3, [r5], #4
 800671e:	4798      	blx	r3
 8006720:	3601      	adds	r6, #1
 8006722:	e7f2      	b.n	800670a <__libc_init_array+0x1e>
 8006724:	0800680c 	.word	0x0800680c
 8006728:	0800680c 	.word	0x0800680c
 800672c:	0800680c 	.word	0x0800680c
 8006730:	08006810 	.word	0x08006810

08006734 <memcpy>:
 8006734:	440a      	add	r2, r1
 8006736:	4291      	cmp	r1, r2
 8006738:	f100 33ff 	add.w	r3, r0, #4294967295
 800673c:	d100      	bne.n	8006740 <memcpy+0xc>
 800673e:	4770      	bx	lr
 8006740:	b510      	push	{r4, lr}
 8006742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006746:	4291      	cmp	r1, r2
 8006748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800674c:	d1f9      	bne.n	8006742 <memcpy+0xe>
 800674e:	bd10      	pop	{r4, pc}

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
