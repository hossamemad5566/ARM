
HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003adc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003c40  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003c40  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3ef  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d02  00000000  00000000  00011424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00013128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000972  00000000  00000000  00013d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e86  00000000  00000000  000146a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da17  00000000  00000000  0002b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086918  00000000  00000000  00038f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  000bf89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c2bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003bd4 	.word	0x08003bd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003bd4 	.word	0x08003bd4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <delay>:
#include "main.h"

extern TIM_HandleTypeDef htim1;

void delay (uint16_t time)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <delay+0x2c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 800093e:	bf00      	nop
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <delay+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	429a      	cmp	r2, r3
 800094a:	d3f9      	bcc.n	8000940 <delay+0x14>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000038 	.word	0x20000038
 800095c:	00000000 	.word	0x00000000

08000960 <HAL_TIM_IC_CaptureCallback>:


// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	
	if (   (htim == &htim1)  && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a98 <HAL_TIM_IC_CaptureCallback+0x138>)
 800096c:	4293      	cmp	r3, r2
 800096e:	f040 8088 	bne.w	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f1b      	ldrb	r3, [r3, #28]
 8000976:	2b01      	cmp	r3, #1
 8000978:	f040 8083 	bne.w	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
	{
		if (HCSR04_sensor[0].Is_First_Captured==0) // if the first value is not captured
 800097c:	4b47      	ldr	r3, [pc, #284]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800097e:	7b1b      	ldrb	r3, [r3, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d11a      	bne.n	80009ba <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			HCSR04_sensor[0].IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000984:	2100      	movs	r1, #0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f001 ffd2 	bl	8002930 <HAL_TIM_ReadCapturedValue>
 800098c:	4603      	mov	r3, r0
 800098e:	4a43      	ldr	r2, [pc, #268]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000990:	6013      	str	r3, [r2, #0]
			HCSR04_sensor[0].Is_First_Captured = 1;  // set the first captured as true
 8000992:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000994:	2201      	movs	r2, #1
 8000996:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6a1a      	ldr	r2, [r3, #32]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 020a 	bic.w	r2, r2, #10
 80009a6:	621a      	str	r2, [r3, #32]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6a1a      	ldr	r2, [r3, #32]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0202 	orr.w	r2, r2, #2
 80009b6:	621a      	str	r2, [r3, #32]
	// 		// set polarity to rising edge
	// 		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
	// 		__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
	// 	}
	// }
}
 80009b8:	e063      	b.n	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
		else if (HCSR04_sensor[0].Is_First_Captured==1)   // if the first is already captured
 80009ba:	4b38      	ldr	r3, [pc, #224]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009bc:	7b1b      	ldrb	r3, [r3, #12]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d15f      	bne.n	8000a82 <HAL_TIM_IC_CaptureCallback+0x122>
			HCSR04_sensor[0].IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80009c2:	2100      	movs	r1, #0
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f001 ffb3 	bl	8002930 <HAL_TIM_ReadCapturedValue>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a33      	ldr	r2, [pc, #204]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009ce:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
			if (HCSR04_sensor[0].IC_Val2 > HCSR04_sensor[0].IC_Val1)
 80009d8:	4b30      	ldr	r3, [pc, #192]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d907      	bls.n	80009f4 <HAL_TIM_IC_CaptureCallback+0x94>
				HCSR04_sensor[0].Difference = HCSR04_sensor[0].IC_Val2-HCSR04_sensor[0].IC_Val1;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	4a2b      	ldr	r2, [pc, #172]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009f0:	6093      	str	r3, [r2, #8]
 80009f2:	e00f      	b.n	8000a14 <HAL_TIM_IC_CaptureCallback+0xb4>
			else if (HCSR04_sensor[0].IC_Val1 > HCSR04_sensor[0].IC_Val2)
 80009f4:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d909      	bls.n	8000a14 <HAL_TIM_IC_CaptureCallback+0xb4>
				HCSR04_sensor[0].Difference = (0xffff - HCSR04_sensor[0].IC_Val1) + HCSR04_sensor[0].IC_Val2;
 8000a00:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a0e:	33ff      	adds	r3, #255	@ 0xff
 8000a10:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a12:	6093      	str	r3, [r2, #8]
			HCSR04_sensor[0].Distance = HCSR04_sensor[0].Difference * .034/2;
 8000a14:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fcdb 	bl	80003d4 <__aeabi_ui2d>
 8000a1e:	a31c      	add	r3, pc, #112	@ (adr r3, 8000a90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a24:	f7ff fd50 	bl	80004c8 <__aeabi_dmul>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a38:	f7ff fe70 	bl	800071c <__aeabi_ddiv>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	460b      	mov	r3, r1
 8000a40:	4610      	mov	r0, r2
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff ff52 	bl	80008ec <__aeabi_d2uiz>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a4e:	735a      	strb	r2, [r3, #13]
			HCSR04_sensor[0].Is_First_Captured = 0; // set it back to false
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6a1a      	ldr	r2, [r3, #32]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 020a 	bic.w	r2, r2, #10
 8000a64:	621a      	str	r2, [r3, #32]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6a12      	ldr	r2, [r2, #32]
 8000a70:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0202 	bic.w	r2, r2, #2
 8000a80:	60da      	str	r2, [r3, #12]
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	f3af 8000 	nop.w
 8000a90:	b020c49c 	.word	0xb020c49c
 8000a94:	3fa16872 	.word	0x3fa16872
 8000a98:	20000038 	.word	0x20000038
 8000a9c:	20000028 	.word	0x20000028

08000aa0 <HCSR04_Init>:
void HCSR04_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <HCSR04_Init+0x10>)
 8000aa8:	f001 fbca 	bl	8002240 <HAL_TIM_IC_Start_IT>
	// HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
	// HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
	// HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000038 	.word	0x20000038

08000ab4 <HCSR04_Read1>:

void HCSR04_Read1 (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000abe:	480b      	ldr	r0, [pc, #44]	@ (8000aec <HCSR04_Read1+0x38>)
 8000ac0:	f000 feee 	bl	80018a0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f7ff ff31 	bl	800092c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad0:	4806      	ldr	r0, [pc, #24]	@ (8000aec <HCSR04_Read1+0x38>)
 8000ad2:	f000 fee5 	bl	80018a0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HCSR04_Read1+0x3c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <HCSR04_Read1+0x3c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f042 0202 	orr.w	r2, r2, #2
 8000ae4:	60da      	str	r2, [r3, #12]
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	20000038 	.word	0x20000038

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fb07 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f845 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f000 f947 	bl	8000d94 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b06:	f000 f887 	bl	8000c18 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b0a:	f000 f919 	bl	8000d40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HCSR04_Init();
 8000b0e:	f7ff ffc7 	bl	8000aa0 <HCSR04_Init>
  /* USER CODE END 2 */
  uint8_t tx_buffer[20] = "Welcome to USB";
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <main+0x84>)
 8000b14:	1d3c      	adds	r4, r7, #4
 8000b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b18:	c407      	stmia	r4!, {r0, r1, r2}
 8000b1a:	8023      	strh	r3, [r4, #0]
 8000b1c:	3402      	adds	r4, #2
 8000b1e:	0c1b      	lsrs	r3, r3, #16
 8000b20:	7023      	strb	r3, [r4, #0]
 8000b22:	f107 0313 	add.w	r3, r7, #19
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,tx_buffer,20,HAL_MAX_DELAY);
 8000b2c:	1d39      	adds	r1, r7, #4
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	2214      	movs	r2, #20
 8000b34:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <main+0x88>)
 8000b36:	f002 fa4d 	bl	8002fd4 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HCSR04_Read1();
 8000b3a:	f7ff ffbb 	bl	8000ab4 <HCSR04_Read1>
		HAL_Delay(500);
 8000b3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b42:	f000 fb45 	bl	80011d0 <HAL_Delay>
    HAL_UART_Transmit(&huart1,&(HCSR04_sensor[0].Distance),1,10);
 8000b46:	230a      	movs	r3, #10
 8000b48:	2201      	movs	r2, #1
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <main+0x8c>)
 8000b4c:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <main+0x88>)
 8000b4e:	f002 fa41 	bl	8002fd4 <HAL_UART_Transmit>
		if (HCSR04_sensor[0].Distance > 5)
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <main+0x90>)
 8000b54:	7b5b      	ldrb	r3, [r3, #13]
 8000b56:	2b05      	cmp	r3, #5
 8000b58:	d906      	bls.n	8000b68 <main+0x74>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b60:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <main+0x94>)
 8000b62:	f000 fe9d 	bl	80018a0 <HAL_GPIO_WritePin>
 8000b66:	e7e8      	b.n	8000b3a <main+0x46>
		}
		else
		{
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b6e:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <main+0x94>)
 8000b70:	f000 fe96 	bl	80018a0 <HAL_GPIO_WritePin>
		HCSR04_Read1();
 8000b74:	e7e1      	b.n	8000b3a <main+0x46>
 8000b76:	bf00      	nop
 8000b78:	08003bec 	.word	0x08003bec
 8000b7c:	20000080 	.word	0x20000080
 8000b80:	20000035 	.word	0x20000035
 8000b84:	20000028 	.word	0x20000028
 8000b88:	40011000 	.word	0x40011000

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b090      	sub	sp, #64	@ 0x40
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	2228      	movs	r2, #40	@ 0x28
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 ffee 	bl	8003b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fe7b 	bl	80018d0 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000be0:	f000 f946 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	230f      	movs	r3, #15
 8000be6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f8e8 	bl	8001dd4 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c0a:	f000 f931 	bl	8000e70 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3740      	adds	r7, #64	@ 0x40
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c42:	4b3d      	ldr	r3, [pc, #244]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c44:	4a3d      	ldr	r2, [pc, #244]	@ (8000d3c <MX_TIM1_Init+0x124>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000c48:	4b3b      	ldr	r3, [pc, #236]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c4a:	2247      	movs	r2, #71	@ 0x47
 8000c4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c54:	4b38      	ldr	r3, [pc, #224]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b36      	ldr	r3, [pc, #216]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c62:	4b35      	ldr	r3, [pc, #212]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c6e:	4832      	ldr	r0, [pc, #200]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c70:	f001 fa3e 	bl	80020f0 <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000c7a:	f000 f8f9 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	482b      	ldr	r0, [pc, #172]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c8c:	f001 fd88 	bl	80027a0 <HAL_TIM_ConfigClockSource>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c96:	f000 f8eb 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c9a:	4827      	ldr	r0, [pc, #156]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000c9c:	f001 fa77 	bl	800218e <HAL_TIM_IC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000ca6:	f000 f8e3 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481f      	ldr	r0, [pc, #124]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000cba:	f002 f8cb 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000cc4:	f000 f8d4 	bl	8000e70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4816      	ldr	r0, [pc, #88]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000ce0:	f001 fcc2 	bl	8002668 <HAL_TIM_IC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000cea:	f000 f8c1 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000cf6:	f001 fcb7 	bl	8002668 <HAL_TIM_IC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000d00:	f000 f8b6 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	2208      	movs	r2, #8
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000d0c:	f001 fcac 	bl	8002668 <HAL_TIM_IC_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000d16:	f000 f8ab 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_TIM1_Init+0x120>)
 8000d22:	f001 fca1 	bl	8002668 <HAL_TIM_IC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000d2c:	f000 f8a0 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000038 	.word	0x20000038
 8000d3c:	40012c00 	.word	0x40012c00

08000d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <MX_USART1_UART_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d78:	f002 f8dc 	bl	8002f34 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d82:	f000 f875 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000080 	.word	0x20000080
 8000d90:	40013800 	.word	0x40013800

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a2d      	ldr	r2, [pc, #180]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc0:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000dc6:	f043 0320 	orr.w	r3, r3, #32
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <MX_GPIO_Init+0xd0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0e:	4816      	ldr	r0, [pc, #88]	@ (8000e68 <MX_GPIO_Init+0xd4>)
 8000e10:	f000 fd46 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5174 	mov.w	r1, #15616	@ 0x3d00
 8000e1a:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <MX_GPIO_Init+0xd8>)
 8000e1c:	f000 fd40 	bl	80018a0 <HAL_GPIO_WritePin>
                          |LED_O_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <MX_GPIO_Init+0xd4>)
 8000e3a:	f000 fbad 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           LED_O_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000e3e:	f44f 5374 	mov.w	r3, #15616	@ 0x3d00
 8000e42:	613b      	str	r3, [r7, #16]
                          |LED_O_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <MX_GPIO_Init+0xd8>)
 8000e58:	f000 fb9e 	bl	8001598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_MspInit+0x5c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <HAL_MspInit+0x5c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_MspInit+0x5c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed8 <HAL_MspInit+0x5c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_MspInit+0x60>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <HAL_MspInit+0x60>)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1a      	ldr	r2, [pc, #104]	@ (8000f64 <HAL_TIM_Base_MspInit+0x84>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d12c      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_TIM_Base_MspInit+0x88>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <HAL_TIM_Base_MspInit+0x88>)
 8000f06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_TIM_Base_MspInit+0x88>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <HAL_TIM_Base_MspInit+0x88>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <HAL_TIM_Base_MspInit+0x88>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <HAL_TIM_Base_MspInit+0x88>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f30:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4619      	mov	r1, r3
 8000f44:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <HAL_TIM_Base_MspInit+0x8c>)
 8000f46:	f000 fb27 	bl	8001598 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201b      	movs	r0, #27
 8000f50:	f000 fa39 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f54:	201b      	movs	r0, #27
 8000f56:	f000 fa52 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010800 	.word	0x40010800

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a26      	ldr	r2, [pc, #152]	@ (8001024 <HAL_UART_MspInit+0xb4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d145      	bne.n	800101c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <HAL_UART_MspInit+0xb8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a24      	ldr	r2, [pc, #144]	@ (8001028 <HAL_UART_MspInit+0xb8>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <HAL_UART_MspInit+0xb8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <HAL_UART_MspInit+0xb8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a1e      	ldr	r2, [pc, #120]	@ (8001028 <HAL_UART_MspInit+0xb8>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <HAL_UART_MspInit+0xb8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc0:	2340      	movs	r3, #64	@ 0x40
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4816      	ldr	r0, [pc, #88]	@ (800102c <HAL_UART_MspInit+0xbc>)
 8000fd4:	f000 fae0 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <HAL_UART_MspInit+0xbc>)
 8000fec:	f000 fad4 	bl	8001598 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <HAL_UART_MspInit+0xc0>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_UART_MspInit+0xc0>)
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	2025      	movs	r0, #37	@ 0x25
 8001012:	f000 f9d8 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001016:	2025      	movs	r0, #37	@ 0x25
 8001018:	f000 f9f1 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40013800 	.word	0x40013800
 8001028:	40021000 	.word	0x40021000
 800102c:	40010c00 	.word	0x40010c00
 8001030:	40010000 	.word	0x40010000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f888 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <TIM1_CC_IRQHandler+0x10>)
 8001092:	f001 f9e1 	bl	8002458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000038 	.word	0x20000038

080010a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <USART1_IRQHandler+0x10>)
 80010a6:	f002 f819 	bl	80030dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000080 	.word	0x20000080

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff fff8 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c6:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010dc:	4c09      	ldr	r4, [pc, #36]	@ (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f002 fd4f 	bl	8003b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fd01 	bl	8000af4 <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010fc:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8001100:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001104:	200000cc 	.word	0x200000cc

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f947 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fea8 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f95f 	bl	800141a <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f927 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	@ (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000008 	.word	0x20000008
 80011b8:	200000c8 	.word	0x200000c8

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	@ (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200000c8 	.word	0x200000c8

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff fff0 	bl	80011bc <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffe0 	bl	80011bc <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	@ (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <__NVIC_EnableIRQ+0x34>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	@ (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	@ (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff90 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff2d 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff42 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff90 	bl	8001308 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5f 	bl	80012b4 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff35 	bl	800127c <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d008      	beq.n	800145c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2204      	movs	r2, #4
 800144e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e020      	b.n	800149e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 020e 	bic.w	r2, r2, #14
 800146a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d005      	beq.n	80014cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2204      	movs	r2, #4
 80014c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e051      	b.n	8001570 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020e 	bic.w	r2, r2, #14
 80014da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a22      	ldr	r2, [pc, #136]	@ (800157c <HAL_DMA_Abort_IT+0xd4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d029      	beq.n	800154a <HAL_DMA_Abort_IT+0xa2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <HAL_DMA_Abort_IT+0xd8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d022      	beq.n	8001546 <HAL_DMA_Abort_IT+0x9e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <HAL_DMA_Abort_IT+0xdc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d01a      	beq.n	8001540 <HAL_DMA_Abort_IT+0x98>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1e      	ldr	r2, [pc, #120]	@ (8001588 <HAL_DMA_Abort_IT+0xe0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d012      	beq.n	800153a <HAL_DMA_Abort_IT+0x92>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1c      	ldr	r2, [pc, #112]	@ (800158c <HAL_DMA_Abort_IT+0xe4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00a      	beq.n	8001534 <HAL_DMA_Abort_IT+0x8c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <HAL_DMA_Abort_IT+0xe8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d102      	bne.n	800152e <HAL_DMA_Abort_IT+0x86>
 8001528:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800152c:	e00e      	b.n	800154c <HAL_DMA_Abort_IT+0xa4>
 800152e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001532:	e00b      	b.n	800154c <HAL_DMA_Abort_IT+0xa4>
 8001534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001538:	e008      	b.n	800154c <HAL_DMA_Abort_IT+0xa4>
 800153a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153e:	e005      	b.n	800154c <HAL_DMA_Abort_IT+0xa4>
 8001540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001544:	e002      	b.n	800154c <HAL_DMA_Abort_IT+0xa4>
 8001546:	2310      	movs	r3, #16
 8001548:	e000      	b.n	800154c <HAL_DMA_Abort_IT+0xa4>
 800154a:	2301      	movs	r3, #1
 800154c:	4a11      	ldr	r2, [pc, #68]	@ (8001594 <HAL_DMA_Abort_IT+0xec>)
 800154e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
    } 
  }
  return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020008 	.word	0x40020008
 8001580:	4002001c 	.word	0x4002001c
 8001584:	40020030 	.word	0x40020030
 8001588:	40020044 	.word	0x40020044
 800158c:	40020058 	.word	0x40020058
 8001590:	4002006c 	.word	0x4002006c
 8001594:	40020000 	.word	0x40020000

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b08b      	sub	sp, #44	@ 0x2c
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e169      	b.n	8001880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015ac:	2201      	movs	r2, #1
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8158 	bne.w	800187a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a9a      	ldr	r2, [pc, #616]	@ (8001838 <HAL_GPIO_Init+0x2a0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d05e      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015d4:	4a98      	ldr	r2, [pc, #608]	@ (8001838 <HAL_GPIO_Init+0x2a0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d875      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015da:	4a98      	ldr	r2, [pc, #608]	@ (800183c <HAL_GPIO_Init+0x2a4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d058      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015e0:	4a96      	ldr	r2, [pc, #600]	@ (800183c <HAL_GPIO_Init+0x2a4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d86f      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015e6:	4a96      	ldr	r2, [pc, #600]	@ (8001840 <HAL_GPIO_Init+0x2a8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d052      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015ec:	4a94      	ldr	r2, [pc, #592]	@ (8001840 <HAL_GPIO_Init+0x2a8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d869      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015f2:	4a94      	ldr	r2, [pc, #592]	@ (8001844 <HAL_GPIO_Init+0x2ac>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d04c      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015f8:	4a92      	ldr	r2, [pc, #584]	@ (8001844 <HAL_GPIO_Init+0x2ac>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d863      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015fe:	4a92      	ldr	r2, [pc, #584]	@ (8001848 <HAL_GPIO_Init+0x2b0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d046      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 8001604:	4a90      	ldr	r2, [pc, #576]	@ (8001848 <HAL_GPIO_Init+0x2b0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d85d      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d82a      	bhi.n	8001664 <HAL_GPIO_Init+0xcc>
 800160e:	2b12      	cmp	r3, #18
 8001610:	d859      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 8001612:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <HAL_GPIO_Init+0x80>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001693 	.word	0x08001693
 800161c:	0800166d 	.word	0x0800166d
 8001620:	0800167f 	.word	0x0800167f
 8001624:	080016c1 	.word	0x080016c1
 8001628:	080016c7 	.word	0x080016c7
 800162c:	080016c7 	.word	0x080016c7
 8001630:	080016c7 	.word	0x080016c7
 8001634:	080016c7 	.word	0x080016c7
 8001638:	080016c7 	.word	0x080016c7
 800163c:	080016c7 	.word	0x080016c7
 8001640:	080016c7 	.word	0x080016c7
 8001644:	080016c7 	.word	0x080016c7
 8001648:	080016c7 	.word	0x080016c7
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016c7 	.word	0x080016c7
 8001654:	080016c7 	.word	0x080016c7
 8001658:	080016c7 	.word	0x080016c7
 800165c:	08001675 	.word	0x08001675
 8001660:	08001689 	.word	0x08001689
 8001664:	4a79      	ldr	r2, [pc, #484]	@ (800184c <HAL_GPIO_Init+0x2b4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800166a:	e02c      	b.n	80016c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e029      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	3304      	adds	r3, #4
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e024      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	3308      	adds	r3, #8
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e01f      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	330c      	adds	r3, #12
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e01a      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800169a:	2304      	movs	r3, #4
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e013      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a8:	2308      	movs	r3, #8
 80016aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	611a      	str	r2, [r3, #16]
          break;
 80016b2:	e009      	b.n	80016c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	615a      	str	r2, [r3, #20]
          break;
 80016be:	e003      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          break;
 80016c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2bff      	cmp	r3, #255	@ 0xff
 80016cc:	d801      	bhi.n	80016d2 <HAL_GPIO_Init+0x13a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_Init+0x13e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2bff      	cmp	r3, #255	@ 0xff
 80016dc:	d802      	bhi.n	80016e4 <HAL_GPIO_Init+0x14c>
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0x152>
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	3b08      	subs	r3, #8
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	210f      	movs	r1, #15
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	6a39      	ldr	r1, [r7, #32]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	431a      	orrs	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80b1 	beq.w	800187a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001718:	4b4d      	ldr	r3, [pc, #308]	@ (8001850 <HAL_GPIO_Init+0x2b8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a4c      	ldr	r2, [pc, #304]	@ (8001850 <HAL_GPIO_Init+0x2b8>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b4a      	ldr	r3, [pc, #296]	@ (8001850 <HAL_GPIO_Init+0x2b8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001730:	4a48      	ldr	r2, [pc, #288]	@ (8001854 <HAL_GPIO_Init+0x2bc>)
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a40      	ldr	r2, [pc, #256]	@ (8001858 <HAL_GPIO_Init+0x2c0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d013      	beq.n	8001784 <HAL_GPIO_Init+0x1ec>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a3f      	ldr	r2, [pc, #252]	@ (800185c <HAL_GPIO_Init+0x2c4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00d      	beq.n	8001780 <HAL_GPIO_Init+0x1e8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a3e      	ldr	r2, [pc, #248]	@ (8001860 <HAL_GPIO_Init+0x2c8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d007      	beq.n	800177c <HAL_GPIO_Init+0x1e4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3d      	ldr	r2, [pc, #244]	@ (8001864 <HAL_GPIO_Init+0x2cc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_GPIO_Init+0x1e0>
 8001774:	2303      	movs	r3, #3
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001778:	2304      	movs	r3, #4
 800177a:	e004      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 800177c:	2302      	movs	r3, #2
 800177e:	e002      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001784:	2300      	movs	r3, #0
 8001786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001788:	f002 0203 	and.w	r2, r2, #3
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	4093      	lsls	r3, r2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001796:	492f      	ldr	r1, [pc, #188]	@ (8001854 <HAL_GPIO_Init+0x2bc>)
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	492c      	ldr	r1, [pc, #176]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017be:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4928      	ldr	r1, [pc, #160]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d8:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	4922      	ldr	r1, [pc, #136]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	491e      	ldr	r1, [pc, #120]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001800:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4918      	ldr	r1, [pc, #96]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	4914      	ldr	r1, [pc, #80]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d021      	beq.n	800186c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001828:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	490e      	ldr	r1, [pc, #56]	@ (8001868 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e021      	b.n	800187a <HAL_GPIO_Init+0x2e2>
 8001836:	bf00      	nop
 8001838:	10320000 	.word	0x10320000
 800183c:	10310000 	.word	0x10310000
 8001840:	10220000 	.word	0x10220000
 8001844:	10210000 	.word	0x10210000
 8001848:	10120000 	.word	0x10120000
 800184c:	10110000 	.word	0x10110000
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	40010800 	.word	0x40010800
 800185c:	40010c00 	.word	0x40010c00
 8001860:	40011000 	.word	0x40011000
 8001864:	40011400 	.word	0x40011400
 8001868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_GPIO_Init+0x304>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	43db      	mvns	r3, r3
 8001874:	4909      	ldr	r1, [pc, #36]	@ (800189c <HAL_GPIO_Init+0x304>)
 8001876:	4013      	ands	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f ae8e 	bne.w	80015ac <HAL_GPIO_Init+0x14>
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	372c      	adds	r7, #44	@ 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e272      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f0:	4b92      	ldr	r3, [pc, #584]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d00c      	beq.n	8001916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fc:	4b8f      	ldr	r3, [pc, #572]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d112      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
 8001908:	4b8c      	ldr	r3, [pc, #560]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001914:	d10b      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	4b89      	ldr	r3, [pc, #548]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d06c      	beq.n	80019fc <HAL_RCC_OscConfig+0x12c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d168      	bne.n	80019fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e24c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x76>
 8001938:	4b80      	ldr	r3, [pc, #512]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e02e      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x98>
 800194e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7a      	ldr	r2, [pc, #488]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b78      	ldr	r3, [pc, #480]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a77      	ldr	r2, [pc, #476]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e01d      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0xbc>
 8001972:	4b72      	ldr	r3, [pc, #456]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a71      	ldr	r2, [pc, #452]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6e      	ldr	r2, [pc, #440]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 800198c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a6a      	ldr	r2, [pc, #424]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b68      	ldr	r3, [pc, #416]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a67      	ldr	r2, [pc, #412]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fc06 	bl	80011bc <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fc02 	bl	80011bc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	@ 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e200      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe4>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fbf2 	bl	80011bc <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fbee 	bl	80011bc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	@ 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1ec      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	4b53      	ldr	r3, [pc, #332]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x10c>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a16:	4b49      	ldr	r3, [pc, #292]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
 8001a22:	4b46      	ldr	r3, [pc, #280]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d116      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	4b43      	ldr	r3, [pc, #268]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1c0      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4939      	ldr	r1, [pc, #228]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	e03a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a64:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fba7 	bl	80011bc <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff fba3 	bl	80011bc <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1a1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	4b2d      	ldr	r3, [pc, #180]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a90:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4927      	ldr	r1, [pc, #156]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa6:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fb86 	bl	80011bc <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fb82 	bl	80011bc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e180      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d03a      	beq.n	8001b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d019      	beq.n	8001b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae6:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fb66 	bl	80011bc <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff fb62 	bl	80011bc <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e160      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 face 	bl	80020b4 <RCC_Delay>
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fb4c 	bl	80011bc <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b26:	e00f      	b.n	8001b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fb48 	bl	80011bc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d908      	bls.n	8001b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e146      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	42420000 	.word	0x42420000
 8001b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b92      	ldr	r3, [pc, #584]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e9      	bne.n	8001b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a6 	beq.w	8001cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b8b      	ldr	r3, [pc, #556]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b88      	ldr	r3, [pc, #544]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a87      	ldr	r2, [pc, #540]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b85      	ldr	r3, [pc, #532]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b82      	ldr	r3, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb09 	bl	80011bc <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff fb05 	bl	80011bc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	@ 0x64
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e103      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b75      	ldr	r3, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x312>
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a6e      	ldr	r2, [pc, #440]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e02d      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x334>
 8001bea:	4b6a      	ldr	r3, [pc, #424]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a69      	ldr	r2, [pc, #420]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b67      	ldr	r3, [pc, #412]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a66      	ldr	r2, [pc, #408]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	e01c      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x356>
 8001c0c:	4b61      	ldr	r3, [pc, #388]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a60      	ldr	r2, [pc, #384]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	4b5e      	ldr	r3, [pc, #376]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e00b      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c26:	4b5b      	ldr	r3, [pc, #364]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a5a      	ldr	r2, [pc, #360]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b58      	ldr	r3, [pc, #352]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a57      	ldr	r2, [pc, #348]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d015      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fab9 	bl	80011bc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff fab5 	bl	80011bc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0b1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4b4b      	ldr	r3, [pc, #300]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ee      	beq.n	8001c4e <HAL_RCC_OscConfig+0x37e>
 8001c70:	e014      	b.n	8001c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff faa3 	bl	80011bc <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff fa9f 	bl	80011bc <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e09b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a3b      	ldr	r2, [pc, #236]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8087 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb8:	4b36      	ldr	r3, [pc, #216]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d061      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d146      	bne.n	8001d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fa73 	bl	80011bc <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fa6f 	bl	80011bc <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e06d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d00:	d108      	bne.n	8001d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d02:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4921      	ldr	r1, [pc, #132]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a19      	ldr	r1, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	430b      	orrs	r3, r1
 8001d26:	491b      	ldr	r1, [pc, #108]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x4cc>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fa43 	bl	80011bc <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff fa3f 	bl	80011bc <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e03d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46a>
 8001d58:	e035      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fa2c 	bl	80011bc <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff fa28 	bl	80011bc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e026      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x498>
 8001d86:	e01e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e019      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_RCC_OscConfig+0x500>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0d0      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d910      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b67      	ldr	r3, [pc, #412]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4965      	ldr	r1, [pc, #404]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b63      	ldr	r3, [pc, #396]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b59      	ldr	r3, [pc, #356]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a58      	ldr	r2, [pc, #352]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b50      	ldr	r3, [pc, #320]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	494d      	ldr	r1, [pc, #308]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d040      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e073      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e06b      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b39      	ldr	r3, [pc, #228]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4936      	ldr	r1, [pc, #216]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff f97a 	bl	80011bc <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff f976 	bl	80011bc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e053      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d210      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4922      	ldr	r1, [pc, #136]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e032      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4916      	ldr	r1, [pc, #88]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490e      	ldr	r1, [pc, #56]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f62:	f000 f821 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	490a      	ldr	r1, [pc, #40]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f8d8 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08003c00 	.word	0x08003c00
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d002      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x36>
 8001fd6:	e027      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fda:	613b      	str	r3, [r7, #16]
      break;
 8001fdc:	e027      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4a17      	ldr	r2, [pc, #92]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff6:	4b11      	ldr	r3, [pc, #68]	@ (800203c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0c5b      	lsrs	r3, r3, #17
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 800200a:	fb03 f202 	mul.w	r2, r3, r2
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e004      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0c      	ldr	r2, [pc, #48]	@ (800204c <HAL_RCC_GetSysClockFreq+0xa4>)
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	613b      	str	r3, [r7, #16]
      break;
 8002026:	e002      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 800202a:	613b      	str	r3, [r7, #16]
      break;
 800202c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202e:	693b      	ldr	r3, [r7, #16]
}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	08003c18 	.word	0x08003c18
 8002048:	08003c28 	.word	0x08003c28
 800204c:	003d0900 	.word	0x003d0900

08002050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b02      	ldr	r3, [pc, #8]	@ (8002060 <HAL_RCC_GetHCLKFreq+0x10>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000000 	.word	0x20000000

08002064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002068:	f7ff fff2 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	@ (8002088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08003c10 	.word	0x08003c10

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002090:	f7ff ffde 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	@ (80020b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08003c10 	.word	0x08003c10

080020b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <RCC_Delay+0x34>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <RCC_Delay+0x38>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0a5b      	lsrs	r3, r3, #9
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d0:	bf00      	nop
  }
  while (Delay --);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	60fa      	str	r2, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f9      	bne.n	80020d0 <RCC_Delay+0x1c>
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20000000 	.word	0x20000000
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e041      	b.n	8002186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fee2 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 fc66 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e041      	b.n	8002224 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f839 	bl	800222c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2202      	movs	r2, #2
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f000 fc17 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <HAL_TIM_IC_Start_IT+0x1e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e013      	b.n	8002286 <HAL_TIM_IC_Start_IT+0x46>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d104      	bne.n	800226e <HAL_TIM_IC_Start_IT+0x2e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e00b      	b.n	8002286 <HAL_TIM_IC_Start_IT+0x46>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d104      	bne.n	800227e <HAL_TIM_IC_Start_IT+0x3e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800227a:	b2db      	uxtb	r3, r3
 800227c:	e003      	b.n	8002286 <HAL_TIM_IC_Start_IT+0x46>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002284:	b2db      	uxtb	r3, r3
 8002286:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <HAL_TIM_IC_Start_IT+0x58>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e013      	b.n	80022c0 <HAL_TIM_IC_Start_IT+0x80>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d104      	bne.n	80022a8 <HAL_TIM_IC_Start_IT+0x68>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e00b      	b.n	80022c0 <HAL_TIM_IC_Start_IT+0x80>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d104      	bne.n	80022b8 <HAL_TIM_IC_Start_IT+0x78>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e003      	b.n	80022c0 <HAL_TIM_IC_Start_IT+0x80>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022c2:	7bbb      	ldrb	r3, [r7, #14]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d102      	bne.n	80022ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022c8:	7b7b      	ldrb	r3, [r7, #13]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0b8      	b.n	8002444 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_IC_Start_IT+0xa2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e0:	e013      	b.n	800230a <HAL_TIM_IC_Start_IT+0xca>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d104      	bne.n	80022f2 <HAL_TIM_IC_Start_IT+0xb2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022f0:	e00b      	b.n	800230a <HAL_TIM_IC_Start_IT+0xca>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_IC_Start_IT+0xc2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002300:	e003      	b.n	800230a <HAL_TIM_IC_Start_IT+0xca>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_TIM_IC_Start_IT+0xda>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002318:	e013      	b.n	8002342 <HAL_TIM_IC_Start_IT+0x102>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d104      	bne.n	800232a <HAL_TIM_IC_Start_IT+0xea>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002328:	e00b      	b.n	8002342 <HAL_TIM_IC_Start_IT+0x102>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d104      	bne.n	800233a <HAL_TIM_IC_Start_IT+0xfa>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002338:	e003      	b.n	8002342 <HAL_TIM_IC_Start_IT+0x102>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d841      	bhi.n	80023cc <HAL_TIM_IC_Start_IT+0x18c>
 8002348:	a201      	add	r2, pc, #4	@ (adr r2, 8002350 <HAL_TIM_IC_Start_IT+0x110>)
 800234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234e:	bf00      	nop
 8002350:	08002385 	.word	0x08002385
 8002354:	080023cd 	.word	0x080023cd
 8002358:	080023cd 	.word	0x080023cd
 800235c:	080023cd 	.word	0x080023cd
 8002360:	08002397 	.word	0x08002397
 8002364:	080023cd 	.word	0x080023cd
 8002368:	080023cd 	.word	0x080023cd
 800236c:	080023cd 	.word	0x080023cd
 8002370:	080023a9 	.word	0x080023a9
 8002374:	080023cd 	.word	0x080023cd
 8002378:	080023cd 	.word	0x080023cd
 800237c:	080023cd 	.word	0x080023cd
 8002380:	080023bb 	.word	0x080023bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0202 	orr.w	r2, r2, #2
 8002392:	60da      	str	r2, [r3, #12]
      break;
 8002394:	e01d      	b.n	80023d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0204 	orr.w	r2, r2, #4
 80023a4:	60da      	str	r2, [r3, #12]
      break;
 80023a6:	e014      	b.n	80023d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0208 	orr.w	r2, r2, #8
 80023b6:	60da      	str	r2, [r3, #12]
      break;
 80023b8:	e00b      	b.n	80023d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0210 	orr.w	r2, r2, #16
 80023c8:	60da      	str	r2, [r3, #12]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      break;
 80023d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d134      	bne.n	8002442 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	6839      	ldr	r1, [r7, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fd12 	bl	8002e0a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_TIM_IC_Start_IT+0x20c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_TIM_IC_Start_IT+0x1ce>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f8:	d009      	beq.n	800240e <HAL_TIM_IC_Start_IT+0x1ce>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_TIM_IC_Start_IT+0x210>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_TIM_IC_Start_IT+0x1ce>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <HAL_TIM_IC_Start_IT+0x214>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d111      	bne.n	8002432 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b06      	cmp	r3, #6
 800241e:	d010      	beq.n	8002442 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002430:	e007      	b.n	8002442 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400
 8002454:	40000800 	.word	0x40000800

08002458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d122      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11b      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0202 	mvn.w	r2, #2
 8002484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fa60 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa91 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa97 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0204 	mvn.w	r2, #4
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fa36 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa67 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa6d 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b08      	cmp	r3, #8
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b08      	cmp	r3, #8
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0208 	mvn.w	r2, #8
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2204      	movs	r2, #4
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fa0c 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa3d 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa43 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b10      	cmp	r3, #16
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b10      	cmp	r3, #16
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0210 	mvn.w	r2, #16
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2208      	movs	r2, #8
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe f9e2 	bl	8000960 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa13 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa19 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0201 	mvn.w	r2, #1
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9ee 	bl	80029b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	2b80      	cmp	r3, #128	@ 0x80
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b80      	cmp	r3, #128	@ 0x80
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fc8d 	bl	8002f22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002612:	2b40      	cmp	r3, #64	@ 0x40
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002620:	2b40      	cmp	r3, #64	@ 0x40
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9dd 	bl	80029ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b20      	cmp	r3, #32
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b20      	cmp	r3, #32
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0220 	mvn.w	r2, #32
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fc58 	bl	8002f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002682:	2302      	movs	r3, #2
 8002684:	e088      	b.n	8002798 <HAL_TIM_IC_ConfigChannel+0x130>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80026a4:	f000 fa0e 	bl	8002ac4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020c 	bic.w	r2, r2, #12
 80026b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6999      	ldr	r1, [r3, #24]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	619a      	str	r2, [r3, #24]
 80026ca:	e060      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d11c      	bne.n	800270c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026e2:	f000 fa77 	bl	8002bd4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80026f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6999      	ldr	r1, [r3, #24]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	021a      	lsls	r2, r3, #8
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
 800270a:	e040      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11b      	bne.n	800274a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002722:	f000 fac2 	bl	8002caa <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 020c 	bic.w	r2, r2, #12
 8002734:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
 8002748:	e021      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d11c      	bne.n	800278a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002760:	f000 fade 	bl	8002d20 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002772:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69d9      	ldr	r1, [r3, #28]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	021a      	lsls	r2, r3, #8
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	61da      	str	r2, [r3, #28]
 8002788:	e001      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002796:	7dfb      	ldrb	r3, [r7, #23]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_TIM_ConfigClockSource+0x1c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e0b4      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x186>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027f4:	d03e      	beq.n	8002874 <HAL_TIM_ConfigClockSource+0xd4>
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027fa:	f200 8087 	bhi.w	800290c <HAL_TIM_ConfigClockSource+0x16c>
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002802:	f000 8086 	beq.w	8002912 <HAL_TIM_ConfigClockSource+0x172>
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280a:	d87f      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
 800280c:	2b70      	cmp	r3, #112	@ 0x70
 800280e:	d01a      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0xa6>
 8002810:	2b70      	cmp	r3, #112	@ 0x70
 8002812:	d87b      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b60      	cmp	r3, #96	@ 0x60
 8002816:	d050      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x11a>
 8002818:	2b60      	cmp	r3, #96	@ 0x60
 800281a:	d877      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b50      	cmp	r3, #80	@ 0x50
 800281e:	d03c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xfa>
 8002820:	2b50      	cmp	r3, #80	@ 0x50
 8002822:	d873      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	d058      	beq.n	80028da <HAL_TIM_ConfigClockSource+0x13a>
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	d86f      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b30      	cmp	r3, #48	@ 0x30
 800282e:	d064      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x15a>
 8002830:	2b30      	cmp	r3, #48	@ 0x30
 8002832:	d86b      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b20      	cmp	r3, #32
 8002836:	d060      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x15a>
 8002838:	2b20      	cmp	r3, #32
 800283a:	d867      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05c      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	2b10      	cmp	r3, #16
 8002842:	d05a      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x15a>
 8002844:	e062      	b.n	800290c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002856:	f000 fab9 	bl	8002dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	609a      	str	r2, [r3, #8]
      break;
 8002872:	e04f      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002884:	f000 faa2 	bl	8002dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002896:	609a      	str	r2, [r3, #8]
      break;
 8002898:	e03c      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 f966 	bl	8002b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2150      	movs	r1, #80	@ 0x50
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa70 	bl	8002d98 <TIM_ITRx_SetConfig>
      break;
 80028b8:	e02c      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c6:	461a      	mov	r2, r3
 80028c8:	f000 f9c0 	bl	8002c4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2160      	movs	r1, #96	@ 0x60
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fa60 	bl	8002d98 <TIM_ITRx_SetConfig>
      break;
 80028d8:	e01c      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 f946 	bl	8002b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2140      	movs	r1, #64	@ 0x40
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fa50 	bl	8002d98 <TIM_ITRx_SetConfig>
      break;
 80028f8:	e00c      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f000 fa47 	bl	8002d98 <TIM_ITRx_SetConfig>
      break;
 800290a:	e003      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      break;
 8002910:	e000      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d831      	bhi.n	80029a8 <HAL_TIM_ReadCapturedValue+0x78>
 8002944:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002981 	.word	0x08002981
 8002950:	080029a9 	.word	0x080029a9
 8002954:	080029a9 	.word	0x080029a9
 8002958:	080029a9 	.word	0x080029a9
 800295c:	0800298b 	.word	0x0800298b
 8002960:	080029a9 	.word	0x080029a9
 8002964:	080029a9 	.word	0x080029a9
 8002968:	080029a9 	.word	0x080029a9
 800296c:	08002995 	.word	0x08002995
 8002970:	080029a9 	.word	0x080029a9
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029a9 	.word	0x080029a9
 800297c:	0800299f 	.word	0x0800299f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	60fb      	str	r3, [r7, #12]

      break;
 8002988:	e00f      	b.n	80029aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002990:	60fb      	str	r3, [r7, #12]

      break;
 8002992:	e00a      	b.n	80029aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299a:	60fb      	str	r3, [r7, #12]

      break;
 800299c:	e005      	b.n	80029aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	60fb      	str	r3, [r7, #12]

      break;
 80029a6:	e000      	b.n	80029aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80029a8:	bf00      	nop
  }

  return tmpreg;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a29      	ldr	r2, [pc, #164]	@ (8002ab8 <TIM_Base_SetConfig+0xb8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <TIM_Base_SetConfig+0x30>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1e:	d007      	beq.n	8002a30 <TIM_Base_SetConfig+0x30>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a26      	ldr	r2, [pc, #152]	@ (8002abc <TIM_Base_SetConfig+0xbc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_Base_SetConfig+0x30>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	@ (8002ac0 <TIM_Base_SetConfig+0xc0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab8 <TIM_Base_SetConfig+0xb8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00b      	beq.n	8002a62 <TIM_Base_SetConfig+0x62>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0x62>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a19      	ldr	r2, [pc, #100]	@ (8002abc <TIM_Base_SetConfig+0xbc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0x62>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <TIM_Base_SetConfig+0xc0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <TIM_Base_SetConfig+0xb8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	615a      	str	r2, [r3, #20]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800

08002ac4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f023 0201 	bic.w	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <TIM_TI1_SetConfig+0xa8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00b      	beq.n	8002b0a <TIM_TI1_SetConfig+0x46>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af8:	d007      	beq.n	8002b0a <TIM_TI1_SetConfig+0x46>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <TIM_TI1_SetConfig+0xac>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d003      	beq.n	8002b0a <TIM_TI1_SetConfig+0x46>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a1b      	ldr	r2, [pc, #108]	@ (8002b74 <TIM_TI1_SetConfig+0xb0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <TIM_TI1_SetConfig+0x4a>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <TIM_TI1_SetConfig+0x4c>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e003      	b.n	8002b2e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f023 030a 	bic.w	r3, r3, #10
 8002b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 030a 	and.w	r3, r3, #10
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800

08002b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f023 0201 	bic.w	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f023 030a 	bic.w	r3, r3, #10
 8002bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f023 0210 	bic.w	r2, r3, #16
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	031b      	lsls	r3, r3, #12
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0210 	bic.w	r2, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	031b      	lsls	r3, r3, #12
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	031b      	lsls	r3, r3, #12
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d72:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	031b      	lsls	r3, r3, #12
 8002d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f043 0307 	orr.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	609a      	str	r2, [r3, #8]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	021a      	lsls	r2, r3, #8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e046      	b.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb8:	d009      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a12      	ldr	r2, [pc, #72]	@ (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a10      	ldr	r2, [pc, #64]	@ (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800

08002f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e042      	b.n	8002fcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f808 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	@ 0x24
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fd71 	bl	8003a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d16d      	bne.n	80030d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_UART_Transmit+0x2c>
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e066      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2221      	movs	r2, #33	@ 0x21
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003012:	f7fe f8d3 	bl	80011bc <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003048:	e02a      	b.n	80030a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	@ 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 faf9 	bl	800364c <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e036      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003078:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3302      	adds	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e007      	b.n	8003092 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1cf      	bne.n	800304a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	@ 0x40
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fac9 	bl	800364c <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0ba      	sub	sp, #232	@ 0xe8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800311a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_UART_IRQHandler+0x66>
 800312e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fbd1 	bl	80038e2 <UART_Receive_IT>
      return;
 8003140:	e25b      	b.n	80035fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80de 	beq.w	8003308 <HAL_UART_IRQHandler+0x22c>
 800314c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80d1 	beq.w	8003308 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_UART_IRQHandler+0xae>
 8003172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0xd2>
 8003196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f043 0202 	orr.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_UART_IRQHandler+0xf6>
 80031ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d011      	beq.n	8003202 <HAL_UART_IRQHandler+0x126>
 80031de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d105      	bne.n	80031f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f043 0208 	orr.w	r2, r3, #8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 81f2 	beq.w	80035f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800320c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_UART_IRQHandler+0x14e>
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fb5c 	bl	80038e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf14      	ite	ne
 8003238:	2301      	movne	r3, #1
 800323a:	2300      	moveq	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_UART_IRQHandler+0x17a>
 800324e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d04f      	beq.n	80032f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fa66 	bl	8003728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d041      	beq.n	80032ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3314      	adds	r3, #20
 8003270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003296:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800329a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1d9      	bne.n	800326a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d013      	beq.n	80032e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	4a7e      	ldr	r2, [pc, #504]	@ (80034bc <HAL_UART_IRQHandler+0x3e0>)
 80032c4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe f8ec 	bl	80014a8 <HAL_DMA_Abort_IT>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032e0:	4610      	mov	r0, r2
 80032e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	e00e      	b.n	8003304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f99c 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e00a      	b.n	8003304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f998 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e006      	b.n	8003304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f994 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003302:	e175      	b.n	80035f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	bf00      	nop
    return;
 8003306:	e173      	b.n	80035f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 814f 	bne.w	80035b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8148 	beq.w	80035b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8141 	beq.w	80035b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80b6 	beq.w	80034c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8145 	beq.w	80035f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800336e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003372:	429a      	cmp	r2, r3
 8003374:	f080 813e 	bcs.w	80035f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800337e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b20      	cmp	r3, #32
 8003388:	f000 8088 	beq.w	800349c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1d9      	bne.n	800338c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003400:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003404:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800340e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e1      	bne.n	80033d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800342a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003438:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800343a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800343e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e3      	bne.n	8003414 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800346a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800346c:	f023 0310 	bic.w	r3, r3, #16
 8003470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800347e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003480:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003484:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800348c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd ffcb 	bl	8001432 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8bf 	bl	8003636 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034b8:	e09c      	b.n	80035f4 <HAL_UART_IRQHandler+0x518>
 80034ba:	bf00      	nop
 80034bc:	080037ed 	.word	0x080037ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 808e 	beq.w	80035f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8089 	beq.w	80035f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800350a:	647a      	str	r2, [r7, #68]	@ 0x44
 800350c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e3      	bne.n	80034e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3314      	adds	r3, #20
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	623b      	str	r3, [r7, #32]
   return(result);
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3314      	adds	r3, #20
 800353e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003542:	633a      	str	r2, [r7, #48]	@ 0x30
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e3      	bne.n	800351e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	60fb      	str	r3, [r7, #12]
   return(result);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0310 	bic.w	r3, r3, #16
 800357a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003588:	61fa      	str	r2, [r7, #28]
 800358a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	69b9      	ldr	r1, [r7, #24]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	617b      	str	r3, [r7, #20]
   return(result);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e3      	bne.n	8003564 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f844 	bl	8003636 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ae:	e023      	b.n	80035f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_UART_IRQHandler+0x4f4>
 80035bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f923 	bl	8003814 <UART_Transmit_IT>
    return;
 80035ce:	e014      	b.n	80035fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00e      	beq.n	80035fa <HAL_UART_IRQHandler+0x51e>
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f962 	bl	80038b2 <UART_EndTransmit_IT>
    return;
 80035ee:	e004      	b.n	80035fa <HAL_UART_IRQHandler+0x51e>
    return;
 80035f0:	bf00      	nop
 80035f2:	e002      	b.n	80035fa <HAL_UART_IRQHandler+0x51e>
      return;
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <HAL_UART_IRQHandler+0x51e>
      return;
 80035f8:	bf00      	nop
  }
}
 80035fa:	37e8      	adds	r7, #232	@ 0xe8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b090      	sub	sp, #64	@ 0x40
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365c:	e050      	b.n	8003700 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d04c      	beq.n	8003700 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <UART_WaitOnFlagUntilTimeout+0x30>
 800366c:	f7fd fda6 	bl	80011bc <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003678:	429a      	cmp	r2, r3
 800367a:	d241      	bcs.n	8003700 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800369c:	637a      	str	r2, [r7, #52]	@ 0x34
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e5      	bne.n	800367c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	613b      	str	r3, [r7, #16]
   return(result);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036d0:	623a      	str	r2, [r7, #32]
 80036d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	69f9      	ldr	r1, [r7, #28]
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e5      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e00f      	b.n	8003720 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	429a      	cmp	r2, r3
 800371c:	d09f      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3740      	adds	r7, #64	@ 0x40
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b095      	sub	sp, #84	@ 0x54
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003750:	643a      	str	r2, [r7, #64]	@ 0x40
 8003752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	61fb      	str	r3, [r7, #28]
   return(result);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800378a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e5      	bne.n	8003764 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	2b01      	cmp	r3, #1
 800379e:	d119      	bne.n	80037d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f023 0310 	bic.w	r3, r3, #16
 80037b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c0:	61ba      	str	r2, [r7, #24]
 80037c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	613b      	str	r3, [r7, #16]
   return(result);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037e2:	bf00      	nop
 80037e4:	3754      	adds	r7, #84	@ 0x54
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff ff0c 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b21      	cmp	r3, #33	@ 0x21
 8003826:	d13e      	bne.n	80038a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003830:	d114      	bne.n	800385c <UART_Transmit_IT+0x48>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d110      	bne.n	800385c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800384e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	621a      	str	r2, [r3, #32]
 800385a:	e008      	b.n	800386e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6211      	str	r1, [r2, #32]
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29b      	uxth	r3, r3
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4619      	mov	r1, r3
 800387c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003890:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fe94 	bl	8003600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b08c      	sub	sp, #48	@ 0x30
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b22      	cmp	r3, #34	@ 0x22
 80038f4:	f040 80ae 	bne.w	8003a54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003900:	d117      	bne.n	8003932 <UART_Receive_IT+0x50>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d113      	bne.n	8003932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003920:	b29a      	uxth	r2, r3
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	1c9a      	adds	r2, r3, #2
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003930:	e026      	b.n	8003980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003944:	d007      	beq.n	8003956 <UART_Receive_IT+0x74>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <UART_Receive_IT+0x82>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	e008      	b.n	8003976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003970:	b2da      	uxtb	r2, r3
 8003972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4619      	mov	r1, r3
 800398e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003990:	2b00      	cmp	r3, #0
 8003992:	d15d      	bne.n	8003a50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0220 	bic.w	r2, r2, #32
 80039a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d135      	bne.n	8003a46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	613b      	str	r3, [r7, #16]
   return(result);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 0310 	bic.w	r3, r3, #16
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a00:	623a      	str	r2, [r7, #32]
 8003a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	69f9      	ldr	r1, [r7, #28]
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d10a      	bne.n	8003a38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fdf9 	bl	8003636 <HAL_UARTEx_RxEventCallback>
 8003a44:	e002      	b.n	8003a4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fde3 	bl	8003612 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e002      	b.n	8003a56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3730      	adds	r7, #48	@ 0x30
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a9a:	f023 030c 	bic.w	r3, r3, #12
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b74 <UART_SetConfig+0x114>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d103      	bne.n	8003ad0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7fe fae0 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	e002      	b.n	8003ad6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ad0:	f7fe fac8 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 8003ad4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <UART_SetConfig+0x118>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	0119      	lsls	r1, r3, #4
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009a      	lsls	r2, r3, #2
 8003b00:	441a      	add	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2064      	movs	r0, #100	@ 0x64
 8003b16:	fb00 f303 	mul.w	r3, r0, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	3332      	adds	r3, #50	@ 0x32
 8003b20:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b2c:	4419      	add	r1, r3
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009a      	lsls	r2, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b44:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b46:	fba3 0302 	umull	r0, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2064      	movs	r0, #100	@ 0x64
 8003b4e:	fb00 f303 	mul.w	r3, r0, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	@ 0x32
 8003b58:	4a07      	ldr	r2, [pc, #28]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	440a      	add	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40013800 	.word	0x40013800
 8003b78:	51eb851f 	.word	0x51eb851f

08003b7c <memset>:
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4402      	add	r2, r0
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d100      	bne.n	8003b86 <memset+0xa>
 8003b84:	4770      	bx	lr
 8003b86:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8a:	e7f9      	b.n	8003b80 <memset+0x4>

08003b8c <__libc_init_array>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	2600      	movs	r6, #0
 8003b90:	4d0c      	ldr	r5, [pc, #48]	@ (8003bc4 <__libc_init_array+0x38>)
 8003b92:	4c0d      	ldr	r4, [pc, #52]	@ (8003bc8 <__libc_init_array+0x3c>)
 8003b94:	1b64      	subs	r4, r4, r5
 8003b96:	10a4      	asrs	r4, r4, #2
 8003b98:	42a6      	cmp	r6, r4
 8003b9a:	d109      	bne.n	8003bb0 <__libc_init_array+0x24>
 8003b9c:	f000 f81a 	bl	8003bd4 <_init>
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	4d0a      	ldr	r5, [pc, #40]	@ (8003bcc <__libc_init_array+0x40>)
 8003ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd0 <__libc_init_array+0x44>)
 8003ba6:	1b64      	subs	r4, r4, r5
 8003ba8:	10a4      	asrs	r4, r4, #2
 8003baa:	42a6      	cmp	r6, r4
 8003bac:	d105      	bne.n	8003bba <__libc_init_array+0x2e>
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb4:	4798      	blx	r3
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7ee      	b.n	8003b98 <__libc_init_array+0xc>
 8003bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbe:	4798      	blx	r3
 8003bc0:	3601      	adds	r6, #1
 8003bc2:	e7f2      	b.n	8003baa <__libc_init_array+0x1e>
 8003bc4:	08003c2c 	.word	0x08003c2c
 8003bc8:	08003c2c 	.word	0x08003c2c
 8003bcc:	08003c2c 	.word	0x08003c2c
 8003bd0:	08003c30 	.word	0x08003c30

08003bd4 <_init>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr

08003be0 <_fini>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr
