/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
/*input password*/
static uint8_t Password_In[10] = {0};
/*saved password*/
static uint8_t Password_Ch[] = "123456789";
/*enum for state machine*/
typedef enum
{
  welcome,
  receive,
  submit
} DisplayState_t;

/* USER CODE END Variables */
/* Definitions for Confirmation */
osThreadId_t ConfirmationHandle;
const osThreadAttr_t Confirmation_attributes = {
    .name = "Confirmation",
    .stack_size = 128 * 4,
    .priority = (osPriority_t)osPriorityNormal3,
};
/* Definitions for Display */
osThreadId_t DisplayHandle;
const osThreadAttr_t Display_attributes = {
    .name = "Display",
    .stack_size = 128 * 4,
    .priority = (osPriority_t)osPriorityLow2,
};
/* Definitions for Input */
osThreadId_t InputHandle;
const osThreadAttr_t Input_attributes = {
    .name = "Input",
    .stack_size = 128 * 4,
    .priority = (osPriority_t)osPriorityLow,
};
/* Definitions for PasswordQueue */
osMessageQueueId_t PasswordQueueHandle;
const osMessageQueueAttr_t PasswordQueue_attributes = {
    .name = "PasswordQueue"};
/* Definitions for PasswordSemaphore */
osSemaphoreId_t PasswordSemaphoreHandle;
const osSemaphoreAttr_t PasswordSemaphore_attributes = {
    .name = "PasswordSemaphore"};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void Confirmation_T(void *argument);
void Display_T(void *argument);
void Input_T(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PasswordSemaphore */
  PasswordSemaphoreHandle = osSemaphoreNew(1, 0, &PasswordSemaphore_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of PasswordQueue */
  PasswordQueueHandle = osMessageQueueNew(10, sizeof(uint8_t), &PasswordQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Confirmation */
  ConfirmationHandle = osThreadNew(Confirmation_T, NULL, &Confirmation_attributes);

  /* creation of Display */
  DisplayHandle = osThreadNew(Display_T, NULL, &Display_attributes);

  /* creation of Input */
  InputHandle = osThreadNew(Input_T, NULL, &Input_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}

/* USER CODE BEGIN Header_Confirmation_T */
/**
 * @brief  Function implementing the Confirmation thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Confirmation_T */
void Confirmation_T(void *argument)
{
  /* USER CODE BEGIN Confirmation_T */
  osSemaphoreAcquire(PasswordSemaphoreHandle,HAL_MAX_DELAY);
  /* Infinite loop */
  for (;;)
  {
    osSemaphoreAcquire(PasswordSemaphoreHandle,HAL_MAX_DELAY);
    if(strcmp((const uint8_t *)Password_Ch,(const uint8_t *)Password_In))
    {
      HAL_UART_Transmit(&huart1, (uint8_t *)"Access granted\r\n", 17, 0);
    }
    else
    {
      HAL_UART_Transmit(&huart1, (uint8_t *)"Access denied\r\n", 16, 0);
    }
    osDelay(1);
  }
  /* USER CODE END Confirmation_T */
}

/* USER CODE BEGIN Header_Display_T */
/**
 * @brief Function implementing the Display thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Display_T */
void Display_T(void *argument)
{
  /* USER CODE BEGIN Display_T */
  DisplayState_t CurrentState = welcome;
  osStatus queueState = pdFALSE;
  uint8_t inputKey = 0;
  uint8_t passwordIndex = 0;
  /* Infinite loop */
  for (;;)
  {
    queueState = osMessageQueueGet(PasswordQueueHandle, &inputKey, 0, 5000);
    if (queueState == osOK)
    {
      switch (CurrentState)
      {
      case welcome:
        if (inputKey == '#')
        {
          CurrentState = receive;
          HAL_UART_Transmit(&huart1, (void *)"\r\nPassword:", 12, 100);
        }
        break;
      case receive:
        switch (inputKey)
        {
        case '#':
          Password_In[passwordIndex]= '\0';  /*add null to the string*/
          CurrentState = submit;
          passwordIndex =0;
          /*release the semaphore to fire the confirmation task*/
          osSemaphoreRelease(PasswordSemaphoreHandle);
          break;
        case 0x08:
        /*backspace*/
          if(passwordIndex >0)
          {passwordIndex -=1;}
          break; 
        default:
          if(passwordIndex <9)
          {
            Password_In[passwordIndex] = inputKey;
            passwordIndex ++;
            HAL_UART_Transmit(&huart1, (uint8_t *)'*', 1, 0);
          }
          else
          {
            Password_In[passwordIndex]= '\0';
            CurrentState = submit;
            passwordIndex =0;
            osSemaphoreRelease(PasswordSemaphoreHandle);
          }
          break;
        }
        break;
      case submit:
        CurrentState = welcome;
        passwordIndex =0;
        HAL_UART_Transmit(&huart1,(void *)"\r\nWelcome\r\n",12,100);
        break;
      default:
        break;
      }
    }
    osDelay(1);
  }
  /* USER CODE END Display_T */
}

/* USER CODE BEGIN Header_Input_T */
/**
 * @brief Function implementing the Input thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Input_T */

void Input_T(void *argument)
{
  /* USER CODE BEGIN Input_T */
  uint8_t inputKey = 0;
  HAL_UART_Transmit(&huart1, (uint8_t *)"Input", 6, 0);
  /* Infinite loop */
  for (;;)
  {
    inputKey = getchar();                                            /*get char from the prompt*/
    osMessageQueuePut(PasswordQueueHandle, (void *)&inputKey, 0, 0); /*message send to queue*/
    osDelay(50);                                                     /*the 50 ms is min value for human i/p*/
  }
  /* USER CODE END Input_T */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */
